{"version":3,"file":"static/js/109.e4334fe2.chunk.js","mappings":"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","sources":["components/employees/TreeItem.tsx","components/common/Modal.tsx","components/employees/AddEmployeeForm.tsx","pages/Employees.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useSortable } from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport { TreeItem } from '../../types/employee';\r\n\r\ninterface Props {\r\n  item: TreeItem;\r\n  depth: number;\r\n  onCollapse?: (id: string) => void;\r\n}\r\n\r\nconst TreeItemComponent: React.FC<Props> = ({ item, depth, onCollapse }) => {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    isDragging,\r\n  } = useSortable({\r\n    id: item.id,\r\n  });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n    marginLeft: `${depth * 24}px`,\r\n    opacity: isDragging ? 0.5 : 1,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={`flex items-center p-2 my-1 bg-white rounded-lg border ${\r\n        isDragging ? 'border-blue-500 shadow-lg' : 'border-gray-200'\r\n      }`}\r\n    >\r\n      <div\r\n        {...attributes}\r\n        {...listeners}\r\n        className=\"flex items-center flex-1 cursor-grab\"\r\n      >\r\n        {item.children.length > 0 && (\r\n          <button\r\n            onClick={() => onCollapse?.(item.id)}\r\n            className=\"mr-2 text-gray-500 hover:text-gray-700\"\r\n          >\r\n            {item.collapsed ? (\r\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\r\n              </svg>\r\n            ) : (\r\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n              </svg>\r\n            )}\r\n          </button>\r\n        )}\r\n        \r\n        <div className=\"flex items-center flex-1\">\r\n          <img\r\n            src={item.data.imageUrl || `https://ui-avatars.com/api/?name=${item.data.firstName}+${item.data.lastName}`}\r\n            alt={`${item.data.firstName} ${item.data.lastName}`}\r\n            className=\"w-8 h-8 rounded-full mr-3\"\r\n          />\r\n          <div>\r\n            <div className=\"font-medium\">\r\n              {item.data.firstName} {item.data.lastName}\r\n            </div>\r\n            <div className=\"text-sm text-gray-500\">\r\n              {item.data.position}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"text-sm text-gray-500 ml-4\">\r\n          {item.data.department}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeItemComponent;","import React from 'react';\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  title: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children }) => {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\r\n      <div className=\"flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n        <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n          <div className=\"absolute inset-0 bg-gray-500 opacity-75\" onClick={onClose}></div>\r\n        </div>\r\n\r\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n        <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n          <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n            <div className=\"sm:flex sm:items-start\">\r\n              <div className=\"mt-3 text-center sm:mt-0 sm:text-left w-full\">\r\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{title}</h3>\r\n                <div className=\"mt-4\">\r\n                  {children}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;","import React, { useState } from 'react';\r\nimport { Employee } from '../../types/employee';\r\n\r\ninterface AddEmployeeFormProps {\r\n  onSubmit: (employee: Omit<Employee, 'id'>) => void;\r\n  onCancel: () => void;\r\n  managers: Employee[];\r\n  departments: string[];\r\n}\r\n\r\nconst AddEmployeeForm: React.FC<AddEmployeeFormProps> = ({\r\n  onSubmit,\r\n  onCancel,\r\n  managers,\r\n  departments,\r\n}) => {\r\n  const [formData, setFormData] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    position: '',\r\n    department: departments[0] || '',\r\n    managerId: managers[0]?.id || null,\r\n  });\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    onSubmit(formData);\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n      <div>\r\n        <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700\">\r\n          First Name\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"firstName\"\r\n          name=\"firstName\"\r\n          value={formData.firstName}\r\n          onChange={handleChange}\r\n          required\r\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700\">\r\n          Last Name\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"lastName\"\r\n          name=\"lastName\"\r\n          value={formData.lastName}\r\n          onChange={handleChange}\r\n          required\r\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\r\n          Email\r\n        </label>\r\n        <input\r\n          type=\"email\"\r\n          id=\"email\"\r\n          name=\"email\"\r\n          value={formData.email}\r\n          onChange={handleChange}\r\n          required\r\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"position\" className=\"block text-sm font-medium text-gray-700\">\r\n          Position\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"position\"\r\n          name=\"position\"\r\n          value={formData.position}\r\n          onChange={handleChange}\r\n          required\r\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"department\" className=\"block text-sm font-medium text-gray-700\">\r\n          Department\r\n        </label>\r\n        <select\r\n          id=\"department\"\r\n          name=\"department\"\r\n          value={formData.department}\r\n          onChange={handleChange}\r\n          required\r\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n        >\r\n          {departments.map(dept => (\r\n            <option key={dept} value={dept}>\r\n              {dept}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"managerId\" className=\"block text-sm font-medium text-gray-700\">\r\n          Manager\r\n        </label>\r\n        <select\r\n          id=\"managerId\"\r\n          name=\"managerId\"\r\n          value={formData.managerId || ''}\r\n          onChange={handleChange}\r\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n        >\r\n          <option value=\"\">No Manager</option>\r\n          {managers.map(manager => (\r\n            <option key={manager.id} value={manager.id}>\r\n              {manager.firstName} {manager.lastName} - {manager.position}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"mt-6 flex justify-end space-x-3\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={onCancel}\r\n          className=\"px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n        >\r\n          Add Employee\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddEmployeeForm;","import React, { useState } from 'react';\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragEndEvent,\r\n} from '@dnd-kit/core';\r\nimport {\r\n  SortableContext,\r\n  verticalListSortingStrategy,\r\n} from '@dnd-kit/sortable';\r\nimport TreeItem from '../components/employees/TreeItem';\r\nimport { Employee, TreeItem as TreeItemType } from '../types/employee';\r\nimport Modal from '../components/common/Modal';\r\nimport AddEmployeeForm from '../components/employees/AddEmployeeForm';\r\n\r\n// Mock data - replace with API call\r\nconst mockEmployees: Employee[] = [\r\n  {\r\n    id: '1',\r\n    firstName: 'John',\r\n    lastName: 'Doe',\r\n    email: 'john.doe@example.com',\r\n    position: 'CEO',\r\n    department: 'Executive',\r\n    managerId: null,\r\n  },\r\n  {\r\n    id: '2',\r\n    firstName: 'Jane',\r\n    lastName: 'Smith',\r\n    email: 'jane.smith@example.com',\r\n    position: 'CTO',\r\n    department: 'Engineering',\r\n    managerId: '1',\r\n  },\r\n  {\r\n    id: '3',\r\n    firstName: 'Bob',\r\n    lastName: 'Johnson',\r\n    email: 'bob.johnson@example.com',\r\n    position: 'Engineering Manager',\r\n    department: 'Engineering',\r\n    managerId: '2',\r\n  },\r\n];\r\n\r\nconst buildTree = (\r\n  employees: Employee[],\r\n  managerId: string | null = null\r\n): TreeItemType[] => {\r\n  return employees\r\n    .filter(emp => emp.managerId === managerId)\r\n    .map(emp => ({\r\n      id: emp.id,\r\n      children: buildTree(employees, emp.id),\r\n      data: emp,\r\n      collapsed: false,\r\n    }));\r\n};\r\n\r\nconst flattenTree = (items: TreeItemType[]): TreeItemType[] => {\r\n  return items.reduce<TreeItemType[]>((flat, item) => {\r\n    if (item.collapsed) {\r\n      return [...flat, item];\r\n    }\r\n    return [...flat, item, ...flattenTree(item.children)];\r\n  }, []);\r\n};\r\n\r\nconst Employees: React.FC = () => {\r\n  const [items, setItems] = useState<TreeItemType[]>(buildTree(mockEmployees));\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor)\r\n  );\r\n\r\n  // Get unique departments from existing employees\r\n  const departments = Array.from(new Set(mockEmployees.map(emp => emp.department)));\r\n\r\n  // Get all employees that can be managers\r\n  const potentialManagers = mockEmployees;\r\n\r\n  const flattenedItems = flattenTree(items);\r\n  const filteredItems = searchQuery\r\n    ? flattenedItems.filter(item => \r\n        `${item.data.firstName} ${item.data.lastName} ${item.data.position}`\r\n          .toLowerCase()\r\n          .includes(searchQuery.toLowerCase())\r\n      )\r\n    : flattenedItems;\r\n\r\n  const handleDragEnd = (event: DragEndEvent) => {\r\n    const { active, over } = event;\r\n\r\n    if (!over || active.id === over.id) {\r\n      return;\r\n    }\r\n\r\n    const activeItem = flattenedItems.find(item => item.id === active.id);\r\n    const overItem = flattenedItems.find(item => item.id === over.id);\r\n\r\n    if (!activeItem || !overItem) {\r\n      return;\r\n    }\r\n\r\n    // Collect all employees from the tree structure\r\n    const getAllEmployees = (items: TreeItemType[]): Employee[] => {\r\n      return items.reduce<Employee[]>((acc, item) => {\r\n        return [...acc, item.data, ...getAllEmployees(item.children)];\r\n      }, []);\r\n    };\r\n\r\n    // Update the managerId in your data structure\r\n    const allEmployees = getAllEmployees(items);\r\n    const updatedEmployees = allEmployees.map(emp => {\r\n      if (emp.id === activeItem.data.id) {\r\n        return { ...emp, managerId: overItem.data.id };\r\n      }\r\n      return emp;\r\n    });\r\n\r\n    setItems(buildTree(updatedEmployees));\r\n  };\r\n\r\n  const handleCollapse = (itemId: string) => {\r\n    const updateCollapsed = (items: TreeItemType[]): TreeItemType[] => {\r\n      return items.map(item => {\r\n        if (item.id === itemId) {\r\n          return { ...item, collapsed: !item.collapsed };\r\n        }\r\n        return {\r\n          ...item,\r\n          children: updateCollapsed(item.children),\r\n        };\r\n      });\r\n    };\r\n\r\n    setItems(updateCollapsed(items));\r\n  };\r\n\r\n  const handleAddEmployee = (employeeData: Omit<Employee, 'id'>) => {\r\n    // In a real app, this would be an API call\r\n    const newEmployee: Employee = {\r\n      ...employeeData,\r\n      id: `emp-${Date.now()}`, // Generate a unique ID (use proper UUID in production)\r\n    };\r\n\r\n    mockEmployees.push(newEmployee);\r\n    setItems(buildTree(mockEmployees));\r\n    setIsAddModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-2xl font-semibold text-gray-900\">Employee Hierarchy</h1>\r\n        <div className=\"flex space-x-4\">\r\n          <div className=\"relative\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search employees...\"\r\n              className=\"w-64 px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n            />\r\n            <svg\r\n              className=\"absolute right-3 top-2.5 h-5 w-5 text-gray-400\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          <button \r\n            onClick={() => setIsAddModalOpen(true)}\r\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\r\n          >\r\n            Add Employee\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"bg-white shadow rounded-lg p-6\">\r\n        <DndContext\r\n          sensors={sensors}\r\n          collisionDetection={closestCenter}\r\n          onDragEnd={handleDragEnd}\r\n        >\r\n          <SortableContext\r\n            items={filteredItems.map(item => item.id)}\r\n            strategy={verticalListSortingStrategy}\r\n          >\r\n            {filteredItems.map((item) => (\r\n              <TreeItem\r\n                key={item.id}\r\n                item={item}\r\n                depth={0}\r\n                onCollapse={handleCollapse}\r\n              />\r\n            ))}\r\n          </SortableContext>\r\n        </DndContext>\r\n      </div>\r\n\r\n      <Modal\r\n        isOpen={isAddModalOpen}\r\n        onClose={() => setIsAddModalOpen(false)}\r\n        title=\"Add New Employee\"\r\n      >\r\n        <AddEmployeeForm\r\n          onSubmit={handleAddEmployee}\r\n          onCancel={() => setIsAddModalOpen(false)}\r\n          managers={potentialManagers}\r\n          departments={departments}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Employees;"],"names":["_ref","item","depth","onCollapse","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","id","style","CSS","Transform","toString","marginLeft","concat","opacity","_jsx","ref","className","children","_jsxs","_objectSpread","length","onClick","collapsed","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","src","data","imageUrl","firstName","lastName","alt","position","department","isOpen","onClose","title","_managers$","onSubmit","onCancel","managers","departments","formData","setFormData","useState","email","managerId","handleChange","e","name","value","target","prev","preventDefault","htmlFor","type","onChange","required","map","dept","manager","mockEmployees","buildTree","employees","arguments","undefined","filter","emp","flattenTree","items","reduce","flat","Employees","setItems","searchQuery","setSearchQuery","isAddModalOpen","setIsAddModalOpen","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","Array","from","Set","potentialManagers","flattenedItems","filteredItems","toLowerCase","includes","handleCollapse","itemId","updateCollapsed","placeholder","DndContext","collisionDetection","closestCenter","onDragEnd","event","active","over","activeItem","find","overItem","getAllEmployees","acc","updatedEmployees","SortableContext","strategy","verticalListSortingStrategy","TreeItem","Modal","AddEmployeeForm","employeeData","newEmployee","Date","now","push"],"sourceRoot":""}