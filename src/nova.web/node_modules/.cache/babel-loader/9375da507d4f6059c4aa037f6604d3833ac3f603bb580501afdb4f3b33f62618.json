{"ast":null,"code":"/*! @azure/msal-browser v3.28.0 2024-12-12 */\n'use strict';\n\nimport _objectSpread from \"C:/temp/NovaApp/src/nova.web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, buildStaticAuthorityOptions, PerformanceEvents, TimeUtils, OIDC_DEFAULT_SCOPES, AccountEntity } from '@azure/msal-common/browser';\nimport { InteractionType, CacheLookupPolicy, DEFAULT_REQUEST } from '../utils/BrowserConstants.mjs';\nimport { CryptoOps } from '../crypto/CryptoOps.mjs';\nimport { NestedAppAuthAdapter } from '../naa/mapping/NestedAppAuthAdapter.mjs';\nimport { NestedAppAuthError } from '../error/NestedAppAuthError.mjs';\nimport { EventHandler } from '../event/EventHandler.mjs';\nimport { EventType } from '../event/EventType.mjs';\nimport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER } from '../cache/BrowserCacheManager.mjs';\nimport { getAccount, setActiveAccount, getAllAccounts, getAccountByUsername, getAccountByHomeId, getAccountByLocalId, getActiveAccount } from '../cache/AccountManager.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass NestedAppAuthController {\n  constructor(operatingContext) {\n    this.operatingContext = operatingContext;\n    const proxy = this.operatingContext.getBridgeProxy();\n    if (proxy !== undefined) {\n      this.bridgeProxy = proxy;\n    } else {\n      throw new Error(\"unexpected: bridgeProxy is undefined\");\n    }\n    // Set the configuration.\n    this.config = operatingContext.getConfig();\n    // Initialize logger\n    this.logger = this.operatingContext.getLogger();\n    // Initialize performance client\n    this.performanceClient = this.config.telemetry.client;\n    // Initialize the crypto class.\n    this.browserCrypto = operatingContext.isBrowserEnvironment() ? new CryptoOps(this.logger, this.performanceClient) : DEFAULT_CRYPTO_IMPLEMENTATION;\n    // Initialize the browser storage class.\n    this.browserStorage = this.operatingContext.isBrowserEnvironment() ? new BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger, buildStaticAuthorityOptions(this.config.auth)) : DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId, this.logger);\n    this.eventHandler = new EventHandler(this.logger);\n    this.nestedAppAuthAdapter = new NestedAppAuthAdapter(this.config.auth.clientId, this.config.auth.clientCapabilities, this.browserCrypto, this.logger);\n    // Set the active account if available\n    const accountContext = this.bridgeProxy.getAccountContext();\n    if (accountContext) {\n      const cachedAccount = getAccount(accountContext, this.logger, this.browserStorage);\n      setActiveAccount(cachedAccount, this.browserStorage);\n    }\n  }\n  /**\r\n   * Factory function to create a new instance of NestedAppAuthController\r\n   * @param operatingContext\r\n   * @returns Promise<IController>\r\n   */\n  static async createController(operatingContext) {\n    const controller = new NestedAppAuthController(operatingContext);\n    return Promise.resolve(controller);\n  }\n  /**\r\n   * Specific implementation of initialize function for NestedAppAuthController\r\n   * @returns\r\n   */\n  initialize() {\n    // do nothing not required by this controller\n    return Promise.resolve();\n  }\n  /**\r\n   * Validate the incoming request and add correlationId if not present\r\n   * @param request\r\n   * @returns\r\n   */\n  ensureValidRequest(request) {\n    if (request !== null && request !== void 0 && request.correlationId) {\n      return request;\n    }\n    return _objectSpread(_objectSpread({}, request), {}, {\n      correlationId: this.browserCrypto.createNewGuid()\n    });\n  }\n  /**\r\n   * Internal implementation of acquireTokenInteractive flow\r\n   * @param request\r\n   * @returns\r\n   */\n  async acquireTokenInteractive(request) {\n    const validRequest = this.ensureValidRequest(request);\n    this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Popup, validRequest);\n    const atPopupMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenPopup, validRequest.correlationId);\n    atPopupMeasurement === null || atPopupMeasurement === void 0 || atPopupMeasurement.add({\n      nestedAppAuthRequest: true\n    });\n    try {\n      const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n      const reqTimestamp = TimeUtils.nowSeconds();\n      const response = await this.bridgeProxy.getTokenInteractive(naaRequest);\n      const result = _objectSpread({}, this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp));\n      // cache the tokens in the response\n      await this.hydrateCache(result, request);\n      this.browserStorage.setActiveAccount(result.account);\n      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Popup, result);\n      atPopupMeasurement.add({\n        accessTokenSize: result.accessToken.length,\n        idTokenSize: result.idToken.length\n      });\n      atPopupMeasurement.end({\n        success: true,\n        requestId: result.requestId\n      });\n      return result;\n    } catch (e) {\n      const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Popup, null, e);\n      atPopupMeasurement.end({\n        success: false\n      }, e);\n      throw error;\n    }\n  }\n  /**\r\n   * Internal implementation of acquireTokenSilent flow\r\n   * @param request\r\n   * @returns\r\n   */\n  async acquireTokenSilentInternal(request) {\n    const validRequest = this.ensureValidRequest(request);\n    this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, validRequest);\n    // Look for tokens in the cache first\n    const result = await this.acquireTokenFromCache(validRequest);\n    if (result) {\n      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, result);\n      return result;\n    }\n    // proceed with acquiring tokens via the host\n    const ssoSilentMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SsoSilent, validRequest.correlationId);\n    ssoSilentMeasurement === null || ssoSilentMeasurement === void 0 || ssoSilentMeasurement.increment({\n      visibilityChangeCount: 0\n    });\n    ssoSilentMeasurement === null || ssoSilentMeasurement === void 0 || ssoSilentMeasurement.add({\n      nestedAppAuthRequest: true\n    });\n    try {\n      const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n      const reqTimestamp = TimeUtils.nowSeconds();\n      const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n      const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n      // cache the tokens in the response\n      await this.hydrateCache(result, request);\n      this.browserStorage.setActiveAccount(result.account);\n      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, result);\n      ssoSilentMeasurement === null || ssoSilentMeasurement === void 0 || ssoSilentMeasurement.add({\n        accessTokenSize: result.accessToken.length,\n        idTokenSize: result.idToken.length\n      });\n      ssoSilentMeasurement === null || ssoSilentMeasurement === void 0 || ssoSilentMeasurement.end({\n        success: true,\n        requestId: result.requestId\n      });\n      return result;\n    } catch (e) {\n      const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, e);\n      ssoSilentMeasurement === null || ssoSilentMeasurement === void 0 || ssoSilentMeasurement.end({\n        success: false\n      }, e);\n      throw error;\n    }\n  }\n  /**\r\n   * acquires tokens from cache\r\n   * @param request\r\n   * @returns\r\n   */\n  async acquireTokenFromCache(request) {\n    const atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, request.correlationId);\n    atsMeasurement === null || atsMeasurement === void 0 || atsMeasurement.add({\n      nestedAppAuthRequest: true\n    });\n    // if the request has claims, we cannot look up in the cache\n    if (request.claims) {\n      this.logger.verbose(\"Claims are present in the request, skipping cache lookup\");\n      return null;\n    }\n    // respect cache lookup policy\n    let result = null;\n    switch (request.cacheLookupPolicy) {\n      case CacheLookupPolicy.Default:\n      case CacheLookupPolicy.AccessToken:\n      case CacheLookupPolicy.AccessTokenAndRefreshToken:\n        result = await this.acquireTokenFromCacheInternal(request);\n        break;\n      default:\n        return null;\n    }\n    if (result) {\n      var _result, _result2;\n      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, result);\n      atsMeasurement === null || atsMeasurement === void 0 || atsMeasurement.add({\n        accessTokenSize: (_result = result) === null || _result === void 0 ? void 0 : _result.accessToken.length,\n        idTokenSize: (_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.idToken.length\n      });\n      atsMeasurement === null || atsMeasurement === void 0 || atsMeasurement.end({\n        success: true\n      });\n      return result;\n    }\n    this.logger.error(\"Cached tokens are not found for the account, proceeding with silent token request.\");\n    this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null);\n    atsMeasurement === null || atsMeasurement === void 0 || atsMeasurement.end({\n      success: false\n    });\n    return null;\n  }\n  /**\r\n   *\r\n   * @param request\r\n   * @returns\r\n   */\n  async acquireTokenFromCacheInternal(request) {\n    var _request$scopes;\n    const accountContext = this.bridgeProxy.getAccountContext();\n    let currentAccount = null;\n    if (accountContext) {\n      const hubAccount = getAccount(accountContext, this.logger, this.browserStorage);\n      // always prioritize for hub account context, the reqirement of `request.account` will be removed soon\n      currentAccount = hubAccount || request.account;\n    }\n    // fall back to brokering if no cached account is found\n    if (!currentAccount) {\n      this.logger.verbose(\"No active account found, falling back to the host\");\n      return Promise.resolve(null);\n    }\n    this.logger.verbose(\"active account found, attempting to acquire token silently\");\n    const authRequest = _objectSpread(_objectSpread({}, request), {}, {\n      correlationId: request.correlationId || this.browserCrypto.createNewGuid(),\n      authority: request.authority || currentAccount.environment,\n      scopes: (_request$scopes = request.scopes) !== null && _request$scopes !== void 0 && _request$scopes.length ? request.scopes : [...OIDC_DEFAULT_SCOPES]\n    });\n    // fetch access token and check for expiry\n    const tokenKeys = this.browserStorage.getTokenKeys();\n    const cachedAccessToken = this.browserStorage.getAccessToken(currentAccount, authRequest, tokenKeys, currentAccount.tenantId, this.performanceClient, authRequest.correlationId);\n    // If there is no access token, log it and return null\n    if (!cachedAccessToken) {\n      this.logger.verbose(\"No cached access token found\");\n      return Promise.resolve(null);\n    } else if (TimeUtils.wasClockTurnedBack(cachedAccessToken.cachedAt) || TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.system.tokenRenewalOffsetSeconds)) {\n      this.logger.verbose(\"Cached access token has expired\");\n      return Promise.resolve(null);\n    }\n    const cachedIdToken = this.browserStorage.getIdToken(currentAccount, tokenKeys, currentAccount.tenantId, this.performanceClient, authRequest.correlationId);\n    if (!cachedIdToken) {\n      this.logger.verbose(\"No cached id token found\");\n      return Promise.resolve(null);\n    }\n    return this.nestedAppAuthAdapter.toAuthenticationResultFromCache(currentAccount, cachedIdToken, cachedAccessToken, authRequest, authRequest.correlationId);\n  }\n  /**\r\n   * acquireTokenPopup flow implementation\r\n   * @param request\r\n   * @returns\r\n   */\n  async acquireTokenPopup(request) {\n    return this.acquireTokenInteractive(request);\n  }\n  /**\r\n   * acquireTokenRedirect flow is not supported in nested app auth\r\n   * @param request\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  acquireTokenRedirect(request) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  /**\r\n   * acquireTokenSilent flow implementation\r\n   * @param silentRequest\r\n   * @returns\r\n   */\n  async acquireTokenSilent(silentRequest) {\n    return this.acquireTokenSilentInternal(silentRequest);\n  }\n  /**\r\n   * Hybrid flow is not currently supported in nested app auth\r\n   * @param request\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  acquireTokenByCode(request // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  /**\r\n   * acquireTokenNative flow is not currently supported in nested app auth\r\n   * @param request\r\n   * @param apiId\r\n   * @param accountId\r\n   */\n  acquireTokenNative(request, apiId,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  accountId // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  /**\r\n   * acquireTokenByRefreshToken flow is not currently supported in nested app auth\r\n   * @param commonRequest\r\n   * @param silentRequest\r\n   */\n  acquireTokenByRefreshToken(commonRequest,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  silentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback\r\n   * @param eventTypes\r\n   */\n  addEventCallback(callback, eventTypes) {\n    return this.eventHandler.addEventCallback(callback, eventTypes);\n  }\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n  removeEventCallback(callbackId) {\n    this.eventHandler.removeEventCallback(callbackId);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addPerformanceCallback(callback) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  removePerformanceCallback(callbackId) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  enableAccountStorageEvents() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  disableAccountStorageEvents() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // #region Account APIs\n  /**\r\n   * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n   * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n   * @returns Array of AccountInfo objects in cache\r\n   */\n  getAllAccounts(accountFilter) {\n    return getAllAccounts(this.logger, this.browserStorage, this.isBrowserEnv(), accountFilter);\n  }\n  /**\r\n   * Returns the first account found in the cache that matches the account filter passed in.\r\n   * @param accountFilter\r\n   * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n   */\n  getAccount(accountFilter) {\n    return getAccount(accountFilter, this.logger, this.browserStorage);\n  }\n  /**\r\n   * Returns the signed in account matching username.\r\n   * (the account object is created at the time of successful login)\r\n   * or null when no matching account is found.\r\n   * This API is provided for convenience but getAccountById should be used for best reliability\r\n   * @param username\r\n   * @returns The account object stored in MSAL\r\n   */\n  getAccountByUsername(username) {\n    return getAccountByUsername(username, this.logger, this.browserStorage);\n  }\n  /**\r\n   * Returns the signed in account matching homeAccountId.\r\n   * (the account object is created at the time of successful login)\r\n   * or null when no matching account is found\r\n   * @param homeAccountId\r\n   * @returns The account object stored in MSAL\r\n   */\n  getAccountByHomeId(homeAccountId) {\n    return getAccountByHomeId(homeAccountId, this.logger, this.browserStorage);\n  }\n  /**\r\n   * Returns the signed in account matching localAccountId.\r\n   * (the account object is created at the time of successful login)\r\n   * or null when no matching account is found\r\n   * @param localAccountId\r\n   * @returns The account object stored in MSAL\r\n   */\n  getAccountByLocalId(localAccountId) {\n    return getAccountByLocalId(localAccountId, this.logger, this.browserStorage);\n  }\n  /**\r\n   * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n   * @param account\r\n   */\n  setActiveAccount(account) {\n    /*\r\n     * StandardController uses this to allow the developer to set the active account\r\n     * in the nested app auth scenario the active account is controlled by the app hosting the nested app\r\n     */\n    return setActiveAccount(account, this.browserStorage);\n  }\n  /**\r\n   * Gets the currently active account\r\n   */\n  getActiveAccount() {\n    return getActiveAccount(this.browserStorage);\n  }\n  // #endregion\n  handleRedirectPromise(hash // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    return Promise.resolve(null);\n  }\n  loginPopup(request // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    return this.acquireTokenInteractive(request || DEFAULT_REQUEST);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loginRedirect(request) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  logout(logoutRequest) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  logoutRedirect(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  logoutPopup(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  ssoSilent(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    return this.acquireTokenSilentInternal(request);\n  }\n  getTokenCache() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  /**\r\n   * Returns the logger instance\r\n   */\n  getLogger() {\n    return this.logger;\n  }\n  /**\r\n   * Replaces the default logger set in configurations with new Logger with new configurations\r\n   * @param logger Logger instance\r\n   */\n  setLogger(logger) {\n    this.logger = logger;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  initializeWrapperLibrary(sku, version) {\n    /*\r\n     * Standard controller uses this to set the sku and version of the wrapper library in the storage\r\n     * we do nothing here\r\n     */\n    return;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setNavigationClient(navigationClient) {\n    this.logger.warning(\"setNavigationClient is not supported in nested app auth\");\n  }\n  getConfiguration() {\n    return this.config;\n  }\n  isBrowserEnv() {\n    return this.operatingContext.isBrowserEnvironment();\n  }\n  getBrowserCrypto() {\n    return this.browserCrypto;\n  }\n  getPerformanceClient() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  getRedirectResponse() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async clearCache(logoutRequest) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  async hydrateCache(result, request) {\n    this.logger.verbose(\"hydrateCache called\");\n    const accountEntity = AccountEntity.createFromAccountInfo(result.account, result.cloudGraphHostName, result.msGraphHost);\n    this.browserStorage.setAccount(accountEntity);\n    return this.browserStorage.hydrateCache(result, request);\n  }\n}\nexport { NestedAppAuthController };","map":{"version":3,"names":["NestedAppAuthController","constructor","operatingContext","proxy","getBridgeProxy","undefined","bridgeProxy","Error","config","getConfig","logger","getLogger","performanceClient","telemetry","client","browserCrypto","isBrowserEnvironment","CryptoOps","DEFAULT_CRYPTO_IMPLEMENTATION","browserStorage","BrowserCacheManager","auth","clientId","cache","buildStaticAuthorityOptions","DEFAULT_BROWSER_CACHE_MANAGER","eventHandler","EventHandler","nestedAppAuthAdapter","NestedAppAuthAdapter","clientCapabilities","accountContext","getAccountContext","cachedAccount","getAccount","setActiveAccount","createController","controller","Promise","resolve","initialize","ensureValidRequest","request","correlationId","_objectSpread","createNewGuid","acquireTokenInteractive","validRequest","emitEvent","EventType","ACQUIRE_TOKEN_START","InteractionType","Popup","atPopupMeasurement","startMeasurement","PerformanceEvents","AcquireTokenPopup","add","nestedAppAuthRequest","naaRequest","toNaaTokenRequest","reqTimestamp","TimeUtils","nowSeconds","response","getTokenInteractive","result","fromNaaTokenResponse","hydrateCache","account","ACQUIRE_TOKEN_SUCCESS","accessTokenSize","accessToken","length","idTokenSize","idToken","end","success","requestId","e","error","fromBridgeError","ACQUIRE_TOKEN_FAILURE","acquireTokenSilentInternal","Silent","acquireTokenFromCache","ssoSilentMeasurement","SsoSilent","increment","visibilityChangeCount","getTokenSilent","atsMeasurement","AcquireTokenSilent","claims","verbose","cacheLookupPolicy","CacheLookupPolicy","Default","AccessToken","AccessTokenAndRefreshToken","acquireTokenFromCacheInternal","_result","_result2","_request$scopes","currentAccount","hubAccount","authRequest","authority","environment","scopes","OIDC_DEFAULT_SCOPES","tokenKeys","getTokenKeys","cachedAccessToken","getAccessToken","tenantId","wasClockTurnedBack","cachedAt","isTokenExpired","expiresOn","system","tokenRenewalOffsetSeconds","cachedIdToken","getIdToken","toAuthenticationResultFromCache","acquireTokenPopup","acquireTokenRedirect","NestedAppAuthError","createUnsupportedError","acquireTokenSilent","silentRequest","acquireTokenByCode","acquireTokenNative","apiId","accountId","acquireTokenByRefreshToken","commonRequest","addEventCallback","callback","eventTypes","removeEventCallback","callbackId","addPerformanceCallback","removePerformanceCallback","enableAccountStorageEvents","disableAccountStorageEvents","getAllAccounts","accountFilter","isBrowserEnv","getAccountByUsername","username","getAccountByHomeId","homeAccountId","getAccountByLocalId","localAccountId","getActiveAccount","handleRedirectPromise","hash","loginPopup","DEFAULT_REQUEST","loginRedirect","logout","logoutRequest","logoutRedirect","logoutPopup","ssoSilent","getTokenCache","setLogger","initializeWrapperLibrary","sku","version","setNavigationClient","navigationClient","warning","getConfiguration","getBrowserCrypto","getPerformanceClient","getRedirectResponse","clearCache","accountEntity","AccountEntity","createFromAccountInfo","cloudGraphHostName","msGraphHost","setAccount"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-browser\\src\\controllers\\NestedAppAuthController.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationUrlRequest,\n    CommonSilentFlowRequest,\n    PerformanceCallbackFunction,\n    AccountInfo,\n    Logger,\n    ICrypto,\n    IPerformanceClient,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    PerformanceEvents,\n    TimeUtils,\n    buildStaticAuthorityOptions,\n    AccountEntity,\n    OIDC_DEFAULT_SCOPES,\n    BaseAuthRequest,\n    AccountFilter,\n} from \"@azure/msal-common/browser\";\nimport { ITokenCache } from \"../cache/ITokenCache.js\";\nimport { BrowserConfiguration } from \"../config/Configuration.js\";\nimport { INavigationClient } from \"../navigation/INavigationClient.js\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest.js\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest.js\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest.js\";\nimport { PopupRequest } from \"../request/PopupRequest.js\";\nimport { RedirectRequest } from \"../request/RedirectRequest.js\";\nimport { SilentRequest } from \"../request/SilentRequest.js\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest.js\";\nimport {\n    ApiId,\n    WrapperSKU,\n    InteractionType,\n    DEFAULT_REQUEST,\n    CacheLookupPolicy,\n} from \"../utils/BrowserConstants.js\";\nimport { IController } from \"./IController.js\";\nimport { NestedAppOperatingContext } from \"../operatingcontext/NestedAppOperatingContext.js\";\nimport { IBridgeProxy } from \"../naa/IBridgeProxy.js\";\nimport { CryptoOps } from \"../crypto/CryptoOps.js\";\nimport { NestedAppAuthAdapter } from \"../naa/mapping/NestedAppAuthAdapter.js\";\nimport { NestedAppAuthError } from \"../error/NestedAppAuthError.js\";\nimport { EventHandler } from \"../event/EventHandler.js\";\nimport { EventType } from \"../event/EventType.js\";\nimport { EventCallbackFunction, EventError } from \"../event/EventMessage.js\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\nimport {\n    BrowserCacheManager,\n    DEFAULT_BROWSER_CACHE_MANAGER,\n} from \"../cache/BrowserCacheManager.js\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest.js\";\nimport * as AccountManager from \"../cache/AccountManager.js\";\n\nexport class NestedAppAuthController implements IController {\n    // OperatingContext\n    protected readonly operatingContext: NestedAppOperatingContext;\n\n    // BridgeProxy\n    protected readonly bridgeProxy: IBridgeProxy;\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Input configuration by developer/user\n    protected readonly config: BrowserConfiguration;\n\n    // Storage interface implementation\n    protected readonly browserStorage!: BrowserCacheManager;\n\n    // Logger\n    protected logger: Logger;\n\n    // Performance telemetry client\n    protected readonly performanceClient: IPerformanceClient;\n\n    // EventHandler\n    protected readonly eventHandler: EventHandler;\n\n    // NestedAppAuthAdapter\n    protected readonly nestedAppAuthAdapter: NestedAppAuthAdapter;\n\n    constructor(operatingContext: NestedAppOperatingContext) {\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        } else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment()\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        // Initialize the browser storage class.\n        this.browserStorage = this.operatingContext.isBrowserEnvironment()\n            ? new BrowserCacheManager(\n                  this.config.auth.clientId,\n                  this.config.cache,\n                  this.browserCrypto,\n                  this.logger,\n                  buildStaticAuthorityOptions(this.config.auth)\n              )\n            : DEFAULT_BROWSER_CACHE_MANAGER(\n                  this.config.auth.clientId,\n                  this.logger\n              );\n\n        this.eventHandler = new EventHandler(this.logger);\n\n        this.nestedAppAuthAdapter = new NestedAppAuthAdapter(\n            this.config.auth.clientId,\n            this.config.auth.clientCapabilities,\n            this.browserCrypto,\n            this.logger\n        );\n\n        // Set the active account if available\n        const accountContext = this.bridgeProxy.getAccountContext();\n        if (accountContext) {\n            const cachedAccount = AccountManager.getAccount(\n                accountContext,\n                this.logger,\n                this.browserStorage\n            );\n\n            AccountManager.setActiveAccount(cachedAccount, this.browserStorage);\n        }\n    }\n\n    /**\n     * Factory function to create a new instance of NestedAppAuthController\n     * @param operatingContext\n     * @returns Promise<IController>\n     */\n    static async createController(\n        operatingContext: NestedAppOperatingContext\n    ): Promise<IController> {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n\n    /**\n     * Specific implementation of initialize function for NestedAppAuthController\n     * @returns\n     */\n    initialize(): Promise<void> {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n\n    /**\n     * Validate the incoming request and add correlationId if not present\n     * @param request\n     * @returns\n     */\n    private ensureValidRequest<\n        T extends\n            | SsoSilentRequest\n            | SilentRequest\n            | PopupRequest\n            | RedirectRequest\n    >(request: T): T {\n        if (request?.correlationId) {\n            return request;\n        }\n        return {\n            ...request,\n            correlationId: this.browserCrypto.createNewGuid(),\n        };\n    }\n\n    /**\n     * Internal implementation of acquireTokenInteractive flow\n     * @param request\n     * @returns\n     */\n    private async acquireTokenInteractive(\n        request: PopupRequest | RedirectRequest\n    ): Promise<AuthenticationResult> {\n        const validRequest = this.ensureValidRequest(request);\n\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Popup,\n            validRequest\n        );\n\n        const atPopupMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenPopup,\n            validRequest.correlationId\n        );\n\n        atPopupMeasurement?.add({ nestedAppAuthRequest: true });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenInteractive(\n                naaRequest\n            );\n            const result: AuthenticationResult = {\n                ...this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response,\n                    reqTimestamp\n                ),\n            };\n\n            // cache the tokens in the response\n            await this.hydrateCache(result, request);\n\n            this.browserStorage.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Popup,\n                result\n            );\n\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId,\n            });\n\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Popup,\n                null,\n                e as EventError\n            );\n\n            atPopupMeasurement.end(\n                {\n                    success: false,\n                },\n                e\n            );\n\n            throw error;\n        }\n    }\n\n    /**\n     * Internal implementation of acquireTokenSilent flow\n     * @param request\n     * @returns\n     */\n    private async acquireTokenSilentInternal(\n        request: SilentRequest\n    ): Promise<AuthenticationResult> {\n        const validRequest = this.ensureValidRequest(request);\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Silent,\n            validRequest\n        );\n\n        // Look for tokens in the cache first\n        const result = await this.acquireTokenFromCache(validRequest);\n        if (result) {\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Silent,\n                result\n            );\n            return result;\n        }\n\n        // proceed with acquiring tokens via the host\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.SsoSilent,\n            validRequest.correlationId\n        );\n\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response,\n                    reqTimestamp\n                );\n\n            // cache the tokens in the response\n            await this.hydrateCache(result, request);\n\n            this.browserStorage.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Silent,\n                result\n            );\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Silent,\n                null,\n                e as EventError\n            );\n            ssoSilentMeasurement?.end(\n                {\n                    success: false,\n                },\n                e\n            );\n            throw error;\n        }\n    }\n\n    /**\n     * acquires tokens from cache\n     * @param request\n     * @returns\n     */\n    private async acquireTokenFromCache(\n        request: SilentRequest\n    ): Promise<AuthenticationResult | null> {\n        const atsMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenSilent,\n            request.correlationId\n        );\n\n        atsMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n\n        // if the request has claims, we cannot look up in the cache\n        if (request.claims) {\n            this.logger.verbose(\n                \"Claims are present in the request, skipping cache lookup\"\n            );\n            return null;\n        }\n\n        // respect cache lookup policy\n        let result: AuthenticationResult | null = null;\n        switch (request.cacheLookupPolicy) {\n            case CacheLookupPolicy.Default:\n            case CacheLookupPolicy.AccessToken:\n            case CacheLookupPolicy.AccessTokenAndRefreshToken:\n                result = await this.acquireTokenFromCacheInternal(request);\n                break;\n            default:\n                return null;\n        }\n\n        if (result) {\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Silent,\n                result\n            );\n            atsMeasurement?.add({\n                accessTokenSize: result?.accessToken.length,\n                idTokenSize: result?.idToken.length,\n            });\n            atsMeasurement?.end({\n                success: true,\n            });\n            return result;\n        }\n\n        this.logger.error(\n            \"Cached tokens are not found for the account, proceeding with silent token request.\"\n        );\n\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_FAILURE,\n            InteractionType.Silent,\n            null\n        );\n        atsMeasurement?.end({\n            success: false,\n        });\n\n        return null;\n    }\n\n    /**\n     *\n     * @param request\n     * @returns\n     */\n    private async acquireTokenFromCacheInternal(\n        request: SilentRequest\n    ): Promise<AuthenticationResult | null> {\n        const accountContext = this.bridgeProxy.getAccountContext();\n        let currentAccount = null;\n        if (accountContext) {\n            const hubAccount = AccountManager.getAccount(\n                accountContext,\n                this.logger,\n                this.browserStorage\n            );\n            // always prioritize for hub account context, the reqirement of `request.account` will be removed soon\n            currentAccount = hubAccount || request.account;\n        }\n\n        // fall back to brokering if no cached account is found\n        if (!currentAccount) {\n            this.logger.verbose(\n                \"No active account found, falling back to the host\"\n            );\n            return Promise.resolve(null);\n        }\n\n        this.logger.verbose(\n            \"active account found, attempting to acquire token silently\"\n        );\n\n        const authRequest: BaseAuthRequest = {\n            ...request,\n            correlationId:\n                request.correlationId || this.browserCrypto.createNewGuid(),\n            authority: request.authority || currentAccount.environment,\n            scopes: request.scopes?.length\n                ? request.scopes\n                : [...OIDC_DEFAULT_SCOPES],\n        };\n\n        // fetch access token and check for expiry\n        const tokenKeys = this.browserStorage.getTokenKeys();\n        const cachedAccessToken = this.browserStorage.getAccessToken(\n            currentAccount,\n            authRequest,\n            tokenKeys,\n            currentAccount.tenantId,\n            this.performanceClient,\n            authRequest.correlationId\n        );\n\n        // If there is no access token, log it and return null\n        if (!cachedAccessToken) {\n            this.logger.verbose(\"No cached access token found\");\n            return Promise.resolve(null);\n        } else if (\n            TimeUtils.wasClockTurnedBack(cachedAccessToken.cachedAt) ||\n            TimeUtils.isTokenExpired(\n                cachedAccessToken.expiresOn,\n                this.config.system.tokenRenewalOffsetSeconds\n            )\n        ) {\n            this.logger.verbose(\"Cached access token has expired\");\n            return Promise.resolve(null);\n        }\n\n        const cachedIdToken = this.browserStorage.getIdToken(\n            currentAccount,\n            tokenKeys,\n            currentAccount.tenantId,\n            this.performanceClient,\n            authRequest.correlationId\n        );\n\n        if (!cachedIdToken) {\n            this.logger.verbose(\"No cached id token found\");\n            return Promise.resolve(null);\n        }\n\n        return this.nestedAppAuthAdapter.toAuthenticationResultFromCache(\n            currentAccount,\n            cachedIdToken,\n            cachedAccessToken,\n            authRequest,\n            authRequest.correlationId\n        );\n    }\n\n    /**\n     * acquireTokenPopup flow implementation\n     * @param request\n     * @returns\n     */\n    async acquireTokenPopup(\n        request: PopupRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenInteractive(request);\n    }\n\n    /**\n     * acquireTokenRedirect flow is not supported in nested app auth\n     * @param request\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * acquireTokenSilent flow implementation\n     * @param silentRequest\n     * @returns\n     */\n    async acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n\n    /**\n     * Hybrid flow is not currently supported in nested app auth\n     * @param request\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * acquireTokenNative flow is not currently supported in nested app auth\n     * @param request\n     * @param apiId\n     * @param accountId\n     */\n    acquireTokenNative(\n        request: // eslint-disable-line @typescript-eslint/no-unused-vars\n        | SilentRequest\n            | Partial<\n                  Omit<\n                      CommonAuthorizationUrlRequest,\n                      | \"requestedClaimsHash\"\n                      | \"responseMode\"\n                      | \"codeChallenge\"\n                      | \"codeChallengeMethod\"\n                      | \"nativeBroker\"\n                  >\n              >\n            | PopupRequest,\n        apiId: ApiId, // eslint-disable-line @typescript-eslint/no-unused-vars\n        accountId?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * acquireTokenByRefreshToken flow is not currently supported in nested app auth\n     * @param commonRequest\n     * @param silentRequest\n     */\n    acquireTokenByRefreshToken(\n        commonRequest: CommonSilentFlowRequest, // eslint-disable-line @typescript-eslint/no-unused-vars\n        silentRequest: SilentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     * @param eventTypes\n     */\n    addEventCallback(\n        callback: EventCallbackFunction,\n        eventTypes?: Array<EventType>\n    ): string | null {\n        return this.eventHandler.addEventCallback(callback, eventTypes);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId: string): boolean {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    enableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    disableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // #region Account APIs\n\n    /**\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\n     * @returns Array of AccountInfo objects in cache\n     */\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[] {\n        return AccountManager.getAllAccounts(\n            this.logger,\n            this.browserStorage,\n            this.isBrowserEnv(),\n            accountFilter\n        );\n    }\n\n    /**\n     * Returns the first account found in the cache that matches the account filter passed in.\n     * @param accountFilter\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\n     */\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        return AccountManager.getAccount(\n            accountFilter,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Returns the signed in account matching username.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found.\n     * This API is provided for convenience but getAccountById should be used for best reliability\n     * @param username\n     * @returns The account object stored in MSAL\n     */\n    getAccountByUsername(username: string): AccountInfo | null {\n        return AccountManager.getAccountByUsername(\n            username,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId\n     * @returns The account object stored in MSAL\n     */\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        return AccountManager.getAccountByHomeId(\n            homeAccountId,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId\n     * @returns The account object stored in MSAL\n     */\n    getAccountByLocalId(localAccountId: string): AccountInfo | null {\n        return AccountManager.getAccountByLocalId(\n            localAccountId,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        /*\n         * StandardController uses this to allow the developer to set the active account\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n         */\n        return AccountManager.setActiveAccount(account, this.browserStorage);\n    }\n\n    /**\n     * Gets the currently active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        return AccountManager.getActiveAccount(this.browserStorage);\n    }\n\n    // #endregion\n\n    handleRedirectPromise(\n        hash?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult | null> {\n        return Promise.resolve(null);\n    }\n    loginPopup(\n        request?: PopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenInteractive(request || DEFAULT_REQUEST);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest?: EndSessionRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(\n        logoutRequest?: EndSessionRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(\n        logoutRequest?: EndSessionPopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request: Partial<\n            Omit<\n                CommonAuthorizationUrlRequest,\n                | \"requestedClaimsHash\"\n                | \"responseMode\"\n                | \"codeChallenge\"\n                | \"codeChallengeMethod\"\n                | \"nativeBroker\"\n            >\n        >\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(request as SilentRequest);\n    }\n    getTokenCache(): ITokenCache {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    public getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        /*\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\n         * we do nothing here\n         */\n        return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.logger.warning(\n            \"setNavigationClient is not supported in nested app auth\"\n        );\n    }\n\n    getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n\n    isBrowserEnv(): boolean {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n\n    getBrowserCrypto(): ICrypto {\n        return this.browserCrypto;\n    }\n\n    getPerformanceClient(): IPerformanceClient {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    getRedirectResponse(): Map<string, Promise<AuthenticationResult | null>> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        this.logger.verbose(\"hydrateCache called\");\n\n        const accountEntity = AccountEntity.createFromAccountInfo(\n            result.account,\n            result.cloudGraphHostName,\n            result.msGraphHost\n        );\n        this.browserStorage.setAccount(accountEntity);\n        return this.browserStorage.hydrateCache(result, request);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}