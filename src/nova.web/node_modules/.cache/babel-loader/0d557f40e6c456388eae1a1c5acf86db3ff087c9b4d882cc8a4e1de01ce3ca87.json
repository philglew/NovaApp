{"ast":null,"code":"/*! @azure/msal-common v14.16.0 2024-11-05 */\n'use strict';\n\nimport { BaseClient } from './BaseClient.mjs';\nimport { wasClockTurnedBack, isTokenExpired } from '../utils/TimeUtils.mjs';\nimport { RefreshTokenClient } from './RefreshTokenClient.mjs';\nimport { ClientAuthError, createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { OIDC_DEFAULT_SCOPES, CacheOutcome } from '../utils/Constants.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { extractTokenClaims, checkMaxAge } from '../account/AuthToken.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { getTenantFromAuthorityString } from '../authority/Authority.mjs';\nimport { tokenRefreshRequired, noAccountInSilentRequest, authTimeNotFound } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/** @internal */\nclass SilentFlowClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n  }\n  /**\r\n   * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n   * the given token and returns the renewed token\r\n   * @param request\r\n   */\n  async acquireToken(request) {\n    try {\n      const [authResponse, cacheOutcome] = await this.acquireCachedToken({\n        ...request,\n        scopes: request.scopes?.length ? request.scopes : [...OIDC_DEFAULT_SCOPES]\n      });\n      // if the token is not expired but must be refreshed; get a new one in the background\n      if (cacheOutcome === CacheOutcome.PROACTIVELY_REFRESHED) {\n        this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\");\n        // refresh the access token in the background\n        const refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n        refreshTokenClient.acquireTokenByRefreshToken(request).catch(() => {\n          // do nothing, this is running in the background and no action is to be taken upon success or failure\n        });\n      }\n      // return the cached token\n      return authResponse;\n    } catch (e) {\n      if (e instanceof ClientAuthError && e.errorCode === tokenRefreshRequired) {\n        const refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n        return refreshTokenClient.acquireTokenByRefreshToken(request);\n      } else {\n        throw e;\n      }\n    }\n  }\n  /**\r\n   * Retrieves token from cache or throws an error if it must be refreshed.\r\n   * @param request\r\n   */\n  async acquireCachedToken(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientAcquireCachedToken, request.correlationId);\n    let lastCacheOutcome = CacheOutcome.NOT_APPLICABLE;\n    if (request.forceRefresh || !this.config.cacheOptions.claimsBasedCachingEnabled && !StringUtils.isEmptyObj(request.claims)) {\n      // Must refresh due to present force_refresh flag.\n      this.setCacheOutcome(CacheOutcome.FORCE_REFRESH_OR_CLAIMS, request.correlationId);\n      throw createClientAuthError(tokenRefreshRequired);\n    }\n    // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n    if (!request.account) {\n      throw createClientAuthError(noAccountInSilentRequest);\n    }\n    const requestTenantId = request.account.tenantId || getTenantFromAuthorityString(request.authority);\n    const tokenKeys = this.cacheManager.getTokenKeys();\n    const cachedAccessToken = this.cacheManager.getAccessToken(request.account, request, tokenKeys, requestTenantId, this.performanceClient, request.correlationId);\n    if (!cachedAccessToken) {\n      // must refresh due to non-existent access_token\n      this.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN, request.correlationId);\n      throw createClientAuthError(tokenRefreshRequired);\n    } else if (wasClockTurnedBack(cachedAccessToken.cachedAt) || isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n      // must refresh due to the expires_in value\n      this.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED, request.correlationId);\n      throw createClientAuthError(tokenRefreshRequired);\n    } else if (cachedAccessToken.refreshOn && isTokenExpired(cachedAccessToken.refreshOn, 0)) {\n      // must refresh (in the background) due to the refresh_in value\n      lastCacheOutcome = CacheOutcome.PROACTIVELY_REFRESHED;\n      // don't throw ClientAuthError.createRefreshRequiredError(), return cached token instead\n    }\n    const environment = request.authority || this.authority.getPreferredCache();\n    const cacheRecord = {\n      account: this.cacheManager.readAccountFromCache(request.account),\n      accessToken: cachedAccessToken,\n      idToken: this.cacheManager.getIdToken(request.account, tokenKeys, requestTenantId, this.performanceClient, request.correlationId),\n      refreshToken: null,\n      appMetadata: this.cacheManager.readAppMetadataFromCache(environment)\n    };\n    this.setCacheOutcome(lastCacheOutcome, request.correlationId);\n    if (this.config.serverTelemetryManager) {\n      this.config.serverTelemetryManager.incrementCacheHits();\n    }\n    return [await invokeAsync(this.generateResultFromCacheRecord.bind(this), PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, this.logger, this.performanceClient, request.correlationId)(cacheRecord, request), lastCacheOutcome];\n  }\n  setCacheOutcome(cacheOutcome, correlationId) {\n    this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);\n    this.performanceClient?.addFields({\n      cacheOutcome: cacheOutcome\n    }, correlationId);\n    if (cacheOutcome !== CacheOutcome.NOT_APPLICABLE) {\n      this.logger.info(`Token refresh is required due to cache outcome: ${cacheOutcome}`);\n    }\n  }\n  /**\r\n   * Helper function to build response object from the CacheRecord\r\n   * @param cacheRecord\r\n   */\n  async generateResultFromCacheRecord(cacheRecord, request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, request.correlationId);\n    let idTokenClaims;\n    if (cacheRecord.idToken) {\n      idTokenClaims = extractTokenClaims(cacheRecord.idToken.secret, this.config.cryptoInterface.base64Decode);\n    }\n    // token max_age check\n    if (request.maxAge || request.maxAge === 0) {\n      const authTime = idTokenClaims?.auth_time;\n      if (!authTime) {\n        throw createClientAuthError(authTimeNotFound);\n      }\n      checkMaxAge(authTime, request.maxAge);\n    }\n    return ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenClaims);\n  }\n}\nexport { SilentFlowClient };","map":{"version":3,"names":["SilentFlowClient","BaseClient","constructor","configuration","performanceClient","acquireToken","request","authResponse","cacheOutcome","acquireCachedToken","scopes","length","OIDC_DEFAULT_SCOPES","CacheOutcome","PROACTIVELY_REFRESHED","logger","info","refreshTokenClient","RefreshTokenClient","config","acquireTokenByRefreshToken","catch","e","ClientAuthError","errorCode","tokenRefreshRequired","addQueueMeasurement","PerformanceEvents","SilentFlowClientAcquireCachedToken","correlationId","lastCacheOutcome","NOT_APPLICABLE","forceRefresh","cacheOptions","claimsBasedCachingEnabled","StringUtils","isEmptyObj","claims","setCacheOutcome","FORCE_REFRESH_OR_CLAIMS","createClientAuthError","account","noAccountInSilentRequest","requestTenantId","tenantId","getTenantFromAuthorityString","authority","tokenKeys","cacheManager","getTokenKeys","cachedAccessToken","getAccessToken","NO_CACHED_ACCESS_TOKEN","wasClockTurnedBack","cachedAt","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","refreshOn","environment","getPreferredCache","cacheRecord","readAccountFromCache","accessToken","idToken","getIdToken","refreshToken","appMetadata","readAppMetadataFromCache","serverTelemetryManager","incrementCacheHits","invokeAsync","generateResultFromCacheRecord","bind","SilentFlowClientGenerateResultFromCacheRecord","addFields","idTokenClaims","extractTokenClaims","secret","cryptoInterface","base64Decode","maxAge","authTime","auth_time","authTimeNotFound","checkMaxAge","ResponseHandler","generateAuthenticationResult","cryptoUtils"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-common\\src\\client\\SilentFlowClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient.js\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration.js\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest.js\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\nimport * as TimeUtils from \"../utils/TimeUtils.js\";\nimport { RefreshTokenClient } from \"./RefreshTokenClient.js\";\nimport {\n    ClientAuthError,\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError.js\";\nimport { ResponseHandler } from \"../response/ResponseHandler.js\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord.js\";\nimport { CacheOutcome, OIDC_DEFAULT_SCOPES } from \"../utils/Constants.js\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient.js\";\nimport { StringUtils } from \"../utils/StringUtils.js\";\nimport { checkMaxAge, extractTokenClaims } from \"../account/AuthToken.js\";\nimport { TokenClaims } from \"../account/TokenClaims.js\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent.js\";\nimport { invokeAsync } from \"../utils/FunctionWrappers.js\";\nimport { getTenantFromAuthorityString } from \"../authority/Authority.js\";\n\n/** @internal */\nexport class SilentFlowClient extends BaseClient {\n    constructor(\n        configuration: ClientConfiguration,\n        performanceClient?: IPerformanceClient\n    ) {\n        super(configuration, performanceClient);\n    }\n\n    /**\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\n     * the given token and returns the renewed token\n     * @param request\n     */\n    async acquireToken(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        try {\n            const [authResponse, cacheOutcome] = await this.acquireCachedToken({\n                ...request,\n                scopes: request.scopes?.length\n                    ? request.scopes\n                    : [...OIDC_DEFAULT_SCOPES],\n            });\n\n            // if the token is not expired but must be refreshed; get a new one in the background\n            if (cacheOutcome === CacheOutcome.PROACTIVELY_REFRESHED) {\n                this.logger.info(\n                    \"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\"\n                );\n\n                // refresh the access token in the background\n                const refreshTokenClient = new RefreshTokenClient(\n                    this.config,\n                    this.performanceClient\n                );\n\n                refreshTokenClient\n                    .acquireTokenByRefreshToken(request)\n                    .catch(() => {\n                        // do nothing, this is running in the background and no action is to be taken upon success or failure\n                    });\n            }\n\n            // return the cached token\n            return authResponse;\n        } catch (e) {\n            if (\n                e instanceof ClientAuthError &&\n                e.errorCode === ClientAuthErrorCodes.tokenRefreshRequired\n            ) {\n                const refreshTokenClient = new RefreshTokenClient(\n                    this.config,\n                    this.performanceClient\n                );\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    /**\n     * Retrieves token from cache or throws an error if it must be refreshed.\n     * @param request\n     */\n    async acquireCachedToken(\n        request: CommonSilentFlowRequest\n    ): Promise<[AuthenticationResult, CacheOutcome]> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.SilentFlowClientAcquireCachedToken,\n            request.correlationId\n        );\n        let lastCacheOutcome: CacheOutcome = CacheOutcome.NOT_APPLICABLE;\n\n        if (\n            request.forceRefresh ||\n            (!this.config.cacheOptions.claimsBasedCachingEnabled &&\n                !StringUtils.isEmptyObj(request.claims))\n        ) {\n            // Must refresh due to present force_refresh flag.\n            this.setCacheOutcome(\n                CacheOutcome.FORCE_REFRESH_OR_CLAIMS,\n                request.correlationId\n            );\n            throw createClientAuthError(\n                ClientAuthErrorCodes.tokenRefreshRequired\n            );\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.noAccountInSilentRequest\n            );\n        }\n\n        const requestTenantId =\n            request.account.tenantId ||\n            getTenantFromAuthorityString(request.authority);\n        const tokenKeys = this.cacheManager.getTokenKeys();\n        const cachedAccessToken = this.cacheManager.getAccessToken(\n            request.account,\n            request,\n            tokenKeys,\n            requestTenantId,\n            this.performanceClient,\n            request.correlationId\n        );\n\n        if (!cachedAccessToken) {\n            // must refresh due to non-existent access_token\n            this.setCacheOutcome(\n                CacheOutcome.NO_CACHED_ACCESS_TOKEN,\n                request.correlationId\n            );\n            throw createClientAuthError(\n                ClientAuthErrorCodes.tokenRefreshRequired\n            );\n        } else if (\n            TimeUtils.wasClockTurnedBack(cachedAccessToken.cachedAt) ||\n            TimeUtils.isTokenExpired(\n                cachedAccessToken.expiresOn,\n                this.config.systemOptions.tokenRenewalOffsetSeconds\n            )\n        ) {\n            // must refresh due to the expires_in value\n            this.setCacheOutcome(\n                CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED,\n                request.correlationId\n            );\n            throw createClientAuthError(\n                ClientAuthErrorCodes.tokenRefreshRequired\n            );\n        } else if (\n            cachedAccessToken.refreshOn &&\n            TimeUtils.isTokenExpired(cachedAccessToken.refreshOn, 0)\n        ) {\n            // must refresh (in the background) due to the refresh_in value\n            lastCacheOutcome = CacheOutcome.PROACTIVELY_REFRESHED;\n\n            // don't throw ClientAuthError.createRefreshRequiredError(), return cached token instead\n        }\n\n        const environment =\n            request.authority || this.authority.getPreferredCache();\n        const cacheRecord: CacheRecord = {\n            account: this.cacheManager.readAccountFromCache(request.account),\n            accessToken: cachedAccessToken,\n            idToken: this.cacheManager.getIdToken(\n                request.account,\n                tokenKeys,\n                requestTenantId,\n                this.performanceClient,\n                request.correlationId\n            ),\n            refreshToken: null,\n            appMetadata:\n                this.cacheManager.readAppMetadataFromCache(environment),\n        };\n\n        this.setCacheOutcome(lastCacheOutcome, request.correlationId);\n\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n\n        return [\n            await invokeAsync(\n                this.generateResultFromCacheRecord.bind(this),\n                PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(cacheRecord, request),\n            lastCacheOutcome,\n        ];\n    }\n\n    private setCacheOutcome(\n        cacheOutcome: CacheOutcome,\n        correlationId: string\n    ): void {\n        this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);\n        this.performanceClient?.addFields(\n            {\n                cacheOutcome: cacheOutcome,\n            },\n            correlationId\n        );\n        if (cacheOutcome !== CacheOutcome.NOT_APPLICABLE) {\n            this.logger.info(\n                `Token refresh is required due to cache outcome: ${cacheOutcome}`\n            );\n        }\n    }\n\n    /**\n     * Helper function to build response object from the CacheRecord\n     * @param cacheRecord\n     */\n    private async generateResultFromCacheRecord(\n        cacheRecord: CacheRecord,\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\n            request.correlationId\n        );\n        let idTokenClaims: TokenClaims | undefined;\n        if (cacheRecord.idToken) {\n            idTokenClaims = extractTokenClaims(\n                cacheRecord.idToken.secret,\n                this.config.cryptoInterface.base64Decode\n            );\n        }\n\n        // token max_age check\n        if (request.maxAge || request.maxAge === 0) {\n            const authTime = idTokenClaims?.auth_time;\n            if (!authTime) {\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.authTimeNotFound\n                );\n            }\n\n            checkMaxAge(authTime, request.maxAge);\n        }\n\n        return ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            cacheRecord,\n            true,\n            request,\n            idTokenClaims\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}