{"ast":null,"code":"/*! @azure/msal-browser v3.28.0 2024-12-12 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass BrowserPerformanceMeasurement {\n  constructor(name, correlationId) {\n    this.correlationId = correlationId;\n    this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);\n    this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);\n    this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);\n  }\n  static makeMeasureName(name, correlationId) {\n    return \"msal.measure.\".concat(name, \".\").concat(correlationId);\n  }\n  static makeStartMark(name, correlationId) {\n    return \"msal.start.\".concat(name, \".\").concat(correlationId);\n  }\n  static makeEndMark(name, correlationId) {\n    return \"msal.end.\".concat(name, \".\").concat(correlationId);\n  }\n  static supportsBrowserPerformance() {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.mark === \"function\" && typeof window.performance.measure === \"function\" && typeof window.performance.clearMarks === \"function\" && typeof window.performance.clearMeasures === \"function\" && typeof window.performance.getEntriesByName === \"function\";\n  }\n  /**\r\n   * Flush browser marks and measurements.\r\n   * @param {string} correlationId\r\n   * @param {SubMeasurement} measurements\r\n   */\n  static flushMeasurements(correlationId, measurements) {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        measurements.forEach(measurement => {\n          const measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);\n          const entriesForMeasurement = window.performance.getEntriesByName(measureName, \"measure\");\n          if (entriesForMeasurement.length > 0) {\n            window.performance.clearMeasures(measureName);\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));\n          }\n        });\n      } catch (e) {\n        // Silently catch and return null\n      }\n    }\n  }\n  startMeasurement() {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.startMark);\n      } catch (e) {\n        // Silently catch\n      }\n    }\n  }\n  endMeasurement() {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.endMark);\n        window.performance.measure(this.measureName, this.startMark, this.endMark);\n      } catch (e) {\n        // Silently catch\n      }\n    }\n  }\n  flushMeasurement() {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        const entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\n        if (entriesForMeasurement.length > 0) {\n          const durationMs = entriesForMeasurement[0].duration;\n          window.performance.clearMeasures(this.measureName);\n          window.performance.clearMarks(this.startMark);\n          window.performance.clearMarks(this.endMark);\n          return durationMs;\n        }\n      } catch (e) {\n        // Silently catch and return null\n      }\n    }\n    return null;\n  }\n}\nexport { BrowserPerformanceMeasurement };","map":{"version":3,"names":["BrowserPerformanceMeasurement","constructor","name","correlationId","measureName","makeMeasureName","startMark","makeStartMark","endMark","makeEndMark","concat","supportsBrowserPerformance","window","performance","mark","measure","clearMarks","clearMeasures","getEntriesByName","flushMeasurements","measurements","forEach","measurement","entriesForMeasurement","length","e","startMeasurement","endMeasurement","flushMeasurement","durationMs","duration"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-browser\\src\\telemetry\\BrowserPerformanceMeasurement.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IPerformanceMeasurement,\n    SubMeasurement,\n} from \"@azure/msal-common/browser\";\n\nexport class BrowserPerformanceMeasurement implements IPerformanceMeasurement {\n    private readonly measureName: string;\n    private readonly correlationId: string;\n    private readonly startMark: string;\n    private readonly endMark: string;\n\n    constructor(name: string, correlationId: string) {\n        this.correlationId = correlationId;\n        this.measureName = BrowserPerformanceMeasurement.makeMeasureName(\n            name,\n            correlationId\n        );\n        this.startMark = BrowserPerformanceMeasurement.makeStartMark(\n            name,\n            correlationId\n        );\n        this.endMark = BrowserPerformanceMeasurement.makeEndMark(\n            name,\n            correlationId\n        );\n    }\n\n    private static makeMeasureName(name: string, correlationId: string) {\n        return `msal.measure.${name}.${correlationId}`;\n    }\n\n    private static makeStartMark(name: string, correlationId: string) {\n        return `msal.start.${name}.${correlationId}`;\n    }\n\n    private static makeEndMark(name: string, correlationId: string) {\n        return `msal.end.${name}.${correlationId}`;\n    }\n\n    static supportsBrowserPerformance(): boolean {\n        return (\n            typeof window !== \"undefined\" &&\n            typeof window.performance !== \"undefined\" &&\n            typeof window.performance.mark === \"function\" &&\n            typeof window.performance.measure === \"function\" &&\n            typeof window.performance.clearMarks === \"function\" &&\n            typeof window.performance.clearMeasures === \"function\" &&\n            typeof window.performance.getEntriesByName === \"function\"\n        );\n    }\n\n    /**\n     * Flush browser marks and measurements.\n     * @param {string} correlationId\n     * @param {SubMeasurement} measurements\n     */\n    public static flushMeasurements(\n        correlationId: string,\n        measurements: SubMeasurement[]\n    ): void {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                measurements.forEach((measurement) => {\n                    const measureName =\n                        BrowserPerformanceMeasurement.makeMeasureName(\n                            measurement.name,\n                            correlationId\n                        );\n                    const entriesForMeasurement =\n                        window.performance.getEntriesByName(\n                            measureName,\n                            \"measure\"\n                        );\n                    if (entriesForMeasurement.length > 0) {\n                        window.performance.clearMeasures(measureName);\n                        window.performance.clearMarks(\n                            BrowserPerformanceMeasurement.makeStartMark(\n                                measureName,\n                                correlationId\n                            )\n                        );\n                        window.performance.clearMarks(\n                            BrowserPerformanceMeasurement.makeEndMark(\n                                measureName,\n                                correlationId\n                            )\n                        );\n                    }\n                });\n            } catch (e) {\n                // Silently catch and return null\n            }\n        }\n    }\n\n    startMeasurement(): void {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                window.performance.mark(this.startMark);\n            } catch (e) {\n                // Silently catch\n            }\n        }\n    }\n\n    endMeasurement(): void {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                window.performance.mark(this.endMark);\n                window.performance.measure(\n                    this.measureName,\n                    this.startMark,\n                    this.endMark\n                );\n            } catch (e) {\n                // Silently catch\n            }\n        }\n    }\n\n    flushMeasurement(): number | null {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                const entriesForMeasurement =\n                    window.performance.getEntriesByName(\n                        this.measureName,\n                        \"measure\"\n                    );\n                if (entriesForMeasurement.length > 0) {\n                    const durationMs = entriesForMeasurement[0].duration;\n                    window.performance.clearMeasures(this.measureName);\n                    window.performance.clearMarks(this.startMark);\n                    window.performance.clearMarks(this.endMark);\n                    return durationMs;\n                }\n            } catch (e) {\n                // Silently catch and return null\n            }\n        }\n        return null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}