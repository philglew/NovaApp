{"ast":null,"code":"var _jsxFileName = \"C:\\\\temp\\\\NovaApp\\\\src\\\\nova.web\\\\src\\\\pages\\\\Employees.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport TreeItem from '../components/employees/TreeItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Mock data - replace with API call\nconst mockEmployees = [{\n  id: '1',\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john.doe@example.com',\n  position: 'CEO',\n  department: 'Executive',\n  managerId: null\n}, {\n  id: '2',\n  firstName: 'Jane',\n  lastName: 'Smith',\n  email: 'jane.smith@example.com',\n  position: 'CTO',\n  department: 'Engineering',\n  managerId: '1'\n}, {\n  id: '3',\n  firstName: 'Bob',\n  lastName: 'Johnson',\n  email: 'bob.johnson@example.com',\n  position: 'Engineering Manager',\n  department: 'Engineering',\n  managerId: '2'\n}\n// Add more employees as needed\n];\nconst buildTree = (employees, managerId = null) => {\n  return employees.filter(emp => emp.managerId === managerId).map(emp => ({\n    id: emp.id,\n    children: buildTree(employees, emp.id),\n    data: emp,\n    collapsed: false\n  }));\n};\nconst flattenTree = items => {\n  return items.reduce((flat, item) => {\n    if (item.collapsed) {\n      return [...flat, item];\n    }\n    return [...flat, item, ...flattenTree(item.children)];\n  }, []);\n};\nconst Employees = () => {\n  _s();\n  const [items, setItems] = useState(buildTree(mockEmployees));\n  const [searchQuery, setSearchQuery] = useState('');\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor));\n  const flattenedItems = flattenTree(items);\n  const filteredItems = searchQuery ? flattenedItems.filter(item => `${item.data.firstName} ${item.data.lastName} ${item.data.position}`.toLowerCase().includes(searchQuery.toLowerCase())) : flattenedItems;\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!over || active.id === over.id) {\n      return;\n    }\n    const activeItem = flattenedItems.find(item => item.id === active.id);\n    const overItem = flattenedItems.find(item => item.id === over.id);\n    if (!activeItem || !overItem) {\n      return;\n    }\n\n    // Collect all employees from the tree structure\n    const getAllEmployees = items => {\n      return items.reduce((acc, item) => {\n        return [...acc, item.data, ...getAllEmployees(item.children)];\n      }, []);\n    };\n\n    // Update the managerId in your data structure\n    const allEmployees = getAllEmployees(items);\n    const updatedEmployees = allEmployees.map(emp => {\n      if (emp.id === activeItem.data.id) {\n        return {\n          ...emp,\n          managerId: overItem.data.id\n        };\n      }\n      return emp;\n    });\n    setItems(buildTree(updatedEmployees));\n  };\n  const handleCollapse = itemId => {\n    const updateCollapsed = items => {\n      return items.map(item => {\n        if (item.id === itemId) {\n          return {\n            ...item,\n            collapsed: !item.collapsed\n          };\n        }\n        return {\n          ...item,\n          children: updateCollapsed(item.children)\n        };\n      });\n    };\n    setItems(updateCollapsed(items));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-semibold text-gray-900\",\n        children: \"Employee Hierarchy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search employees...\",\n            className: \"w-64 px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500\",\n            value: searchQuery,\n            onChange: e => setSearchQuery(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"absolute right-3 top-2.5 h-5 w-5 text-gray-400\",\n            fill: \"none\",\n            stroke: \"currentColor\",\n            viewBox: \"0 0 24 24\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: 2,\n              d: \"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\",\n          children: \"Add Employee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow rounded-lg p-6\",\n      children: /*#__PURE__*/_jsxDEV(DndContext, {\n        sensors: sensors,\n        collisionDetection: closestCenter,\n        onDragEnd: handleDragEnd,\n        children: /*#__PURE__*/_jsxDEV(SortableContext, {\n          items: filteredItems.map(item => item.id),\n          strategy: verticalListSortingStrategy,\n          children: filteredItems.map(item => /*#__PURE__*/_jsxDEV(TreeItem, {\n            item: item,\n            depth: 0,\n            onCollapse: handleCollapse\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(Employees, \"xBP1VP1WUMX9Ajzd1HoabL87aek=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = Employees;\nexport default Employees;\nvar _c;\n$RefreshReg$(_c, \"Employees\");","map":{"version":3,"names":["React","useState","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","SortableContext","verticalListSortingStrategy","TreeItem","jsxDEV","_jsxDEV","mockEmployees","id","firstName","lastName","email","position","department","managerId","buildTree","employees","filter","emp","map","children","data","collapsed","flattenTree","items","reduce","flat","item","Employees","_s","setItems","searchQuery","setSearchQuery","sensors","flattenedItems","filteredItems","toLowerCase","includes","handleDragEnd","event","active","over","activeItem","find","overItem","getAllEmployees","acc","allEmployees","updatedEmployees","handleCollapse","itemId","updateCollapsed","className","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","collisionDetection","onDragEnd","strategy","depth","onCollapse","_c","$RefreshReg$"],"sources":["C:/temp/NovaApp/src/nova.web/src/pages/Employees.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragEndEvent,\r\n} from '@dnd-kit/core';\r\nimport {\r\n  SortableContext,\r\n  verticalListSortingStrategy,\r\n} from '@dnd-kit/sortable';\r\nimport { arrayMove } from '@dnd-kit/sortable';\r\nimport TreeItem from '../components/employees/TreeItem';\r\nimport { Employee, TreeItem as TreeItemType } from '../types/Employee';\r\n\r\n// Mock data - replace with API call\r\nconst mockEmployees: Employee[] = [\r\n  {\r\n    id: '1',\r\n    firstName: 'John',\r\n    lastName: 'Doe',\r\n    email: 'john.doe@example.com',\r\n    position: 'CEO',\r\n    department: 'Executive',\r\n    managerId: null,\r\n  },\r\n  {\r\n    id: '2',\r\n    firstName: 'Jane',\r\n    lastName: 'Smith',\r\n    email: 'jane.smith@example.com',\r\n    position: 'CTO',\r\n    department: 'Engineering',\r\n    managerId: '1',\r\n  },\r\n  {\r\n    id: '3',\r\n    firstName: 'Bob',\r\n    lastName: 'Johnson',\r\n    email: 'bob.johnson@example.com',\r\n    position: 'Engineering Manager',\r\n    department: 'Engineering',\r\n    managerId: '2',\r\n  },\r\n  // Add more employees as needed\r\n];\r\n\r\nconst buildTree = (\r\n  employees: Employee[],\r\n  managerId: string | null = null\r\n): TreeItemType[] => {\r\n  return employees\r\n    .filter(emp => emp.managerId === managerId)\r\n    .map(emp => ({\r\n      id: emp.id,\r\n      children: buildTree(employees, emp.id),\r\n      data: emp,\r\n      collapsed: false,\r\n    }));\r\n};\r\n\r\nconst flattenTree = (items: TreeItemType[]): TreeItemType[] => {\r\n  return items.reduce<TreeItemType[]>((flat, item) => {\r\n    if (item.collapsed) {\r\n      return [...flat, item];\r\n    }\r\n    return [...flat, item, ...flattenTree(item.children)];\r\n  }, []);\r\n};\r\n\r\nconst Employees: React.FC = () => {\r\n  const [items, setItems] = useState<TreeItemType[]>(buildTree(mockEmployees));\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor)\r\n  );\r\n\r\n  const flattenedItems = flattenTree(items);\r\n  const filteredItems = searchQuery\r\n    ? flattenedItems.filter(item => \r\n        `${item.data.firstName} ${item.data.lastName} ${item.data.position}`\r\n          .toLowerCase()\r\n          .includes(searchQuery.toLowerCase())\r\n      )\r\n    : flattenedItems;\r\n\r\n    const handleDragEnd = (event: DragEndEvent) => {\r\n      const { active, over } = event;\r\n  \r\n      if (!over || active.id === over.id) {\r\n        return;\r\n      }\r\n  \r\n      const activeItem = flattenedItems.find(item => item.id === active.id);\r\n      const overItem = flattenedItems.find(item => item.id === over.id);\r\n  \r\n      if (!activeItem || !overItem) {\r\n        return;\r\n      }\r\n  \r\n      // Collect all employees from the tree structure\r\n      const getAllEmployees = (items: TreeItemType[]): Employee[] => {\r\n        return items.reduce<Employee[]>((acc, item) => {\r\n          return [...acc, item.data, ...getAllEmployees(item.children)];\r\n        }, []);\r\n      };\r\n  \r\n      // Update the managerId in your data structure\r\n      const allEmployees = getAllEmployees(items);\r\n      const updatedEmployees = allEmployees.map(emp => {\r\n        if (emp.id === activeItem.data.id) {\r\n          return { ...emp, managerId: overItem.data.id };\r\n        }\r\n        return emp;\r\n      });\r\n  \r\n      setItems(buildTree(updatedEmployees));\r\n  };\r\n\r\n  const handleCollapse = (itemId: string) => {\r\n    const updateCollapsed = (items: TreeItemType[]): TreeItemType[] => {\r\n      return items.map(item => {\r\n        if (item.id === itemId) {\r\n          return { ...item, collapsed: !item.collapsed };\r\n        }\r\n        return {\r\n          ...item,\r\n          children: updateCollapsed(item.children),\r\n        };\r\n      });\r\n    };\r\n\r\n    setItems(updateCollapsed(items));\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-2xl font-semibold text-gray-900\">Employee Hierarchy</h1>\r\n        <div className=\"flex space-x-4\">\r\n          <div className=\"relative\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search employees...\"\r\n              className=\"w-64 px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n            />\r\n            <svg\r\n              className=\"absolute right-3 top-2.5 h-5 w-5 text-gray-400\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\">\r\n            Add Employee\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"bg-white shadow rounded-lg p-6\">\r\n        <DndContext\r\n          sensors={sensors}\r\n          collisionDetection={closestCenter}\r\n          onDragEnd={handleDragEnd}\r\n        >\r\n          <SortableContext\r\n            items={filteredItems.map(item => item.id)}\r\n            strategy={verticalListSortingStrategy}\r\n          >\r\n            {filteredItems.map((item) => (\r\n              <TreeItem\r\n                key={item.id}\r\n                item={item}\r\n                depth={0}\r\n                onCollapse={handleCollapse}\r\n              />\r\n            ))}\r\n          </SortableContext>\r\n        </DndContext>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Employees;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}