{"ast":null,"code":"/*! @azure/msal-react v2.2.0 2024-11-05 */\n'use strict';\n\nimport _objectSpread from \"C:/temp/NovaApp/src/nova.web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React__default, { useEffect, useMemo, useReducer } from 'react';\nimport { WrapperSKU, InteractionStatus, EventMessageUtils } from '@azure/msal-browser';\nimport { MsalContext } from './MsalContext.js';\nimport { accountArraysAreEqual } from './utils/utilities.js';\nimport { version, name } from './packageMetadata.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst MsalProviderActionType = {\n  UNBLOCK_INPROGRESS: \"UNBLOCK_INPROGRESS\",\n  EVENT: \"EVENT\"\n};\n/**\r\n * Returns the next inProgress and accounts state based on event message\r\n * @param previousState\r\n * @param action\r\n */\nconst reducer = (previousState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  let newInProgress = previousState.inProgress;\n  switch (type) {\n    case MsalProviderActionType.UNBLOCK_INPROGRESS:\n      if (previousState.inProgress === InteractionStatus.Startup) {\n        newInProgress = InteractionStatus.None;\n        payload.logger.info(\"MsalProvider - handleRedirectPromise resolved, setting inProgress to 'none'\");\n      }\n      break;\n    case MsalProviderActionType.EVENT:\n      const message = payload.message;\n      const status = EventMessageUtils.getInteractionStatusFromEvent(message, previousState.inProgress);\n      if (status) {\n        payload.logger.info(\"MsalProvider - \".concat(message.eventType, \" results in setting inProgress from \").concat(previousState.inProgress, \" to \").concat(status));\n        newInProgress = status;\n      }\n      break;\n    default:\n      throw new Error(\"Unknown action type: \".concat(type));\n  }\n  const currentAccounts = payload.instance.getAllAccounts();\n  if (newInProgress !== previousState.inProgress && !accountArraysAreEqual(currentAccounts, previousState.accounts)) {\n    // Both inProgress and accounts changed\n    return _objectSpread(_objectSpread({}, previousState), {}, {\n      inProgress: newInProgress,\n      accounts: currentAccounts\n    });\n  } else if (newInProgress !== previousState.inProgress) {\n    // Only only inProgress changed\n    return _objectSpread(_objectSpread({}, previousState), {}, {\n      inProgress: newInProgress\n    });\n  } else if (!accountArraysAreEqual(currentAccounts, previousState.accounts)) {\n    // Only accounts changed\n    return _objectSpread(_objectSpread({}, previousState), {}, {\n      accounts: currentAccounts\n    });\n  } else {\n    // Nothing changed\n    return previousState;\n  }\n};\n/**\r\n * MSAL context provider component. This must be rendered above any other components that use MSAL.\r\n */\nfunction MsalProvider(_ref) {\n  let {\n    instance,\n    children\n  } = _ref;\n  useEffect(() => {\n    instance.initializeWrapperLibrary(WrapperSKU.React, version);\n  }, [instance]);\n  // Create a logger instance for msal-react with the same options as PublicClientApplication\n  const logger = useMemo(() => {\n    return instance.getLogger().clone(name, version);\n  }, [instance]);\n  const [state, updateState] = useReducer(reducer, undefined, () => {\n    // Lazy initialization of the initial state\n    return {\n      inProgress: InteractionStatus.Startup,\n      accounts: instance.getAllAccounts()\n    };\n  });\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      updateState({\n        payload: {\n          instance,\n          logger,\n          message\n        },\n        type: MsalProviderActionType.EVENT\n      });\n    });\n    logger.verbose(\"MsalProvider - Registered event callback with id: \".concat(callbackId));\n    instance.initialize().then(() => {\n      instance.handleRedirectPromise().catch(() => {\n        // Errors should be handled by listening to the LOGIN_FAILURE event\n        return;\n      }).finally(() => {\n        /*\r\n         * If handleRedirectPromise returns a cached promise the necessary events may not be fired\r\n         * This is a fallback to prevent inProgress from getting stuck in 'startup'\r\n         */\n        updateState({\n          payload: {\n            instance,\n            logger\n          },\n          type: MsalProviderActionType.UNBLOCK_INPROGRESS\n        });\n      });\n    }).catch(() => {\n      // Errors should be handled by listening to the LOGIN_FAILURE event\n      return;\n    });\n    return () => {\n      // Remove callback when component unmounts or accounts change\n      if (callbackId) {\n        logger.verbose(\"MsalProvider - Removing event callback \".concat(callbackId));\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  const contextValue = {\n    instance,\n    inProgress: state.inProgress,\n    accounts: state.accounts,\n    logger\n  };\n  return React__default.createElement(MsalContext.Provider, {\n    value: contextValue\n  }, children);\n}\nexport { MsalProvider };","map":{"version":3,"names":["MsalProviderActionType","UNBLOCK_INPROGRESS","EVENT","reducer","previousState","action","type","payload","newInProgress","inProgress","InteractionStatus","Startup","None","logger","info","message","status","EventMessageUtils","getInteractionStatusFromEvent","concat","eventType","Error","currentAccounts","instance","getAllAccounts","accountArraysAreEqual","accounts","_objectSpread","MsalProvider","_ref","children","useEffect","initializeWrapperLibrary","WrapperSKU","React","version","useMemo","getLogger","clone","name","state","updateState","useReducer","undefined","callbackId","addEventCallback","verbose","initialize","then","handleRedirectPromise","catch","finally","removeEventCallback","contextValue","React__default","createElement","MsalContext","Provider","value"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-react\\src\\MsalProvider.tsx"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, {\n    useEffect,\n    useReducer,\n    PropsWithChildren,\n    useMemo,\n} from \"react\";\nimport {\n    IPublicClientApplication,\n    EventMessage,\n    EventMessageUtils,\n    InteractionStatus,\n    Logger,\n    WrapperSKU,\n    AccountInfo,\n} from \"@azure/msal-browser\";\nimport { MsalContext, IMsalContext } from \"./MsalContext.js\";\nimport { accountArraysAreEqual } from \"./utils/utilities.js\";\nimport { name as SKU, version } from \"./packageMetadata.js\";\n\nexport type MsalProviderProps = PropsWithChildren<{\n    instance: IPublicClientApplication;\n}>;\n\ntype MsalState = {\n    inProgress: InteractionStatus;\n    accounts: AccountInfo[];\n};\n\nconst MsalProviderActionType = {\n    UNBLOCK_INPROGRESS: \"UNBLOCK_INPROGRESS\",\n    EVENT: \"EVENT\",\n} as const;\ntype MsalProviderActionType =\n    (typeof MsalProviderActionType)[keyof typeof MsalProviderActionType];\n\ntype MsalProviderReducerAction = {\n    type: MsalProviderActionType;\n    payload: {\n        logger: Logger;\n        instance: IPublicClientApplication;\n        message?: EventMessage;\n    };\n};\n\n/**\n * Returns the next inProgress and accounts state based on event message\n * @param previousState\n * @param action\n */\nconst reducer = (\n    previousState: MsalState,\n    action: MsalProviderReducerAction\n): MsalState => {\n    const { type, payload } = action;\n    let newInProgress = previousState.inProgress;\n\n    switch (type) {\n        case MsalProviderActionType.UNBLOCK_INPROGRESS:\n            if (previousState.inProgress === InteractionStatus.Startup) {\n                newInProgress = InteractionStatus.None;\n                payload.logger.info(\n                    \"MsalProvider - handleRedirectPromise resolved, setting inProgress to 'none'\"\n                );\n            }\n            break;\n        case MsalProviderActionType.EVENT:\n            const message = payload.message as EventMessage;\n            const status = EventMessageUtils.getInteractionStatusFromEvent(\n                message,\n                previousState.inProgress\n            );\n            if (status) {\n                payload.logger.info(\n                    `MsalProvider - ${message.eventType} results in setting inProgress from ${previousState.inProgress} to ${status}`\n                );\n                newInProgress = status;\n            }\n            break;\n        default:\n            throw new Error(`Unknown action type: ${type}`);\n    }\n\n    const currentAccounts = payload.instance.getAllAccounts();\n    if (\n        newInProgress !== previousState.inProgress &&\n        !accountArraysAreEqual(currentAccounts, previousState.accounts)\n    ) {\n        // Both inProgress and accounts changed\n        return {\n            ...previousState,\n            inProgress: newInProgress,\n            accounts: currentAccounts,\n        };\n    } else if (newInProgress !== previousState.inProgress) {\n        // Only only inProgress changed\n        return {\n            ...previousState,\n            inProgress: newInProgress,\n        };\n    } else if (\n        !accountArraysAreEqual(currentAccounts, previousState.accounts)\n    ) {\n        // Only accounts changed\n        return {\n            ...previousState,\n            accounts: currentAccounts,\n        };\n    } else {\n        // Nothing changed\n        return previousState;\n    }\n};\n\n/**\n * MSAL context provider component. This must be rendered above any other components that use MSAL.\n */\nexport function MsalProvider({\n    instance,\n    children,\n}: MsalProviderProps): React.ReactElement {\n    useEffect(() => {\n        instance.initializeWrapperLibrary(WrapperSKU.React, version);\n    }, [instance]);\n    // Create a logger instance for msal-react with the same options as PublicClientApplication\n    const logger = useMemo(() => {\n        return instance.getLogger().clone(SKU, version);\n    }, [instance]);\n\n    const [state, updateState] = useReducer(reducer, undefined, () => {\n        // Lazy initialization of the initial state\n        return {\n            inProgress: InteractionStatus.Startup,\n            accounts: instance.getAllAccounts(),\n        };\n    });\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback(\n            (message: EventMessage) => {\n                updateState({\n                    payload: {\n                        instance,\n                        logger,\n                        message,\n                    },\n                    type: MsalProviderActionType.EVENT,\n                });\n            }\n        );\n        logger.verbose(\n            `MsalProvider - Registered event callback with id: ${callbackId}`\n        );\n\n        instance\n            .initialize()\n            .then(() => {\n                instance\n                    .handleRedirectPromise()\n                    .catch(() => {\n                        // Errors should be handled by listening to the LOGIN_FAILURE event\n                        return;\n                    })\n                    .finally(() => {\n                        /*\n                         * If handleRedirectPromise returns a cached promise the necessary events may not be fired\n                         * This is a fallback to prevent inProgress from getting stuck in 'startup'\n                         */\n                        updateState({\n                            payload: {\n                                instance,\n                                logger,\n                            },\n                            type: MsalProviderActionType.UNBLOCK_INPROGRESS,\n                        });\n                    });\n            })\n            .catch(() => {\n                // Errors should be handled by listening to the LOGIN_FAILURE event\n                return;\n            });\n\n        return () => {\n            // Remove callback when component unmounts or accounts change\n            if (callbackId) {\n                logger.verbose(\n                    `MsalProvider - Removing event callback ${callbackId}`\n                );\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    const contextValue: IMsalContext = {\n        instance,\n        inProgress: state.inProgress,\n        accounts: state.accounts,\n        logger,\n    };\n\n    return (\n        <MsalContext.Provider value={contextValue}>\n            {children}\n        </MsalContext.Provider>\n    );\n}\n"],"mappings":";;;;;;;;;;AAAA;;;AAGG;AA8BH,MAAMA,sBAAsB,GAAG;EAC3BC,kBAAkB,EAAE,oBAAoB;EACxCC,KAAK,EAAE;CACD;AAaV;;;;AAIG;AACH,MAAMC,OAAO,GAAGA,CACZC,aAAwB,EACxBC,MAAiC,KACtB;EACX,MAAM;IAAEC,IAAI;IAAEC;EAAO,CAAE,GAAGF,MAAM;EAChC,IAAIG,aAAa,GAAGJ,aAAa,CAACK,UAAU;EAE5C,QAAQH,IAAI;IACR,KAAKN,sBAAsB,CAACC,kBAAkB;MAC1C,IAAIG,aAAa,CAACK,UAAU,KAAKC,iBAAiB,CAACC,OAAO,EAAE;QACxDH,aAAa,GAAGE,iBAAiB,CAACE,IAAI;QACtCL,OAAO,CAACM,MAAM,CAACC,IAAI,CACf,6EAA6E,CAChF;MACJ;MACD;IACJ,KAAKd,sBAAsB,CAACE,KAAK;MAC7B,MAAMa,OAAO,GAAGR,OAAO,CAACQ,OAAuB;MAC/C,MAAMC,MAAM,GAAGC,iBAAiB,CAACC,6BAA6B,CAC1DH,OAAO,EACPX,aAAa,CAACK,UAAU,CAC3B;MACD,IAAIO,MAAM,EAAE;QACRT,OAAO,CAACM,MAAM,CAACC,IAAI,mBAAAK,MAAA,CACGJ,OAAO,CAACK,SAAS,0CAAAD,MAAA,CAAuCf,aAAa,CAACK,UAAU,UAAAU,MAAA,CAAOH,MAAM,CAAE,CACpH;QACDR,aAAa,GAAGQ,MAAM;MACzB;MACD;IACJ;MACI,MAAM,IAAIK,KAAK,yBAAAF,MAAA,CAAyBb,IAAI,CAAE,CAAC;EACtD;EAED,MAAMgB,eAAe,GAAGf,OAAO,CAACgB,QAAQ,CAACC,cAAc,EAAE;EACzD,IACIhB,aAAa,KAAKJ,aAAa,CAACK,UAAU,IAC1C,CAACgB,qBAAqB,CAACH,eAAe,EAAElB,aAAa,CAACsB,QAAQ,CAAC,EACjE;;IAEE,OAAAC,aAAA,CAAAA,aAAA,KACOvB,aAAa;MAChBK,UAAU,EAAED,aAAa;MACzBkB,QAAQ,EAAEJ;IAAe;EAEhC,OAAM,IAAId,aAAa,KAAKJ,aAAa,CAACK,UAAU,EAAE;;IAEnD,OAAAkB,aAAA,CAAAA,aAAA,KACOvB,aAAa;MAChBK,UAAU,EAAED;IAAa;EAEhC,OAAM,IACH,CAACiB,qBAAqB,CAACH,eAAe,EAAElB,aAAa,CAACsB,QAAQ,CAAC,EACjE;;IAEE,OAAAC,aAAA,CAAAA,aAAA,KACOvB,aAAa;MAChBsB,QAAQ,EAAEJ;IAAe;EAEhC,OAAM;;IAEH,OAAOlB,aAAa;EACvB;AACL,CAAC;AAED;;AAEG;SACawB,YAAYA,CAAAC,IAAA,EAGR;EAAA,IAHS;IACzBN,QAAQ;IACRO;EAAQ,CACQ,GAAAD,IAAA;EAChBE,SAAS,CAAC,MAAK;IACXR,QAAQ,CAACS,wBAAwB,CAACC,UAAU,CAACC,KAAK,EAAEC,OAAO,CAAC;EAChE,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;;EAEd,MAAMV,MAAM,GAAGuB,OAAO,CAAC,MAAK;IACxB,OAAOb,QAAQ,CAACc,SAAS,EAAE,CAACC,KAAK,CAACC,IAAG,EAAEJ,OAAO,CAAC;EACnD,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAEd,MAAM,CAACiB,KAAK,EAAEC,WAAW,CAAC,GAAGC,UAAU,CAACvC,OAAO,EAAEwC,SAAS,EAAE,MAAK;;IAE7D,OAAO;MACHlC,UAAU,EAAEC,iBAAiB,CAACC,OAAO;MACrCe,QAAQ,EAAEH,QAAQ,CAACC,cAAc;KACpC;EACL,CAAC,CAAC;EAEFO,SAAS,CAAC,MAAK;IACX,MAAMa,UAAU,GAAGrB,QAAQ,CAACsB,gBAAgB,CACvC9B,OAAqB,IAAI;MACtB0B,WAAW,CAAC;QACRlC,OAAO,EAAE;UACLgB,QAAQ;UACRV,MAAM;UACNE;QACH;QACDT,IAAI,EAAEN,sBAAsB,CAACE;MAChC,EAAC;IACN,CAAC,CACJ;IACDW,MAAM,CAACiC,OAAO,sDAAA3B,MAAA,CAC2CyB,UAAU,CAAE,CACpE;IAEDrB,QAAQ,CACHwB,UAAU,EAAE,CACZC,IAAI,CAAC,MAAK;MACPzB,QAAQ,CACH0B,qBAAqB,EAAE,CACvBC,KAAK,CAAC,MAAK;;QAER;MACJ,CAAC,CAAC,CACDC,OAAO,CAAC,MAAK;QACV;;;AAGG;QACHV,WAAW,CAAC;UACRlC,OAAO,EAAE;YACLgB,QAAQ;YACRV;UACH;UACDP,IAAI,EAAEN,sBAAsB,CAACC;QAChC,EAAC;MACN,CAAC,CAAC;IACV,CAAC,CAAC,CACDiD,KAAK,CAAC,MAAK;;MAER;IACJ,CAAC,CAAC;IAEN,OAAO,MAAK;;MAER,IAAIN,UAAU,EAAE;QACZ/B,MAAM,CAACiC,OAAO,2CAAA3B,MAAA,CACgCyB,UAAU,CAAE,CACzD;QACDrB,QAAQ,CAAC6B,mBAAmB,CAACR,UAAU,CAAC;MAC3C;IACL,CAAC;EACL,CAAC,EAAE,CAACrB,QAAQ,EAAEV,MAAM,CAAC,CAAC;EAEtB,MAAMwC,YAAY,GAAiB;IAC/B9B,QAAQ;IACRd,UAAU,EAAE+B,KAAK,CAAC/B,UAAU;IAC5BiB,QAAQ,EAAEc,KAAK,CAACd,QAAQ;IACxBb;GACH;EAED,OACIyC,cAAA,CAAAC,aAAA,CAACC,WAAW,CAACC,QAAQ;IAACC,KAAK,EAAEL;EAAY,GACpCvB,QAAQ,CACU;AAE/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}