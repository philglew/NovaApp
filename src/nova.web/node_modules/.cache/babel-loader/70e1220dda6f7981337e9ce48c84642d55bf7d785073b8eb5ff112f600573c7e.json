{"ast":null,"code":"/*! @azure/msal-browser v3.28.0 2024-12-12 */\n'use strict';\n\nimport { CacheManager, CredentialType, CacheHelpers, AccountEntity, createClientAuthError, ClientAuthErrorCodes, Constants, PersistentCacheKeys, PerformanceEvents, StringUtils, ProtocolUtils, AuthToken, CacheError, DEFAULT_CRYPTO_IMPLEMENTATION, CcsCredentialType } from '@azure/msal-common/browser';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserCacheLocation, StaticCacheKeys, InMemoryCacheKeys, TemporaryCacheKeys } from '../utils/BrowserConstants.mjs';\nimport { LocalStorage } from './LocalStorage.mjs';\nimport { SessionStorage } from './SessionStorage.mjs';\nimport { MemoryStorage } from './MemoryStorage.mjs';\nimport { extractBrowserRequestState } from '../utils/BrowserProtocolUtils.mjs';\nimport { base64Decode } from '../encode/Base64Decode.mjs';\nimport { base64Encode } from '../encode/Base64Encode.mjs';\nimport { CookieStorage } from './CookieStorage.mjs';\nimport { noTokenRequestCacheError, unableToParseTokenRequestCacheError, noCachedAuthorityError, interactionInProgress } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */\nclass BrowserCacheManager extends CacheManager {\n  constructor(clientId, cacheConfig, cryptoImpl, logger, staticAuthorityOptions, performanceClient) {\n    super(clientId, cryptoImpl, logger, staticAuthorityOptions);\n    this.cacheConfig = cacheConfig;\n    this.logger = logger;\n    this.internalStorage = new MemoryStorage();\n    this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);\n    this.temporaryCacheStorage = this.setupBrowserStorage(this.cacheConfig.temporaryCacheLocation);\n    this.cookieStorage = new CookieStorage();\n    // Migrate cache entries from older versions of MSAL.\n    if (cacheConfig.cacheMigrationEnabled) {\n      this.migrateCacheEntries();\n      this.createKeyMaps();\n    }\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n   * @param cacheLocation\r\n   */\n  setupBrowserStorage(cacheLocation) {\n    try {\n      switch (cacheLocation) {\n        case BrowserCacheLocation.LocalStorage:\n          return new LocalStorage();\n        case BrowserCacheLocation.SessionStorage:\n          return new SessionStorage();\n        case BrowserCacheLocation.MemoryStorage:\n        default:\n          break;\n      }\n    } catch (e) {\n      this.logger.error(e);\n    }\n    this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n    return new MemoryStorage();\n  }\n  /**\r\n   * Migrate all old cache entries to new schema. No rollback supported.\r\n   * @param storeAuthStateInCookie\r\n   */\n  migrateCacheEntries() {\n    const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\n    const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\n    const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\n    const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\n    const idTokenValue = this.browserStorage.getItem(idTokenKey);\n    const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n    const errorValue = this.browserStorage.getItem(errorKey);\n    const errorDescValue = this.browserStorage.getItem(errorDescKey);\n    const values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n    const keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\n    keysToMigrate.forEach((cacheKey, index) => {\n      const value = values[index];\n      if (value) {\n        this.setTemporaryCache(cacheKey, value, true);\n      }\n    });\n  }\n  /**\r\n   * Searches all cache entries for MSAL accounts and creates the account key map\r\n   * This is used to migrate users from older versions of MSAL which did not create the map.\r\n   * @returns\r\n   */\n  createKeyMaps() {\n    this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n    const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n    const tokenKeys = this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\n    if (accountKeys && tokenKeys) {\n      this.logger.verbose(\"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\");\n      // Key maps already exist, no need to iterate through cache\n      return;\n    }\n    const allKeys = this.browserStorage.getKeys();\n    allKeys.forEach(key => {\n      if (this.isCredentialKey(key)) {\n        // Get item, parse, validate and write key to map\n        const value = this.getItem(key);\n        if (value) {\n          const credObj = this.validateAndParseJson(value);\n          if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n            switch (credObj[\"credentialType\"]) {\n              case CredentialType.ID_TOKEN:\n                if (CacheHelpers.isIdTokenEntity(credObj)) {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`);\n                  const idTokenEntity = credObj;\n                  const newKey = this.updateCredentialCacheKey(key, idTokenEntity);\n                  this.addTokenKey(newKey, CredentialType.ID_TOKEN);\n                  return;\n                } else {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`);\n                }\n                break;\n              case CredentialType.ACCESS_TOKEN:\n              case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                if (CacheHelpers.isAccessTokenEntity(credObj)) {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`);\n                  const accessTokenEntity = credObj;\n                  const newKey = this.updateCredentialCacheKey(key, accessTokenEntity);\n                  this.addTokenKey(newKey, CredentialType.ACCESS_TOKEN);\n                  return;\n                } else {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`);\n                }\n                break;\n              case CredentialType.REFRESH_TOKEN:\n                if (CacheHelpers.isRefreshTokenEntity(credObj)) {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`);\n                  const refreshTokenEntity = credObj;\n                  const newKey = this.updateCredentialCacheKey(key, refreshTokenEntity);\n                  this.addTokenKey(newKey, CredentialType.REFRESH_TOKEN);\n                  return;\n                } else {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`);\n                }\n                break;\n              // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\n            }\n          }\n        }\n      }\n      if (this.isAccountKey(key)) {\n        const value = this.getItem(key);\n        if (value) {\n          const accountObj = this.validateAndParseJson(value);\n          if (accountObj && AccountEntity.isAccountEntity(accountObj)) {\n            this.logger.trace(\"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\");\n            this.logger.tracePii(`BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`);\n            this.addAccountKeyToMap(key);\n          }\n        }\n      }\n    });\n  }\n  /**\r\n   * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n   * @param input\r\n   */\n  validateAndParseJson(jsonValue) {\n    try {\n      const parsedJson = JSON.parse(jsonValue);\n      /**\r\n       * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n       * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n       * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n       *\r\n       */\n      return parsedJson && typeof parsedJson === \"object\" ? parsedJson : null;\n    } catch (error) {\n      return null;\n    }\n  }\n  /**\r\n   * fetches the entry from the browser storage based off the key\r\n   * @param key\r\n   */\n  getItem(key) {\n    return this.browserStorage.getItem(key);\n  }\n  /**\r\n   * sets the entry in the browser storage\r\n   * @param key\r\n   * @param value\r\n   */\n  setItem(key, value) {\n    this.browserStorage.setItem(key, value);\n  }\n  /**\r\n   * fetch the account entity from the platform cache\r\n   * @param accountKey\r\n   */\n  getAccount(accountKey, logger) {\n    this.logger.trace(\"BrowserCacheManager.getAccount called\");\n    const accountEntity = this.getCachedAccountEntity(accountKey);\n    return this.updateOutdatedCachedAccount(accountKey, accountEntity, logger);\n  }\n  /**\r\n   * Reads account from cache, deserializes it into an account entity and returns it.\r\n   * If account is not found from the key, returns null and removes key from map.\r\n   * @param accountKey\r\n   * @returns\r\n   */\n  getCachedAccountEntity(accountKey) {\n    const serializedAccount = this.getItem(accountKey);\n    if (!serializedAccount) {\n      this.removeAccountKeyFromMap(accountKey);\n      return null;\n    }\n    const parsedAccount = this.validateAndParseJson(serializedAccount);\n    if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n      this.removeAccountKeyFromMap(accountKey);\n      return null;\n    }\n    return CacheManager.toObject(new AccountEntity(), parsedAccount);\n  }\n  /**\r\n   * set account entity in the platform cache\r\n   * @param account\r\n   */\n  setAccount(account) {\n    this.logger.trace(\"BrowserCacheManager.setAccount called\");\n    const key = account.generateAccountKey();\n    this.setItem(key, JSON.stringify(account));\n    this.addAccountKeyToMap(key);\n  }\n  /**\r\n   * Returns the array of account keys currently cached\r\n   * @returns\r\n   */\n  getAccountKeys() {\n    this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n    const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n    if (accountKeys) {\n      return JSON.parse(accountKeys);\n    }\n    this.logger.verbose(\"BrowserCacheManager.getAccountKeys - No account keys found\");\n    return [];\n  }\n  /**\r\n   * Add a new account to the key map\r\n   * @param key\r\n   */\n  addAccountKeyToMap(key) {\n    this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n    this.logger.tracePii(`BrowserCacheManager.addAccountKeyToMap called with key: ${key}`);\n    const accountKeys = this.getAccountKeys();\n    if (accountKeys.indexOf(key) === -1) {\n      // Only add key if it does not already exist in the map\n      accountKeys.push(key);\n      this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n      this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key added\");\n    } else {\n      this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key already exists in map\");\n    }\n  }\n  /**\r\n   * Remove an account from the key map\r\n   * @param key\r\n   */\n  removeAccountKeyFromMap(key) {\n    this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n    this.logger.tracePii(`BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`);\n    const accountKeys = this.getAccountKeys();\n    const removalIndex = accountKeys.indexOf(key);\n    if (removalIndex > -1) {\n      accountKeys.splice(removalIndex, 1);\n      this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n      this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap account key removed\");\n    } else {\n      this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\");\n    }\n  }\n  /**\r\n   * Extends inherited removeAccount function to include removal of the account key from the map\r\n   * @param key\r\n   */\n  async removeAccount(key) {\n    void super.removeAccount(key);\n    this.removeAccountKeyFromMap(key);\n  }\n  /**\r\n   * Remove account entity from the platform cache if it's outdated\r\n   * @param accountKey\r\n   */\n  removeOutdatedAccount(accountKey) {\n    this.removeItem(accountKey);\n    this.removeAccountKeyFromMap(accountKey);\n  }\n  /**\r\n   * Removes given idToken from the cache and from the key map\r\n   * @param key\r\n   */\n  removeIdToken(key) {\n    super.removeIdToken(key);\n    this.removeTokenKey(key, CredentialType.ID_TOKEN);\n  }\n  /**\r\n   * Removes given accessToken from the cache and from the key map\r\n   * @param key\r\n   */\n  async removeAccessToken(key) {\n    void super.removeAccessToken(key);\n    this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\n  }\n  /**\r\n   * Removes given refreshToken from the cache and from the key map\r\n   * @param key\r\n   */\n  removeRefreshToken(key) {\n    super.removeRefreshToken(key);\n    this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\n  }\n  /**\r\n   * Gets the keys for the cached tokens associated with this clientId\r\n   * @returns\r\n   */\n  getTokenKeys() {\n    this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n    const item = this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\n    if (item) {\n      const tokenKeys = this.validateAndParseJson(item);\n      if (tokenKeys && tokenKeys.hasOwnProperty(\"idToken\") && tokenKeys.hasOwnProperty(\"accessToken\") && tokenKeys.hasOwnProperty(\"refreshToken\")) {\n        return tokenKeys;\n      } else {\n        this.logger.error(\"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\");\n      }\n    } else {\n      this.logger.verbose(\"BrowserCacheManager.getTokenKeys - No token keys found\");\n    }\n    return {\n      idToken: [],\n      accessToken: [],\n      refreshToken: []\n    };\n  }\n  /**\r\n   * Adds the given key to the token key map\r\n   * @param key\r\n   * @param type\r\n   */\n  addTokenKey(key, type) {\n    this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n    const tokenKeys = this.getTokenKeys();\n    switch (type) {\n      case CredentialType.ID_TOKEN:\n        if (tokenKeys.idToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - idToken added to map\");\n          tokenKeys.idToken.push(key);\n        }\n        break;\n      case CredentialType.ACCESS_TOKEN:\n        if (tokenKeys.accessToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - accessToken added to map\");\n          tokenKeys.accessToken.push(key);\n        }\n        break;\n      case CredentialType.REFRESH_TOKEN:\n        if (tokenKeys.refreshToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - refreshToken added to map\");\n          tokenKeys.refreshToken.push(key);\n        }\n        break;\n      default:\n        this.logger.error(`BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\n        throw createClientAuthError(ClientAuthErrorCodes.unexpectedCredentialType);\n    }\n    this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\n  }\n  /**\r\n   * Removes the given key from the token key map\r\n   * @param key\r\n   * @param type\r\n   */\n  removeTokenKey(key, type) {\n    this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n    const tokenKeys = this.getTokenKeys();\n    switch (type) {\n      case CredentialType.ID_TOKEN:\n        this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`);\n        const idRemoval = tokenKeys.idToken.indexOf(key);\n        if (idRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken removed from map\");\n          tokenKeys.idToken.splice(idRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      case CredentialType.ACCESS_TOKEN:\n        this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`);\n        const accessRemoval = tokenKeys.accessToken.indexOf(key);\n        if (accessRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken removed from map\");\n          tokenKeys.accessToken.splice(accessRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      case CredentialType.REFRESH_TOKEN:\n        this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`);\n        const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n        if (refreshRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken removed from map\");\n          tokenKeys.refreshToken.splice(refreshRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      default:\n        this.logger.error(`BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\n        throw createClientAuthError(ClientAuthErrorCodes.unexpectedCredentialType);\n    }\n    this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\n  }\n  /**\r\n   * generates idToken entity from a string\r\n   * @param idTokenKey\r\n   */\n  getIdTokenCredential(idTokenKey) {\n    const value = this.getItem(idTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n      return null;\n    }\n    const parsedIdToken = this.validateAndParseJson(value);\n    if (!parsedIdToken || !CacheHelpers.isIdTokenEntity(parsedIdToken)) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n    return parsedIdToken;\n  }\n  /**\r\n   * set IdToken credential to the platform cache\r\n   * @param idToken\r\n   */\n  setIdTokenCredential(idToken) {\n    this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n    const idTokenKey = CacheHelpers.generateCredentialKey(idToken);\n    this.setItem(idTokenKey, JSON.stringify(idToken));\n    this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n  }\n  /**\r\n   * generates accessToken entity from a string\r\n   * @param key\r\n   */\n  getAccessTokenCredential(accessTokenKey) {\n    const value = this.getItem(accessTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n      return null;\n    }\n    const parsedAccessToken = this.validateAndParseJson(value);\n    if (!parsedAccessToken || !CacheHelpers.isAccessTokenEntity(parsedAccessToken)) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n    return parsedAccessToken;\n  }\n  /**\r\n   * set accessToken credential to the platform cache\r\n   * @param accessToken\r\n   */\n  setAccessTokenCredential(accessToken) {\n    this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n    const accessTokenKey = CacheHelpers.generateCredentialKey(accessToken);\n    this.setItem(accessTokenKey, JSON.stringify(accessToken));\n    this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n  }\n  /**\r\n   * generates refreshToken entity from a string\r\n   * @param refreshTokenKey\r\n   */\n  getRefreshTokenCredential(refreshTokenKey) {\n    const value = this.getItem(refreshTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n      return null;\n    }\n    const parsedRefreshToken = this.validateAndParseJson(value);\n    if (!parsedRefreshToken || !CacheHelpers.isRefreshTokenEntity(parsedRefreshToken)) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n    return parsedRefreshToken;\n  }\n  /**\r\n   * set refreshToken credential to the platform cache\r\n   * @param refreshToken\r\n   */\n  setRefreshTokenCredential(refreshToken) {\n    this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n    const refreshTokenKey = CacheHelpers.generateCredentialKey(refreshToken);\n    this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n    this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n  }\n  /**\r\n   * fetch appMetadata entity from the platform cache\r\n   * @param appMetadataKey\r\n   */\n  getAppMetadata(appMetadataKey) {\n    const value = this.getItem(appMetadataKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n    const parsedMetadata = this.validateAndParseJson(value);\n    if (!parsedMetadata || !CacheHelpers.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n    return parsedMetadata;\n  }\n  /**\r\n   * set appMetadata entity to the platform cache\r\n   * @param appMetadata\r\n   */\n  setAppMetadata(appMetadata) {\n    this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n    const appMetadataKey = CacheHelpers.generateAppMetadataKey(appMetadata);\n    this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n  }\n  /**\r\n   * fetch server telemetry entity from the platform cache\r\n   * @param serverTelemetryKey\r\n   */\n  getServerTelemetry(serverTelemetryKey) {\n    const value = this.getItem(serverTelemetryKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n    const parsedEntity = this.validateAndParseJson(value);\n    if (!parsedEntity || !CacheHelpers.isServerTelemetryEntity(serverTelemetryKey, parsedEntity)) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n    return parsedEntity;\n  }\n  /**\r\n   * set server telemetry entity to the platform cache\r\n   * @param serverTelemetryKey\r\n   * @param serverTelemetry\r\n   */\n  setServerTelemetry(serverTelemetryKey, serverTelemetry) {\n    this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n    this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n  }\n  /**\r\n   *\r\n   */\n  getAuthorityMetadata(key) {\n    const value = this.internalStorage.getItem(key);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n      return null;\n    }\n    const parsedMetadata = this.validateAndParseJson(value);\n    if (parsedMetadata && CacheHelpers.isAuthorityMetadataEntity(key, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n      return parsedMetadata;\n    }\n    return null;\n  }\n  /**\r\n   *\r\n   */\n  getAuthorityMetadataKeys() {\n    const allKeys = this.internalStorage.getKeys();\n    return allKeys.filter(key => {\n      return this.isAuthorityMetadata(key);\n    });\n  }\n  /**\r\n   * Sets wrapper metadata in memory\r\n   * @param wrapperSKU\r\n   * @param wrapperVersion\r\n   */\n  setWrapperMetadata(wrapperSKU, wrapperVersion) {\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\n  }\n  /**\r\n   * Returns wrapper metadata from in-memory storage\r\n   */\n  getWrapperMetadata() {\n    const sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || Constants.EMPTY_STRING;\n    const version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || Constants.EMPTY_STRING;\n    return [sku, version];\n  }\n  /**\r\n   *\r\n   * @param entity\r\n   */\n  setAuthorityMetadata(key, entity) {\n    this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n    this.internalStorage.setItem(key, JSON.stringify(entity));\n  }\n  /**\r\n   * Gets the active account\r\n   */\n  getActiveAccount() {\n    const activeAccountKeyFilters = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n    if (!activeAccountValueFilters) {\n      // if new active account cache type isn't found, it's an old version, so look for that instead\n      this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\");\n      const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n      const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n      if (!activeAccountValueLocal) {\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n        return null;\n      }\n      const activeAccount = this.getAccountInfoFilteredBy({\n        localAccountId: activeAccountValueLocal\n      });\n      if (activeAccount) {\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\");\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\");\n        this.setActiveAccount(activeAccount);\n        return activeAccount;\n      }\n      return null;\n    }\n    const activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);\n    if (activeAccountValueObj) {\n      this.logger.trace(\"BrowserCacheManager.getActiveAccount: Active account filters schema found\");\n      return this.getAccountInfoFilteredBy({\n        homeAccountId: activeAccountValueObj.homeAccountId,\n        localAccountId: activeAccountValueObj.localAccountId,\n        tenantId: activeAccountValueObj.tenantId\n      });\n    }\n    this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n    return null;\n  }\n  /**\r\n   * Sets the active account's localAccountId in cache\r\n   * @param account\r\n   */\n  setActiveAccount(account) {\n    const activeAccountKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n    if (account) {\n      this.logger.verbose(\"setActiveAccount: Active account set\");\n      const activeAccountValue = {\n        homeAccountId: account.homeAccountId,\n        localAccountId: account.localAccountId,\n        tenantId: account.tenantId\n      };\n      this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\n      this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\n    } else {\n      this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n      this.browserStorage.removeItem(activeAccountKey);\n      this.browserStorage.removeItem(activeAccountKeyLocal);\n    }\n  }\n  /**\r\n   * fetch throttling entity from the platform cache\r\n   * @param throttlingCacheKey\r\n   */\n  getThrottlingCache(throttlingCacheKey) {\n    const value = this.getItem(throttlingCacheKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n    const parsedThrottlingCache = this.validateAndParseJson(value);\n    if (!parsedThrottlingCache || !CacheHelpers.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n    return parsedThrottlingCache;\n  }\n  /**\r\n   * set throttling entity to the platform cache\r\n   * @param throttlingCacheKey\r\n   * @param throttlingCache\r\n   */\n  setThrottlingCache(throttlingCacheKey, throttlingCache) {\n    this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n    this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n  }\n  /**\r\n   * Gets cache item with given key.\r\n   * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n  getTemporaryCache(cacheKey, generateKey) {\n    const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      const itemCookie = this.cookieStorage.getItem(key);\n      if (itemCookie) {\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n        return itemCookie;\n      }\n    }\n    const value = this.temporaryCacheStorage.getItem(key);\n    if (!value) {\n      // If temp cache item not found in session/memory, check local storage for items set by old versions\n      if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\n        const item = this.browserStorage.getItem(key);\n        if (item) {\n          this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n          return item;\n        }\n      }\n      this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n    return value;\n  }\n  /**\r\n   * Sets the cache item with the key and value given.\r\n   * Stores in cookie if storeAuthStateInCookie is set to true.\r\n   * This can cause cookie overflow if used incorrectly.\r\n   * @param key\r\n   * @param value\r\n   */\n  setTemporaryCache(cacheKey, value, generateKey) {\n    const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    this.temporaryCacheStorage.setItem(key, value);\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n      this.cookieStorage.setItem(key, value, undefined, this.cacheConfig.secureCookies);\n    }\n  }\n  /**\r\n   * Removes the cache item with the given key.\r\n   * @param key\r\n   */\n  removeItem(key) {\n    this.browserStorage.removeItem(key);\n  }\n  /**\r\n   * Removes the temporary cache item with the given key.\r\n   * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n  removeTemporaryItem(key) {\n    this.temporaryCacheStorage.removeItem(key);\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n      this.cookieStorage.removeItem(key);\n    }\n  }\n  /**\r\n   * Gets all keys in window.\r\n   */\n  getKeys() {\n    return this.browserStorage.getKeys();\n  }\n  /**\r\n   * Clears all cache entries created by MSAL.\r\n   */\n  async clear() {\n    // Removes all accounts and their credentials\n    await this.removeAllAccounts();\n    this.removeAppMetadata();\n    // Remove temp storage first to make sure any cookies are cleared\n    this.temporaryCacheStorage.getKeys().forEach(cacheKey => {\n      if (cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(this.clientId) !== -1) {\n        this.removeTemporaryItem(cacheKey);\n      }\n    });\n    // Removes all remaining MSAL cache items\n    this.browserStorage.getKeys().forEach(cacheKey => {\n      if (cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(this.clientId) !== -1) {\n        this.browserStorage.removeItem(cacheKey);\n      }\n    });\n    this.internalStorage.clear();\n  }\n  /**\r\n   * Clears all access tokes that have claims prior to saving the current one\r\n   * @param performanceClient {IPerformanceClient}\r\n   * @param correlationId {string} correlation id\r\n   * @returns\r\n   */\n  async clearTokensAndKeysWithClaims(performanceClient, correlationId) {\n    performanceClient.addQueueMeasurement(PerformanceEvents.ClearTokensAndKeysWithClaims, correlationId);\n    const tokenKeys = this.getTokenKeys();\n    const removedAccessTokens = [];\n    tokenKeys.accessToken.forEach(key => {\n      // if the access token has claims in its key, remove the token key and the token\n      const credential = this.getAccessTokenCredential(key);\n      if (credential?.requestedClaimsHash && key.includes(credential.requestedClaimsHash.toLowerCase())) {\n        removedAccessTokens.push(this.removeAccessToken(key));\n      }\n    });\n    await Promise.all(removedAccessTokens);\n    // warn if any access tokens are removed\n    if (removedAccessTokens.length > 0) {\n      this.logger.warning(`${removedAccessTokens.length} access tokens with claims in the cache keys have been removed from the cache.`);\n    }\n  }\n  /**\r\n   * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n   * @param key\r\n   * @param addInstanceId\r\n   */\n  generateCacheKey(key) {\n    const generatedKey = this.validateAndParseJson(key);\n    if (!generatedKey) {\n      if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\n        return key;\n      }\n      return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n    }\n    return JSON.stringify(key);\n  }\n  /**\r\n   * Create authorityKey to cache authority\r\n   * @param state\r\n   */\n  generateAuthorityKey(stateString) {\n    const {\n      libraryState: {\n        id: stateId\n      }\n    } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n    return this.generateCacheKey(`${TemporaryCacheKeys.AUTHORITY}.${stateId}`);\n  }\n  /**\r\n   * Create Nonce key to cache nonce\r\n   * @param state\r\n   */\n  generateNonceKey(stateString) {\n    const {\n      libraryState: {\n        id: stateId\n      }\n    } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n    return this.generateCacheKey(`${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`);\n  }\n  /**\r\n   * Creates full cache key for the request state\r\n   * @param stateString State string for the request\r\n   */\n  generateStateKey(stateString) {\n    // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n    const {\n      libraryState: {\n        id: stateId\n      }\n    } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n    return this.generateCacheKey(`${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`);\n  }\n  /**\r\n   * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n   */\n  getCachedAuthority(cachedState) {\n    const stateCacheKey = this.generateStateKey(cachedState);\n    const state = this.getTemporaryCache(stateCacheKey);\n    if (!state) {\n      return null;\n    }\n    const authorityCacheKey = this.generateAuthorityKey(state);\n    return this.getTemporaryCache(authorityCacheKey);\n  }\n  /**\r\n   * Updates account, authority, and state in cache\r\n   * @param serverAuthenticationRequest\r\n   * @param account\r\n   */\n  updateCacheEntries(state, nonce, authorityInstance, loginHint, account) {\n    this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n    // Cache the request state\n    const stateCacheKey = this.generateStateKey(state);\n    this.setTemporaryCache(stateCacheKey, state, false);\n    // Cache the nonce\n    const nonceCacheKey = this.generateNonceKey(state);\n    this.setTemporaryCache(nonceCacheKey, nonce, false);\n    // Cache authorityKey\n    const authorityCacheKey = this.generateAuthorityKey(state);\n    this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n    if (account) {\n      const ccsCredential = {\n        credential: account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    } else if (loginHint) {\n      const ccsCredential = {\n        credential: loginHint,\n        type: CcsCredentialType.UPN\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    }\n  }\n  /**\r\n   * Reset all temporary cache items\r\n   * @param state\r\n   */\n  resetRequestCache(state) {\n    this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n    // check state and remove associated cache items\n    if (state) {\n      this.temporaryCacheStorage.getKeys().forEach(key => {\n        if (key.indexOf(state) !== -1) {\n          this.removeTemporaryItem(key);\n        }\n      });\n      // delete generic interactive request parameters\n      this.removeTemporaryItem(this.generateStateKey(state));\n      this.removeTemporaryItem(this.generateNonceKey(state));\n      this.removeTemporaryItem(this.generateAuthorityKey(state));\n    }\n    this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n    this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));\n    this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\n    this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));\n    this.setInteractionInProgress(false);\n  }\n  /**\r\n   * Removes temporary cache for the provided state\r\n   * @param stateString\r\n   */\n  cleanRequestByState(stateString) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n    // Interaction is completed - remove interaction status.\n    if (stateString) {\n      const stateKey = this.generateStateKey(stateString);\n      const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n      this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);\n      this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n    }\n  }\n  /**\r\n   * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n   * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n   * @param interactionType\r\n   */\n  cleanRequestByInteractionType(interactionType) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\n    // Loop through all keys to find state key\n    this.temporaryCacheStorage.getKeys().forEach(key => {\n      // If this key is not the state key, move on\n      if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n        return;\n      }\n      // Retrieve state value, return if not a valid value\n      const stateValue = this.temporaryCacheStorage.getItem(key);\n      if (!stateValue) {\n        return;\n      }\n      // Extract state and ensure it matches given InteractionType, then clean request cache\n      const parsedState = extractBrowserRequestState(this.cryptoImpl, stateValue);\n      if (parsedState && parsedState.interactionType === interactionType) {\n        this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);\n        this.resetRequestCache(stateValue);\n      }\n    });\n    this.setInteractionInProgress(false);\n  }\n  cacheCodeRequest(authCodeRequest) {\n    this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n    const encodedValue = base64Encode(JSON.stringify(authCodeRequest));\n    this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n  }\n  /**\r\n   * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n   */\n  getCachedRequest(state) {\n    this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n    // Get token request from cache and parse as TokenExchangeParameters.\n    const encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\n    if (!encodedTokenRequest) {\n      throw createBrowserAuthError(noTokenRequestCacheError);\n    }\n    let parsedRequest;\n    try {\n      parsedRequest = JSON.parse(base64Decode(encodedTokenRequest));\n    } catch (e) {\n      this.logger.errorPii(`Attempted to parse: ${encodedTokenRequest}`);\n      this.logger.error(`Parsing cached token request threw with error: ${e}`);\n      throw createBrowserAuthError(unableToParseTokenRequestCacheError);\n    }\n    this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    // Get cached authority and use if no authority is cached with request.\n    if (!parsedRequest.authority) {\n      const authorityCacheKey = this.generateAuthorityKey(state);\n      const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n      if (!cachedAuthority) {\n        throw createBrowserAuthError(noCachedAuthorityError);\n      }\n      parsedRequest.authority = cachedAuthority;\n    }\n    return parsedRequest;\n  }\n  /**\r\n   * Gets cached native request for redirect flows\r\n   */\n  getCachedNativeRequest() {\n    this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n    const cachedRequest = this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, true);\n    if (!cachedRequest) {\n      this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\n      return null;\n    }\n    const parsedRequest = this.validateAndParseJson(cachedRequest);\n    if (!parsedRequest) {\n      this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\n      return null;\n    }\n    return parsedRequest;\n  }\n  isInteractionInProgress(matchClientId) {\n    const clientId = this.getInteractionInProgress();\n    if (matchClientId) {\n      return clientId === this.clientId;\n    } else {\n      return !!clientId;\n    }\n  }\n  getInteractionInProgress() {\n    const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n    return this.getTemporaryCache(key, false);\n  }\n  setInteractionInProgress(inProgress) {\n    // Ensure we don't overwrite interaction in progress for a different clientId\n    const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n    if (inProgress) {\n      if (this.getInteractionInProgress()) {\n        throw createBrowserAuthError(interactionInProgress);\n      } else {\n        // No interaction is in progress\n        this.setTemporaryCache(key, this.clientId, false);\n      }\n    } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\n      this.removeTemporaryItem(key);\n    }\n  }\n  /**\r\n   * Returns username retrieved from ADAL or MSAL v1 idToken\r\n   * @deprecated\r\n   */\n  getLegacyLoginHint() {\n    // Only check for adal/msal token if no SSO params are being used\n    const adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);\n    if (adalIdTokenString) {\n      this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n      this.logger.verbose(\"Cached ADAL id token retrieved.\");\n    }\n    // Check for cached MSAL v1 id token\n    const msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);\n    if (msalIdTokenString) {\n      this.browserStorage.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));\n      this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n    }\n    const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n    if (cachedIdTokenString) {\n      const idTokenClaims = AuthToken.extractTokenClaims(cachedIdTokenString, base64Decode);\n      if (idTokenClaims.preferred_username) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\n        return idTokenClaims.preferred_username;\n      } else if (idTokenClaims.upn) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\n        return idTokenClaims.upn;\n      } else {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\n      }\n    }\n    return null;\n  }\n  /**\r\n   * Updates a credential's cache key if the current cache key is outdated\r\n   */\n  updateCredentialCacheKey(currentCacheKey, credential) {\n    const updatedCacheKey = CacheHelpers.generateCredentialKey(credential);\n    if (currentCacheKey !== updatedCacheKey) {\n      const cacheItem = this.getItem(currentCacheKey);\n      if (cacheItem) {\n        this.browserStorage.removeItem(currentCacheKey);\n        this.setItem(updatedCacheKey, cacheItem);\n        this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\n        return updatedCacheKey;\n      } else {\n        this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\n      }\n    }\n    return currentCacheKey;\n  }\n  /**\r\n   * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache\r\n   * @param result\r\n   * @param request\r\n   */\n  async hydrateCache(result, request) {\n    const idTokenEntity = CacheHelpers.createIdTokenEntity(result.account?.homeAccountId, result.account?.environment, result.idToken, this.clientId, result.tenantId);\n    let claimsHash;\n    if (request.claims) {\n      claimsHash = await this.cryptoImpl.hashString(request.claims);\n    }\n    /**\r\n     * meta data for cache stores time in seconds from epoch\r\n     * AuthenticationResult returns expiresOn and extExpiresOn in milliseconds (as a Date object which is in ms)\r\n     * We need to map these for the cache when building tokens from AuthenticationResult\r\n     *\r\n     * The next MSAL VFuture should map these both to same value if possible\r\n     */\n    const accessTokenEntity = CacheHelpers.createAccessTokenEntity(result.account?.homeAccountId, result.account.environment, result.accessToken, this.clientId, result.tenantId, result.scopes.join(\" \"), result.expiresOn ? result.expiresOn.getTime() / 1000 : 0, result.extExpiresOn ? result.extExpiresOn.getTime() / 1000 : 0, base64Decode, undefined,\n    // refreshOn\n    result.tokenType, undefined,\n    // userAssertionHash\n    request.sshKid, request.claims, claimsHash);\n    const cacheRecord = {\n      idToken: idTokenEntity,\n      accessToken: accessTokenEntity\n    };\n    return this.saveCacheRecord(cacheRecord);\n  }\n  /**\r\n   * saves a cache record\r\n   * @param cacheRecord {CacheRecord}\r\n   * @param storeInCache {?StoreInCache}\r\n   * @param correlationId {?string} correlation id\r\n   */\n  async saveCacheRecord(cacheRecord, storeInCache, correlationId) {\n    try {\n      await super.saveCacheRecord(cacheRecord, storeInCache, correlationId);\n    } catch (e) {\n      if (e instanceof CacheError && this.performanceClient && correlationId) {\n        try {\n          const tokenKeys = this.getTokenKeys();\n          this.performanceClient.addFields({\n            cacheRtCount: tokenKeys.refreshToken.length,\n            cacheIdCount: tokenKeys.idToken.length,\n            cacheAtCount: tokenKeys.accessToken.length\n          }, correlationId);\n        } catch (e) {}\n      }\n      throw e;\n    }\n  }\n}\nconst DEFAULT_BROWSER_CACHE_MANAGER = (clientId, logger) => {\n  const cacheOptions = {\n    cacheLocation: BrowserCacheLocation.MemoryStorage,\n    temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n    storeAuthStateInCookie: false,\n    secureCookies: false,\n    cacheMigrationEnabled: false,\n    claimsBasedCachingEnabled: false\n  };\n  return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\nexport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER };","map":{"version":3,"names":["BrowserCacheManager","CacheManager","constructor","clientId","cacheConfig","cryptoImpl","logger","staticAuthorityOptions","performanceClient","internalStorage","MemoryStorage","browserStorage","setupBrowserStorage","cacheLocation","temporaryCacheStorage","temporaryCacheLocation","cookieStorage","CookieStorage","cacheMigrationEnabled","migrateCacheEntries","createKeyMaps","BrowserCacheLocation","LocalStorage","SessionStorage","e","error","idTokenKey","Constants","CACHE_PREFIX","PersistentCacheKeys","ID_TOKEN","clientInfoKey","CLIENT_INFO","errorKey","ERROR","errorDescKey","ERROR_DESC","idTokenValue","getItem","clientInfoValue","errorValue","errorDescValue","values","keysToMigrate","forEach","cacheKey","index","value","setTemporaryCache","trace","accountKeys","StaticCacheKeys","ACCOUNT_KEYS","tokenKeys","TOKEN_KEYS","verbose","allKeys","getKeys","key","isCredentialKey","credObj","validateAndParseJson","hasOwnProperty","CredentialType","CacheHelpers","isIdTokenEntity","tracePii","idTokenEntity","newKey","updateCredentialCacheKey","addTokenKey","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","isAccessTokenEntity","accessTokenEntity","REFRESH_TOKEN","isRefreshTokenEntity","refreshTokenEntity","isAccountKey","accountObj","AccountEntity","isAccountEntity","addAccountKeyToMap","jsonValue","parsedJson","JSON","parse","setItem","getAccount","accountKey","accountEntity","getCachedAccountEntity","updateOutdatedCachedAccount","serializedAccount","removeAccountKeyFromMap","parsedAccount","toObject","setAccount","account","generateAccountKey","stringify","getAccountKeys","indexOf","push","removalIndex","splice","removeAccount","removeOutdatedAccount","removeItem","removeIdToken","removeTokenKey","removeAccessToken","removeRefreshToken","getTokenKeys","item","idToken","accessToken","refreshToken","type","info","createClientAuthError","ClientAuthErrorCodes","unexpectedCredentialType","infoPii","idRemoval","accessRemoval","refreshRemoval","getIdTokenCredential","parsedIdToken","setIdTokenCredential","generateCredentialKey","getAccessTokenCredential","accessTokenKey","parsedAccessToken","setAccessTokenCredential","getRefreshTokenCredential","refreshTokenKey","parsedRefreshToken","setRefreshTokenCredential","getAppMetadata","appMetadataKey","parsedMetadata","isAppMetadataEntity","setAppMetadata","appMetadata","generateAppMetadataKey","getServerTelemetry","serverTelemetryKey","parsedEntity","isServerTelemetryEntity","setServerTelemetry","serverTelemetry","getAuthorityMetadata","isAuthorityMetadataEntity","getAuthorityMetadataKeys","filter","isAuthorityMetadata","setWrapperMetadata","wrapperSKU","wrapperVersion","InMemoryCacheKeys","WRAPPER_SKU","WRAPPER_VER","getWrapperMetadata","sku","EMPTY_STRING","version","setAuthorityMetadata","entity","getActiveAccount","activeAccountKeyFilters","generateCacheKey","ACTIVE_ACCOUNT_FILTERS","activeAccountValueFilters","activeAccountKeyLocal","ACTIVE_ACCOUNT","activeAccountValueLocal","activeAccount","getAccountInfoFilteredBy","localAccountId","setActiveAccount","activeAccountValueObj","homeAccountId","tenantId","activeAccountKey","activeAccountValue","getThrottlingCache","throttlingCacheKey","parsedThrottlingCache","isThrottlingEntity","setThrottlingCache","throttlingCache","getTemporaryCache","generateKey","storeAuthStateInCookie","itemCookie","undefined","secureCookies","removeTemporaryItem","clear","removeAllAccounts","removeAppMetadata","clearTokensAndKeysWithClaims","correlationId","addQueueMeasurement","PerformanceEvents","ClearTokensAndKeysWithClaims","removedAccessTokens","credential","requestedClaimsHash","includes","toLowerCase","Promise","all","length","warning","generatedKey","StringUtils","startsWith","ADAL_ID_TOKEN","generateAuthorityKey","stateString","libraryState","id","stateId","ProtocolUtils","parseRequestState","TemporaryCacheKeys","AUTHORITY","generateNonceKey","NONCE_IDTOKEN","generateStateKey","REQUEST_STATE","getCachedAuthority","cachedState","stateCacheKey","state","authorityCacheKey","updateCacheEntries","nonce","authorityInstance","loginHint","nonceCacheKey","ccsCredential","CcsCredentialType","HOME_ACCOUNT_ID","CCS_CREDENTIAL","UPN","resetRequestCache","REQUEST_PARAMS","ORIGIN_URI","URL_HASH","CORRELATION_ID","NATIVE_REQUEST","setInteractionInProgress","cleanRequestByState","stateKey","cleanRequestByInteractionType","interactionType","stateValue","parsedState","extractBrowserRequestState","cacheCodeRequest","authCodeRequest","encodedValue","base64Encode","getCachedRequest","encodedTokenRequest","createBrowserAuthError","noTokenRequestCacheError","parsedRequest","base64Decode","errorPii","unableToParseTokenRequestCacheError","authority","cachedAuthority","noCachedAuthorityError","getCachedNativeRequest","cachedRequest","isInteractionInProgress","matchClientId","getInteractionInProgress","INTERACTION_STATUS_KEY","inProgress","interactionInProgress","getLegacyLoginHint","adalIdTokenString","msalIdTokenString","cachedIdTokenString","idTokenClaims","AuthToken","extractTokenClaims","preferred_username","upn","currentCacheKey","updatedCacheKey","cacheItem","credentialType","hydrateCache","result","request","createIdTokenEntity","environment","claimsHash","claims","hashString","createAccessTokenEntity","scopes","join","expiresOn","getTime","extExpiresOn","tokenType","sshKid","cacheRecord","saveCacheRecord","storeInCache","CacheError","addFields","cacheRtCount","cacheIdCount","cacheAtCount","DEFAULT_BROWSER_CACHE_MANAGER","cacheOptions","claimsBasedCachingEnabled","DEFAULT_CRYPTO_IMPLEMENTATION"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-browser\\src\\cache\\BrowserCacheManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Constants,\n    PersistentCacheKeys,\n    StringUtils,\n    CommonAuthorizationCodeRequest,\n    ICrypto,\n    AccountEntity,\n    IdTokenEntity,\n    AccessTokenEntity,\n    RefreshTokenEntity,\n    AppMetadataEntity,\n    CacheManager,\n    ServerTelemetryEntity,\n    ThrottlingEntity,\n    ProtocolUtils,\n    Logger,\n    AuthorityMetadataEntity,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    AccountInfo,\n    ActiveAccountFilters,\n    CcsCredential,\n    CcsCredentialType,\n    AuthToken,\n    ValidCredentialType,\n    TokenKeys,\n    CredentialType,\n    CacheRecord,\n    AuthenticationScheme,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n    PerformanceEvents,\n    IPerformanceClient,\n    StaticAuthorityOptions,\n    CacheHelpers,\n    StoreInCache,\n    CacheError,\n} from \"@azure/msal-common/browser\";\nimport { CacheOptions } from \"../config/Configuration.js\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError.js\";\nimport {\n    BrowserCacheLocation,\n    InteractionType,\n    TemporaryCacheKeys,\n    InMemoryCacheKeys,\n    StaticCacheKeys,\n} from \"../utils/BrowserConstants.js\";\nimport { LocalStorage } from \"./LocalStorage.js\";\nimport { SessionStorage } from \"./SessionStorage.js\";\nimport { MemoryStorage } from \"./MemoryStorage.js\";\nimport { IWindowStorage } from \"./IWindowStorage.js\";\nimport { extractBrowserRequestState } from \"../utils/BrowserProtocolUtils.js\";\nimport { NativeTokenRequest } from \"../broker/nativeBroker/NativeRequest.js\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\nimport { SilentRequest } from \"../request/SilentRequest.js\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest.js\";\nimport { RedirectRequest } from \"../request/RedirectRequest.js\";\nimport { PopupRequest } from \"../request/PopupRequest.js\";\nimport { base64Decode } from \"../encode/Base64Decode.js\";\nimport { base64Encode } from \"../encode/Base64Encode.js\";\nimport { CookieStorage } from \"./CookieStorage.js\";\n\n/**\n * This class implements the cache storage interface for MSAL through browser local or session storage.\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\n * parameters such as state and nonce, generally.\n */\nexport class BrowserCacheManager extends CacheManager {\n    // Cache configuration, either set by user or default values.\n    protected cacheConfig: Required<CacheOptions>;\n    // Window storage object (either local or sessionStorage)\n    protected browserStorage: IWindowStorage<string>;\n    // Internal in-memory storage object used for data used by msal that does not need to persist across page loads\n    protected internalStorage: MemoryStorage<string>;\n    // Temporary cache\n    protected temporaryCacheStorage: IWindowStorage<string>;\n    // Cookie storage\n    protected cookieStorage: CookieStorage;\n    // Logger instance\n    protected logger: Logger;\n    // Telemetry perf client\n    protected performanceClient?: IPerformanceClient;\n\n    constructor(\n        clientId: string,\n        cacheConfig: Required<CacheOptions>,\n        cryptoImpl: ICrypto,\n        logger: Logger,\n        staticAuthorityOptions?: StaticAuthorityOptions,\n        performanceClient?: IPerformanceClient\n    ) {\n        super(clientId, cryptoImpl, logger, staticAuthorityOptions);\n        this.cacheConfig = cacheConfig;\n        this.logger = logger;\n        this.internalStorage = new MemoryStorage();\n        this.browserStorage = this.setupBrowserStorage(\n            this.cacheConfig.cacheLocation\n        );\n        this.temporaryCacheStorage = this.setupBrowserStorage(\n            this.cacheConfig.temporaryCacheLocation\n        );\n        this.cookieStorage = new CookieStorage();\n\n        // Migrate cache entries from older versions of MSAL.\n        if (cacheConfig.cacheMigrationEnabled) {\n            this.migrateCacheEntries();\n            this.createKeyMaps();\n        }\n\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\n     * @param cacheLocation\n     */\n    protected setupBrowserStorage(\n        cacheLocation: BrowserCacheLocation | string\n    ): IWindowStorage<string> {\n        try {\n            switch (cacheLocation) {\n                case BrowserCacheLocation.LocalStorage:\n                    return new LocalStorage();\n                case BrowserCacheLocation.SessionStorage:\n                    return new SessionStorage();\n                case BrowserCacheLocation.MemoryStorage:\n                default:\n                    break;\n            }\n        } catch (e) {\n            this.logger.error(e as string);\n        }\n        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n        return new MemoryStorage();\n    }\n\n    /**\n     * Migrate all old cache entries to new schema. No rollback supported.\n     * @param storeAuthStateInCookie\n     */\n    protected migrateCacheEntries(): void {\n        const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\n        const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\n        const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\n        const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\n\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n        const errorValue = this.browserStorage.getItem(errorKey);\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\n\n        const values = [\n            idTokenValue,\n            clientInfoValue,\n            errorValue,\n            errorDescValue,\n        ];\n        const keysToMigrate = [\n            PersistentCacheKeys.ID_TOKEN,\n            PersistentCacheKeys.CLIENT_INFO,\n            PersistentCacheKeys.ERROR,\n            PersistentCacheKeys.ERROR_DESC,\n        ];\n\n        keysToMigrate.forEach((cacheKey: string, index: number) => {\n            const value = values[index];\n            if (value) {\n                this.setTemporaryCache(cacheKey, value, true);\n            }\n        });\n    }\n\n    /**\n     * Searches all cache entries for MSAL accounts and creates the account key map\n     * This is used to migrate users from older versions of MSAL which did not create the map.\n     * @returns\n     */\n    private createKeyMaps(): void {\n        this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n        const tokenKeys = this.getItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`\n        );\n        if (accountKeys && tokenKeys) {\n            this.logger.verbose(\n                \"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\"\n            );\n            // Key maps already exist, no need to iterate through cache\n            return;\n        }\n\n        const allKeys = this.browserStorage.getKeys();\n        allKeys.forEach((key) => {\n            if (this.isCredentialKey(key)) {\n                // Get item, parse, validate and write key to map\n                const value = this.getItem(key);\n                if (value) {\n                    const credObj = this.validateAndParseJson(value);\n                    if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n                        switch (credObj[\"credentialType\"]) {\n                            case CredentialType.ID_TOKEN:\n                                if (CacheHelpers.isIdTokenEntity(credObj)) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const idTokenEntity =\n                                        credObj as IdTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            idTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.ID_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            case CredentialType.ACCESS_TOKEN:\n                            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                                if (CacheHelpers.isAccessTokenEntity(credObj)) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const accessTokenEntity =\n                                        credObj as AccessTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            accessTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.ACCESS_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            case CredentialType.REFRESH_TOKEN:\n                                if (\n                                    CacheHelpers.isRefreshTokenEntity(credObj)\n                                ) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const refreshTokenEntity =\n                                        credObj as RefreshTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            refreshTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.REFRESH_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            default:\n                            // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\n                        }\n                    }\n                }\n            }\n\n            if (this.isAccountKey(key)) {\n                const value = this.getItem(key);\n                if (value) {\n                    const accountObj = this.validateAndParseJson(value);\n                    if (\n                        accountObj &&\n                        AccountEntity.isAccountEntity(accountObj)\n                    ) {\n                        this.logger.trace(\n                            \"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\"\n                        );\n                        this.logger.tracePii(\n                            `BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`\n                        );\n                        this.addAccountKeyToMap(key);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\n     * @param input\n     */\n    protected validateAndParseJson(jsonValue: string): object | null {\n        try {\n            const parsedJson = JSON.parse(jsonValue);\n            /**\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\n             *\n             */\n            return parsedJson && typeof parsedJson === \"object\"\n                ? parsedJson\n                : null;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * fetches the entry from the browser storage based off the key\n     * @param key\n     */\n    getItem(key: string): string | null {\n        return this.browserStorage.getItem(key);\n    }\n\n    /**\n     * sets the entry in the browser storage\n     * @param key\n     * @param value\n     */\n    setItem(key: string, value: string): void {\n        this.browserStorage.setItem(key, value);\n    }\n\n    /**\n     * fetch the account entity from the platform cache\n     * @param accountKey\n     */\n    getAccount(accountKey: string, logger?: Logger): AccountEntity | null {\n        this.logger.trace(\"BrowserCacheManager.getAccount called\");\n        const accountEntity = this.getCachedAccountEntity(accountKey);\n\n        return this.updateOutdatedCachedAccount(\n            accountKey,\n            accountEntity,\n            logger\n        );\n    }\n\n    /**\n     * Reads account from cache, deserializes it into an account entity and returns it.\n     * If account is not found from the key, returns null and removes key from map.\n     * @param accountKey\n     * @returns\n     */\n    getCachedAccountEntity(accountKey: string): AccountEntity | null {\n        const serializedAccount = this.getItem(accountKey);\n        if (!serializedAccount) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n\n        const parsedAccount = this.validateAndParseJson(serializedAccount);\n        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n\n        return CacheManager.toObject<AccountEntity>(\n            new AccountEntity(),\n            parsedAccount\n        );\n    }\n\n    /**\n     * set account entity in the platform cache\n     * @param account\n     */\n    setAccount(account: AccountEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\n        const key = account.generateAccountKey();\n        this.setItem(key, JSON.stringify(account));\n        this.addAccountKeyToMap(key);\n    }\n\n    /**\n     * Returns the array of account keys currently cached\n     * @returns\n     */\n    getAccountKeys(): Array<string> {\n        this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n        if (accountKeys) {\n            return JSON.parse(accountKeys);\n        }\n\n        this.logger.verbose(\n            \"BrowserCacheManager.getAccountKeys - No account keys found\"\n        );\n        return [];\n    }\n\n    /**\n     * Add a new account to the key map\n     * @param key\n     */\n    addAccountKeyToMap(key: string): void {\n        this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n        this.logger.tracePii(\n            `BrowserCacheManager.addAccountKeyToMap called with key: ${key}`\n        );\n        const accountKeys = this.getAccountKeys();\n        if (accountKeys.indexOf(key) === -1) {\n            // Only add key if it does not already exist in the map\n            accountKeys.push(key);\n            this.setItem(\n                StaticCacheKeys.ACCOUNT_KEYS,\n                JSON.stringify(accountKeys)\n            );\n            this.logger.verbose(\n                \"BrowserCacheManager.addAccountKeyToMap account key added\"\n            );\n        } else {\n            this.logger.verbose(\n                \"BrowserCacheManager.addAccountKeyToMap account key already exists in map\"\n            );\n        }\n    }\n\n    /**\n     * Remove an account from the key map\n     * @param key\n     */\n    removeAccountKeyFromMap(key: string): void {\n        this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n        this.logger.tracePii(\n            `BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`\n        );\n        const accountKeys = this.getAccountKeys();\n        const removalIndex = accountKeys.indexOf(key);\n        if (removalIndex > -1) {\n            accountKeys.splice(removalIndex, 1);\n            this.setItem(\n                StaticCacheKeys.ACCOUNT_KEYS,\n                JSON.stringify(accountKeys)\n            );\n            this.logger.trace(\n                \"BrowserCacheManager.removeAccountKeyFromMap account key removed\"\n            );\n        } else {\n            this.logger.trace(\n                \"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\"\n            );\n        }\n    }\n\n    /**\n     * Extends inherited removeAccount function to include removal of the account key from the map\n     * @param key\n     */\n    async removeAccount(key: string): Promise<void> {\n        void super.removeAccount(key);\n        this.removeAccountKeyFromMap(key);\n    }\n\n    /**\n     * Remove account entity from the platform cache if it's outdated\n     * @param accountKey\n     */\n    removeOutdatedAccount(accountKey: string): void {\n        this.removeItem(accountKey);\n        this.removeAccountKeyFromMap(accountKey);\n    }\n\n    /**\n     * Removes given idToken from the cache and from the key map\n     * @param key\n     */\n    removeIdToken(key: string): void {\n        super.removeIdToken(key);\n        this.removeTokenKey(key, CredentialType.ID_TOKEN);\n    }\n\n    /**\n     * Removes given accessToken from the cache and from the key map\n     * @param key\n     */\n    async removeAccessToken(key: string): Promise<void> {\n        void super.removeAccessToken(key);\n        this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\n    }\n\n    /**\n     * Removes given refreshToken from the cache and from the key map\n     * @param key\n     */\n    removeRefreshToken(key: string): void {\n        super.removeRefreshToken(key);\n        this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\n    }\n\n    /**\n     * Gets the keys for the cached tokens associated with this clientId\n     * @returns\n     */\n    getTokenKeys(): TokenKeys {\n        this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n        const item = this.getItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`\n        );\n        if (item) {\n            const tokenKeys = this.validateAndParseJson(item);\n            if (\n                tokenKeys &&\n                tokenKeys.hasOwnProperty(\"idToken\") &&\n                tokenKeys.hasOwnProperty(\"accessToken\") &&\n                tokenKeys.hasOwnProperty(\"refreshToken\")\n            ) {\n                return tokenKeys as TokenKeys;\n            } else {\n                this.logger.error(\n                    \"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"BrowserCacheManager.getTokenKeys - No token keys found\"\n            );\n        }\n\n        return {\n            idToken: [],\n            accessToken: [],\n            refreshToken: [],\n        };\n    }\n\n    /**\n     * Adds the given key to the token key map\n     * @param key\n     * @param type\n     */\n    addTokenKey(key: string, type: CredentialType): void {\n        this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n\n        switch (type) {\n            case CredentialType.ID_TOKEN:\n                if (tokenKeys.idToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - idToken added to map\"\n                    );\n                    tokenKeys.idToken.push(key);\n                }\n                break;\n            case CredentialType.ACCESS_TOKEN:\n                if (tokenKeys.accessToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - accessToken added to map\"\n                    );\n                    tokenKeys.accessToken.push(key);\n                }\n                break;\n            case CredentialType.REFRESH_TOKEN:\n                if (tokenKeys.refreshToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - refreshToken added to map\"\n                    );\n                    tokenKeys.refreshToken.push(key);\n                }\n                break;\n            default:\n                this.logger.error(\n                    `BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`\n                );\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.unexpectedCredentialType\n                );\n        }\n\n        this.setItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`,\n            JSON.stringify(tokenKeys)\n        );\n    }\n\n    /**\n     * Removes the given key from the token key map\n     * @param key\n     * @param type\n     */\n    removeTokenKey(key: string, type: CredentialType): void {\n        this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n\n        switch (type) {\n            case CredentialType.ID_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`\n                );\n                const idRemoval = tokenKeys.idToken.indexOf(key);\n                if (idRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - idToken removed from map\"\n                    );\n                    tokenKeys.idToken.splice(idRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            case CredentialType.ACCESS_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`\n                );\n                const accessRemoval = tokenKeys.accessToken.indexOf(key);\n                if (accessRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - accessToken removed from map\"\n                    );\n                    tokenKeys.accessToken.splice(accessRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            case CredentialType.REFRESH_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`\n                );\n                const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n                if (refreshRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - refreshToken removed from map\"\n                    );\n                    tokenKeys.refreshToken.splice(refreshRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            default:\n                this.logger.error(\n                    `BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`\n                );\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.unexpectedCredentialType\n                );\n        }\n\n        this.setItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`,\n            JSON.stringify(tokenKeys)\n        );\n    }\n\n    /**\n     * generates idToken entity from a string\n     * @param idTokenKey\n     */\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\n        const value = this.getItem(idTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getIdTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n            return null;\n        }\n\n        const parsedIdToken = this.validateAndParseJson(value);\n        if (!parsedIdToken || !CacheHelpers.isIdTokenEntity(parsedIdToken)) {\n            this.logger.trace(\n                \"BrowserCacheManager.getIdTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getIdTokenCredential: cache hit\"\n        );\n        return parsedIdToken as IdTokenEntity;\n    }\n\n    /**\n     * set IdToken credential to the platform cache\n     * @param idToken\n     */\n    setIdTokenCredential(idToken: IdTokenEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n        const idTokenKey = CacheHelpers.generateCredentialKey(idToken);\n\n        this.setItem(idTokenKey, JSON.stringify(idToken));\n\n        this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n    }\n\n    /**\n     * generates accessToken entity from a string\n     * @param key\n     */\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\n        const value = this.getItem(accessTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n        const parsedAccessToken = this.validateAndParseJson(value);\n        if (\n            !parsedAccessToken ||\n            !CacheHelpers.isAccessTokenEntity(parsedAccessToken)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getAccessTokenCredential: cache hit\"\n        );\n        return parsedAccessToken as AccessTokenEntity;\n    }\n\n    /**\n     * set accessToken credential to the platform cache\n     * @param accessToken\n     */\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\n        this.logger.trace(\n            \"BrowserCacheManager.setAccessTokenCredential called\"\n        );\n        const accessTokenKey = CacheHelpers.generateCredentialKey(accessToken);\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\n\n        this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n    }\n\n    /**\n     * generates refreshToken entity from a string\n     * @param refreshTokenKey\n     */\n    getRefreshTokenCredential(\n        refreshTokenKey: string\n    ): RefreshTokenEntity | null {\n        const value = this.getItem(refreshTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n        const parsedRefreshToken = this.validateAndParseJson(value);\n        if (\n            !parsedRefreshToken ||\n            !CacheHelpers.isRefreshTokenEntity(parsedRefreshToken)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getRefreshTokenCredential: cache hit\"\n        );\n        return parsedRefreshToken as RefreshTokenEntity;\n    }\n\n    /**\n     * set refreshToken credential to the platform cache\n     * @param refreshToken\n     */\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\n        this.logger.trace(\n            \"BrowserCacheManager.setRefreshTokenCredential called\"\n        );\n        const refreshTokenKey =\n            CacheHelpers.generateCredentialKey(refreshToken);\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n\n        this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n    }\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey\n     */\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\n        const value = this.getItem(appMetadataKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAppMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (\n            !parsedMetadata ||\n            !CacheHelpers.isAppMetadataEntity(appMetadataKey, parsedMetadata)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAppMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n        return parsedMetadata as AppMetadataEntity;\n    }\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata\n     */\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n        const appMetadataKey = CacheHelpers.generateAppMetadataKey(appMetadata);\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n    }\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetryKey\n     */\n    getServerTelemetry(\n        serverTelemetryKey: string\n    ): ServerTelemetryEntity | null {\n        const value = this.getItem(serverTelemetryKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getServerTelemetry: called, no cache hit\"\n            );\n            return null;\n        }\n        const parsedEntity = this.validateAndParseJson(value);\n        if (\n            !parsedEntity ||\n            !CacheHelpers.isServerTelemetryEntity(\n                serverTelemetryKey,\n                parsedEntity\n            )\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getServerTelemetry: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n        return parsedEntity as ServerTelemetryEntity;\n    }\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey\n     * @param serverTelemetry\n     */\n    setServerTelemetry(\n        serverTelemetryKey: string,\n        serverTelemetry: ServerTelemetryEntity\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadata(key: string): AuthorityMetadataEntity | null {\n        const value = this.internalStorage.getItem(key);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (\n            parsedMetadata &&\n            CacheHelpers.isAuthorityMetadataEntity(key, parsedMetadata)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAuthorityMetadata: cache hit\"\n            );\n            return parsedMetadata as AuthorityMetadataEntity;\n        }\n        return null;\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadataKeys(): Array<string> {\n        const allKeys = this.internalStorage.getKeys();\n        return allKeys.filter((key) => {\n            return this.isAuthorityMetadata(key);\n        });\n    }\n\n    /**\n     * Sets wrapper metadata in memory\n     * @param wrapperSKU\n     * @param wrapperVersion\n     */\n    setWrapperMetadata(wrapperSKU: string, wrapperVersion: string): void {\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n        this.internalStorage.setItem(\n            InMemoryCacheKeys.WRAPPER_VER,\n            wrapperVersion\n        );\n    }\n\n    /**\n     * Returns wrapper metadata from in-memory storage\n     */\n    getWrapperMetadata(): [string, string] {\n        const sku =\n            this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) ||\n            Constants.EMPTY_STRING;\n        const version =\n            this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) ||\n            Constants.EMPTY_STRING;\n        return [sku, version];\n    }\n\n    /**\n     *\n     * @param entity\n     */\n    setAuthorityMetadata(key: string, entity: AuthorityMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n        this.internalStorage.setItem(key, JSON.stringify(entity));\n    }\n\n    /**\n     * Gets the active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        const activeAccountKeyFilters = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS\n        );\n        const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n        if (!activeAccountValueFilters) {\n            // if new active account cache type isn't found, it's an old version, so look for that instead\n            this.logger.trace(\n                \"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\"\n            );\n            const activeAccountKeyLocal = this.generateCacheKey(\n                PersistentCacheKeys.ACTIVE_ACCOUNT\n            );\n            const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n            if (!activeAccountValueLocal) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: No active account found\"\n                );\n                return null;\n            }\n            const activeAccount = this.getAccountInfoFilteredBy({\n                localAccountId: activeAccountValueLocal,\n            });\n            if (activeAccount) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\"\n                );\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\"\n                );\n                this.setActiveAccount(activeAccount);\n                return activeAccount;\n            }\n            return null;\n        }\n        const activeAccountValueObj = this.validateAndParseJson(\n            activeAccountValueFilters\n        ) as AccountInfo;\n        if (activeAccountValueObj) {\n            this.logger.trace(\n                \"BrowserCacheManager.getActiveAccount: Active account filters schema found\"\n            );\n            return this.getAccountInfoFilteredBy({\n                homeAccountId: activeAccountValueObj.homeAccountId,\n                localAccountId: activeAccountValueObj.localAccountId,\n                tenantId: activeAccountValueObj.tenantId,\n            });\n        }\n        this.logger.trace(\n            \"BrowserCacheManager.getActiveAccount: No active account found\"\n        );\n        return null;\n    }\n\n    /**\n     * Sets the active account's localAccountId in cache\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        const activeAccountKey = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS\n        );\n        const activeAccountKeyLocal = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT\n        );\n        if (account) {\n            this.logger.verbose(\"setActiveAccount: Active account set\");\n            const activeAccountValue: ActiveAccountFilters = {\n                homeAccountId: account.homeAccountId,\n                localAccountId: account.localAccountId,\n                tenantId: account.tenantId,\n            };\n            this.browserStorage.setItem(\n                activeAccountKey,\n                JSON.stringify(activeAccountValue)\n            );\n            this.browserStorage.setItem(\n                activeAccountKeyLocal,\n                account.localAccountId\n            );\n        } else {\n            this.logger.verbose(\n                \"setActiveAccount: No account passed, active account not set\"\n            );\n            this.browserStorage.removeItem(activeAccountKey);\n            this.browserStorage.removeItem(activeAccountKeyLocal);\n        }\n    }\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey\n     */\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\n        const value = this.getItem(throttlingCacheKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getThrottlingCache: called, no cache hit\"\n            );\n            return null;\n        }\n\n        const parsedThrottlingCache = this.validateAndParseJson(value);\n        if (\n            !parsedThrottlingCache ||\n            !CacheHelpers.isThrottlingEntity(\n                throttlingCacheKey,\n                parsedThrottlingCache\n            )\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getThrottlingCache: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n        return parsedThrottlingCache as ThrottlingEntity;\n    }\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey\n     * @param throttlingCache\n     */\n    setThrottlingCache(\n        throttlingCacheKey: string,\n        throttlingCache: ThrottlingEntity\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n    }\n\n    /**\n     * Gets cache item with given key.\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    getTemporaryCache(cacheKey: string, generateKey?: boolean): string | null {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            const itemCookie = this.cookieStorage.getItem(key);\n            if (itemCookie) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\"\n                );\n                return itemCookie;\n            }\n        }\n\n        const value = this.temporaryCacheStorage.getItem(key);\n        if (!value) {\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\n            if (\n                this.cacheConfig.cacheLocation ===\n                BrowserCacheLocation.LocalStorage\n            ) {\n                const item = this.browserStorage.getItem(key);\n                if (item) {\n                    this.logger.trace(\n                        \"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\"\n                    );\n                    return item;\n                }\n            }\n            this.logger.trace(\n                \"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\"\n            );\n            return null;\n        }\n        this.logger.trace(\n            \"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\"\n        );\n        return value;\n    }\n\n    /**\n     * Sets the cache item with the key and value given.\n     * Stores in cookie if storeAuthStateInCookie is set to true.\n     * This can cause cookie overflow if used incorrectly.\n     * @param key\n     * @param value\n     */\n    setTemporaryCache(\n        cacheKey: string,\n        value: string,\n        generateKey?: boolean\n    ): void {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n\n        this.temporaryCacheStorage.setItem(key, value);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\n                \"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\"\n            );\n            this.cookieStorage.setItem(\n                key,\n                value,\n                undefined,\n                this.cacheConfig.secureCookies\n            );\n        }\n    }\n\n    /**\n     * Removes the cache item with the given key.\n     * @param key\n     */\n    removeItem(key: string): void {\n        this.browserStorage.removeItem(key);\n    }\n\n    /**\n     * Removes the temporary cache item with the given key.\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    removeTemporaryItem(key: string): void {\n        this.temporaryCacheStorage.removeItem(key);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\n                \"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\"\n            );\n            this.cookieStorage.removeItem(key);\n        }\n    }\n\n    /**\n     * Gets all keys in window.\n     */\n    getKeys(): string[] {\n        return this.browserStorage.getKeys();\n    }\n\n    /**\n     * Clears all cache entries created by MSAL.\n     */\n    async clear(): Promise<void> {\n        // Removes all accounts and their credentials\n        await this.removeAllAccounts();\n        this.removeAppMetadata();\n\n        // Remove temp storage first to make sure any cookies are cleared\n        this.temporaryCacheStorage.getKeys().forEach((cacheKey: string) => {\n            if (\n                cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 ||\n                cacheKey.indexOf(this.clientId) !== -1\n            ) {\n                this.removeTemporaryItem(cacheKey);\n            }\n        });\n\n        // Removes all remaining MSAL cache items\n        this.browserStorage.getKeys().forEach((cacheKey: string) => {\n            if (\n                cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 ||\n                cacheKey.indexOf(this.clientId) !== -1\n            ) {\n                this.browserStorage.removeItem(cacheKey);\n            }\n        });\n\n        this.internalStorage.clear();\n    }\n\n    /**\n     * Clears all access tokes that have claims prior to saving the current one\n     * @param performanceClient {IPerformanceClient}\n     * @param correlationId {string} correlation id\n     * @returns\n     */\n    async clearTokensAndKeysWithClaims(\n        performanceClient: IPerformanceClient,\n        correlationId: string\n    ): Promise<void> {\n        performanceClient.addQueueMeasurement(\n            PerformanceEvents.ClearTokensAndKeysWithClaims,\n            correlationId\n        );\n\n        const tokenKeys = this.getTokenKeys();\n\n        const removedAccessTokens: Array<Promise<void>> = [];\n        tokenKeys.accessToken.forEach((key: string) => {\n            // if the access token has claims in its key, remove the token key and the token\n            const credential = this.getAccessTokenCredential(key);\n            if (\n                credential?.requestedClaimsHash &&\n                key.includes(credential.requestedClaimsHash.toLowerCase())\n            ) {\n                removedAccessTokens.push(this.removeAccessToken(key));\n            }\n        });\n        await Promise.all(removedAccessTokens);\n\n        // warn if any access tokens are removed\n        if (removedAccessTokens.length > 0) {\n            this.logger.warning(\n                `${removedAccessTokens.length} access tokens with claims in the cache keys have been removed from the cache.`\n            );\n        }\n    }\n\n    /**\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\n     * @param key\n     * @param addInstanceId\n     */\n    generateCacheKey(key: string): string {\n        const generatedKey = this.validateAndParseJson(key);\n        if (!generatedKey) {\n            if (\n                StringUtils.startsWith(key, Constants.CACHE_PREFIX) ||\n                StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)\n            ) {\n                return key;\n            }\n            return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n        }\n\n        return JSON.stringify(key);\n    }\n\n    /**\n     * Create authorityKey to cache authority\n     * @param state\n     */\n    generateAuthorityKey(stateString: string): string {\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.AUTHORITY}.${stateId}`\n        );\n    }\n\n    /**\n     * Create Nonce key to cache nonce\n     * @param state\n     */\n    generateNonceKey(stateString: string): string {\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`\n        );\n    }\n\n    /**\n     * Creates full cache key for the request state\n     * @param stateString State string for the request\n     */\n    generateStateKey(stateString: string): string {\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`\n        );\n    }\n\n    /**\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\n     */\n    getCachedAuthority(cachedState: string): string | null {\n        const stateCacheKey = this.generateStateKey(cachedState);\n        const state = this.getTemporaryCache(stateCacheKey);\n        if (!state) {\n            return null;\n        }\n\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        return this.getTemporaryCache(authorityCacheKey);\n    }\n\n    /**\n     * Updates account, authority, and state in cache\n     * @param serverAuthenticationRequest\n     * @param account\n     */\n    updateCacheEntries(\n        state: string,\n        nonce: string,\n        authorityInstance: string,\n        loginHint: string,\n        account: AccountInfo | null\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n        // Cache the request state\n        const stateCacheKey = this.generateStateKey(state);\n        this.setTemporaryCache(stateCacheKey, state, false);\n\n        // Cache the nonce\n        const nonceCacheKey = this.generateNonceKey(state);\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\n\n        // Cache authorityKey\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n\n        if (account) {\n            const ccsCredential: CcsCredential = {\n                credential: account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\n            };\n            this.setTemporaryCache(\n                TemporaryCacheKeys.CCS_CREDENTIAL,\n                JSON.stringify(ccsCredential),\n                true\n            );\n        } else if (loginHint) {\n            const ccsCredential: CcsCredential = {\n                credential: loginHint,\n                type: CcsCredentialType.UPN,\n            };\n            this.setTemporaryCache(\n                TemporaryCacheKeys.CCS_CREDENTIAL,\n                JSON.stringify(ccsCredential),\n                true\n            );\n        }\n    }\n\n    /**\n     * Reset all temporary cache items\n     * @param state\n     */\n    resetRequestCache(state: string): void {\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n        // check state and remove associated cache items\n        if (state) {\n            this.temporaryCacheStorage.getKeys().forEach((key) => {\n                if (key.indexOf(state) !== -1) {\n                    this.removeTemporaryItem(key);\n                }\n            });\n\n            // delete generic interactive request parameters\n            this.removeTemporaryItem(this.generateStateKey(state));\n            this.removeTemporaryItem(this.generateNonceKey(state));\n            this.removeTemporaryItem(this.generateAuthorityKey(state));\n        }\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.URL_HASH)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST)\n        );\n        this.setInteractionInProgress(false);\n    }\n\n    /**\n     * Removes temporary cache for the provided state\n     * @param stateString\n     */\n    cleanRequestByState(stateString: string): void {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n        // Interaction is completed - remove interaction status.\n        if (stateString) {\n            const stateKey = this.generateStateKey(stateString);\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n            this.logger.infoPii(\n                `BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`\n            );\n            this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n        }\n    }\n\n    /**\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\n     * @param interactionType\n     */\n    cleanRequestByInteractionType(interactionType: InteractionType): void {\n        this.logger.trace(\n            \"BrowserCacheManager.cleanRequestByInteractionType called\"\n        );\n        // Loop through all keys to find state key\n        this.temporaryCacheStorage.getKeys().forEach((key) => {\n            // If this key is not the state key, move on\n            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n                return;\n            }\n\n            // Retrieve state value, return if not a valid value\n            const stateValue = this.temporaryCacheStorage.getItem(key);\n            if (!stateValue) {\n                return;\n            }\n            // Extract state and ensure it matches given InteractionType, then clean request cache\n            const parsedState = extractBrowserRequestState(\n                this.cryptoImpl,\n                stateValue\n            );\n            if (\n                parsedState &&\n                parsedState.interactionType === interactionType\n            ) {\n                this.logger.infoPii(\n                    `BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`\n                );\n                this.resetRequestCache(stateValue);\n            }\n        });\n        this.setInteractionInProgress(false);\n    }\n\n    cacheCodeRequest(authCodeRequest: CommonAuthorizationCodeRequest): void {\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n\n        const encodedValue = base64Encode(JSON.stringify(authCodeRequest));\n        this.setTemporaryCache(\n            TemporaryCacheKeys.REQUEST_PARAMS,\n            encodedValue,\n            true\n        );\n    }\n\n    /**\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\n     */\n    getCachedRequest(state: string): CommonAuthorizationCodeRequest {\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n        // Get token request from cache and parse as TokenExchangeParameters.\n        const encodedTokenRequest = this.getTemporaryCache(\n            TemporaryCacheKeys.REQUEST_PARAMS,\n            true\n        );\n        if (!encodedTokenRequest) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.noTokenRequestCacheError\n            );\n        }\n\n        let parsedRequest: CommonAuthorizationCodeRequest;\n        try {\n            parsedRequest = JSON.parse(base64Decode(encodedTokenRequest));\n        } catch (e) {\n            this.logger.errorPii(`Attempted to parse: ${encodedTokenRequest}`);\n            this.logger.error(\n                `Parsing cached token request threw with error: ${e}`\n            );\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToParseTokenRequestCacheError\n            );\n        }\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)\n        );\n\n        // Get cached authority and use if no authority is cached with request.\n        if (!parsedRequest.authority) {\n            const authorityCacheKey: string = this.generateAuthorityKey(state);\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n            if (!cachedAuthority) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.noCachedAuthorityError\n                );\n            }\n            parsedRequest.authority = cachedAuthority;\n        }\n\n        return parsedRequest;\n    }\n\n    /**\n     * Gets cached native request for redirect flows\n     */\n    getCachedNativeRequest(): NativeTokenRequest | null {\n        this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n        const cachedRequest = this.getTemporaryCache(\n            TemporaryCacheKeys.NATIVE_REQUEST,\n            true\n        );\n        if (!cachedRequest) {\n            this.logger.trace(\n                \"BrowserCacheManager.getCachedNativeRequest: No cached native request found\"\n            );\n            return null;\n        }\n\n        const parsedRequest = this.validateAndParseJson(\n            cachedRequest\n        ) as NativeTokenRequest;\n        if (!parsedRequest) {\n            this.logger.error(\n                \"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\"\n            );\n            return null;\n        }\n\n        return parsedRequest;\n    }\n\n    isInteractionInProgress(matchClientId?: boolean): boolean {\n        const clientId = this.getInteractionInProgress();\n\n        if (matchClientId) {\n            return clientId === this.clientId;\n        } else {\n            return !!clientId;\n        }\n    }\n\n    getInteractionInProgress(): string | null {\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        return this.getTemporaryCache(key, false);\n    }\n\n    setInteractionInProgress(inProgress: boolean): void {\n        // Ensure we don't overwrite interaction in progress for a different clientId\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        if (inProgress) {\n            if (this.getInteractionInProgress()) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.interactionInProgress\n                );\n            } else {\n                // No interaction is in progress\n                this.setTemporaryCache(key, this.clientId, false);\n            }\n        } else if (\n            !inProgress &&\n            this.getInteractionInProgress() === this.clientId\n        ) {\n            this.removeTemporaryItem(key);\n        }\n    }\n\n    /**\n     * Returns username retrieved from ADAL or MSAL v1 idToken\n     * @deprecated\n     */\n    getLegacyLoginHint(): string | null {\n        // Only check for adal/msal token if no SSO params are being used\n        const adalIdTokenString = this.getTemporaryCache(\n            PersistentCacheKeys.ADAL_ID_TOKEN\n        );\n        if (adalIdTokenString) {\n            this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n            this.logger.verbose(\"Cached ADAL id token retrieved.\");\n        }\n\n        // Check for cached MSAL v1 id token\n        const msalIdTokenString = this.getTemporaryCache(\n            PersistentCacheKeys.ID_TOKEN,\n            true\n        );\n        if (msalIdTokenString) {\n            this.browserStorage.removeItem(\n                this.generateCacheKey(PersistentCacheKeys.ID_TOKEN)\n            );\n            this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n        }\n\n        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n        if (cachedIdTokenString) {\n            const idTokenClaims = AuthToken.extractTokenClaims(\n                cachedIdTokenString,\n                base64Decode\n            );\n            if (idTokenClaims.preferred_username) {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\"\n                );\n                return idTokenClaims.preferred_username;\n            } else if (idTokenClaims.upn) {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\"\n                );\n                return idTokenClaims.upn;\n            } else {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\"\n                );\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Updates a credential's cache key if the current cache key is outdated\n     */\n    updateCredentialCacheKey(\n        currentCacheKey: string,\n        credential: ValidCredentialType\n    ): string {\n        const updatedCacheKey = CacheHelpers.generateCredentialKey(credential);\n\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.browserStorage.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(\n                    `Updated an outdated ${credential.credentialType} cache key`\n                );\n                return updatedCacheKey;\n            } else {\n                this.logger.error(\n                    `Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`\n                );\n            }\n        }\n\n        return currentCacheKey;\n    }\n\n    /**\n     * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache\n     * @param result\n     * @param request\n     */\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        const idTokenEntity = CacheHelpers.createIdTokenEntity(\n            result.account?.homeAccountId,\n            result.account?.environment,\n            result.idToken,\n            this.clientId,\n            result.tenantId\n        );\n\n        let claimsHash;\n        if (request.claims) {\n            claimsHash = await this.cryptoImpl.hashString(request.claims);\n        }\n\n        /**\n         * meta data for cache stores time in seconds from epoch\n         * AuthenticationResult returns expiresOn and extExpiresOn in milliseconds (as a Date object which is in ms)\n         * We need to map these for the cache when building tokens from AuthenticationResult\n         *\n         * The next MSAL VFuture should map these both to same value if possible\n         */\n\n        const accessTokenEntity = CacheHelpers.createAccessTokenEntity(\n            result.account?.homeAccountId,\n            result.account.environment,\n            result.accessToken,\n            this.clientId,\n            result.tenantId,\n            result.scopes.join(\" \"),\n            result.expiresOn ? result.expiresOn.getTime() / 1000 : 0,\n            result.extExpiresOn ? result.extExpiresOn.getTime() / 1000 : 0,\n            base64Decode,\n            undefined, // refreshOn\n            result.tokenType as AuthenticationScheme,\n            undefined, // userAssertionHash\n            request.sshKid,\n            request.claims,\n            claimsHash\n        );\n\n        const cacheRecord = {\n            idToken: idTokenEntity,\n            accessToken: accessTokenEntity,\n        };\n        return this.saveCacheRecord(cacheRecord);\n    }\n\n    /**\n     * saves a cache record\n     * @param cacheRecord {CacheRecord}\n     * @param storeInCache {?StoreInCache}\n     * @param correlationId {?string} correlation id\n     */\n    async saveCacheRecord(\n        cacheRecord: CacheRecord,\n        storeInCache?: StoreInCache,\n        correlationId?: string\n    ): Promise<void> {\n        try {\n            await super.saveCacheRecord(\n                cacheRecord,\n                storeInCache,\n                correlationId\n            );\n        } catch (e) {\n            if (\n                e instanceof CacheError &&\n                this.performanceClient &&\n                correlationId\n            ) {\n                try {\n                    const tokenKeys = this.getTokenKeys();\n\n                    this.performanceClient.addFields(\n                        {\n                            cacheRtCount: tokenKeys.refreshToken.length,\n                            cacheIdCount: tokenKeys.idToken.length,\n                            cacheAtCount: tokenKeys.accessToken.length,\n                        },\n                        correlationId\n                    );\n                } catch (e) {}\n            }\n\n            throw e;\n        }\n    }\n}\n\nexport const DEFAULT_BROWSER_CACHE_MANAGER = (\n    clientId: string,\n    logger: Logger\n): BrowserCacheManager => {\n    const cacheOptions: Required<CacheOptions> = {\n        cacheLocation: BrowserCacheLocation.MemoryStorage,\n        temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        cacheMigrationEnabled: false,\n        claimsBasedCachingEnabled: false,\n    };\n    return new BrowserCacheManager(\n        clientId,\n        cacheOptions,\n        DEFAULT_CRYPTO_IMPLEMENTATION,\n        logger\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}