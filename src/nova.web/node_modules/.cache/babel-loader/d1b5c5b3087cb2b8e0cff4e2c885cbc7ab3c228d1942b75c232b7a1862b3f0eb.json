{"ast":null,"code":"/*! @azure/msal-common v14.16.0 2024-11-05 */\n'use strict';\n\nimport { CacheOutcome, Constants, SERVER_TELEM_CONSTANTS, Separators } from '../../utils/Constants.mjs';\nimport { AuthError } from '../../error/AuthError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst skuGroupSeparator = \",\";\nconst skuValueSeparator = \"|\";\nfunction makeExtraSkuString(params) {\n  const {\n    skus,\n    libraryName,\n    libraryVersion,\n    extensionName,\n    extensionVersion\n  } = params;\n  const skuMap = new Map([[0, [libraryName, libraryVersion]], [2, [extensionName, extensionVersion]]]);\n  let skuArr = [];\n  if (skus !== null && skus !== void 0 && skus.length) {\n    skuArr = skus.split(skuGroupSeparator);\n    // Ignore invalid input sku param\n    if (skuArr.length < 4) {\n      return skus;\n    }\n  } else {\n    skuArr = Array.from({\n      length: 4\n    }, () => skuValueSeparator);\n  }\n  skuMap.forEach((value, key) => {\n    var _value$, _value$2;\n    if (value.length === 2 && (_value$ = value[0]) !== null && _value$ !== void 0 && _value$.length && (_value$2 = value[1]) !== null && _value$2 !== void 0 && _value$2.length) {\n      setSku({\n        skuArr,\n        index: key,\n        skuName: value[0],\n        skuVersion: value[1]\n      });\n    }\n  });\n  return skuArr.join(skuGroupSeparator);\n}\nfunction setSku(params) {\n  const {\n    skuArr,\n    index,\n    skuName,\n    skuVersion\n  } = params;\n  if (index >= skuArr.length) {\n    return;\n  }\n  skuArr[index] = [skuName, skuVersion].join(skuValueSeparator);\n}\n/** @internal */\nclass ServerTelemetryManager {\n  constructor(telemetryRequest, cacheManager) {\n    this.cacheOutcome = CacheOutcome.NOT_APPLICABLE;\n    this.cacheManager = cacheManager;\n    this.apiId = telemetryRequest.apiId;\n    this.correlationId = telemetryRequest.correlationId;\n    this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n    this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n    this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n  }\n  /**\r\n   * API to add MSER Telemetry to request\r\n   */\n  generateCurrentRequestHeaderValue() {\n    const request = \"\".concat(this.apiId).concat(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR).concat(this.cacheOutcome);\n    const platformFieldsArr = [this.wrapperSKU, this.wrapperVer];\n    const nativeBrokerErrorCode = this.getNativeBrokerErrorCode();\n    if (nativeBrokerErrorCode !== null && nativeBrokerErrorCode !== void 0 && nativeBrokerErrorCode.length) {\n      platformFieldsArr.push(\"broker_error=\".concat(nativeBrokerErrorCode));\n    }\n    const platformFields = platformFieldsArr.join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const regionDiscoveryFields = this.getRegionDiscoveryFields();\n    const requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  }\n  /**\r\n   * API to add MSER Telemetry for the last failed request\r\n   */\n  generateLastRequestHeaderValue() {\n    const lastRequests = this.getLastRequests();\n    const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    const failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const errorCount = lastRequests.errors.length;\n    // Indicate whether this header contains all data or partial data\n    const overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n    const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  }\n  /**\r\n   * API to cache token failures for MSER data capture\r\n   * @param error\r\n   */\n  cacheFailedRequest(error) {\n    const lastRequests = this.getLastRequests();\n    if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n      // Remove a cached error to make room, first in first out\n      lastRequests.failedRequests.shift(); // apiId\n      lastRequests.failedRequests.shift(); // correlationId\n      lastRequests.errors.shift();\n    }\n    lastRequests.failedRequests.push(this.apiId, this.correlationId);\n    if (error instanceof Error && !!error && error.toString()) {\n      if (error instanceof AuthError) {\n        if (error.subError) {\n          lastRequests.errors.push(error.subError);\n        } else if (error.errorCode) {\n          lastRequests.errors.push(error.errorCode);\n        } else {\n          lastRequests.errors.push(error.toString());\n        }\n      } else {\n        lastRequests.errors.push(error.toString());\n      }\n    } else {\n      lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n    }\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return;\n  }\n  /**\r\n   * Update server telemetry cache entry by incrementing cache hit counter\r\n   */\n  incrementCacheHits() {\n    const lastRequests = this.getLastRequests();\n    lastRequests.cacheHits += 1;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return lastRequests.cacheHits;\n  }\n  /**\r\n   * Get the server telemetry entity from cache or initialize a new one\r\n   */\n  getLastRequests() {\n    const initialValue = {\n      failedRequests: [],\n      errors: [],\n      cacheHits: 0\n    };\n    const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n    return lastRequests || initialValue;\n  }\n  /**\r\n   * Remove server telemetry cache entry\r\n   */\n  clearTelemetryCache() {\n    const lastRequests = this.getLastRequests();\n    const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    const errorCount = lastRequests.errors.length;\n    if (numErrorsFlushed === errorCount) {\n      // All errors were sent on last request, clear Telemetry cache\n      this.cacheManager.removeItem(this.telemetryCacheKey);\n    } else {\n      // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n      const serverTelemEntity = {\n        failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),\n        errors: lastRequests.errors.slice(numErrorsFlushed),\n        cacheHits: 0\n      };\n      this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n    }\n  }\n  /**\r\n   * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n   * @param serverTelemetryEntity\r\n   */\n  static maxErrorsToSend(serverTelemetryEntity) {\n    let i;\n    let maxErrors = 0;\n    let dataSize = 0;\n    const errorCount = serverTelemetryEntity.errors.length;\n    for (i = 0; i < errorCount; i++) {\n      // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n      const apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\n      const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\n      const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n      // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n      dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n      if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n        // Adding this entry to the header would still keep header size below the limit\n        maxErrors += 1;\n      } else {\n        break;\n      }\n    }\n    return maxErrors;\n  }\n  /**\r\n   * Get the region discovery fields\r\n   *\r\n   * @returns string\r\n   */\n  getRegionDiscoveryFields() {\n    const regionDiscoveryFields = [];\n    regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\n    return regionDiscoveryFields.join(\",\");\n  }\n  /**\r\n   * Update the region discovery metadata\r\n   *\r\n   * @param regionDiscoveryMetadata\r\n   * @returns void\r\n   */\n  updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\n    this.regionUsed = regionDiscoveryMetadata.region_used;\n    this.regionSource = regionDiscoveryMetadata.region_source;\n    this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n  }\n  /**\r\n   * Set cache outcome\r\n   */\n  setCacheOutcome(cacheOutcome) {\n    this.cacheOutcome = cacheOutcome;\n  }\n  setNativeBrokerErrorCode(errorCode) {\n    const lastRequests = this.getLastRequests();\n    lastRequests.nativeBrokerErrorCode = errorCode;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n  }\n  getNativeBrokerErrorCode() {\n    return this.getLastRequests().nativeBrokerErrorCode;\n  }\n  clearNativeBrokerErrorCode() {\n    const lastRequests = this.getLastRequests();\n    delete lastRequests.nativeBrokerErrorCode;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n  }\n  static makeExtraSkuString(params) {\n    return makeExtraSkuString(params);\n  }\n}\nexport { ServerTelemetryManager };","map":{"version":3,"names":["skuGroupSeparator","skuValueSeparator","makeExtraSkuString","params","skus","libraryName","libraryVersion","extensionName","extensionVersion","skuMap","Map","skuArr","length","split","Array","from","forEach","value","key","_value$","_value$2","setSku","index","skuName","skuVersion","join","ServerTelemetryManager","constructor","telemetryRequest","cacheManager","cacheOutcome","CacheOutcome","NOT_APPLICABLE","apiId","correlationId","wrapperSKU","Constants","EMPTY_STRING","wrapperVer","telemetryCacheKey","SERVER_TELEM_CONSTANTS","CACHE_KEY","Separators","CACHE_KEY_SEPARATOR","clientId","generateCurrentRequestHeaderValue","request","concat","VALUE_SEPARATOR","platformFieldsArr","nativeBrokerErrorCode","getNativeBrokerErrorCode","push","platformFields","regionDiscoveryFields","getRegionDiscoveryFields","requestWithRegionDiscoveryFields","SCHEMA_VERSION","CATEGORY_SEPARATOR","generateLastRequestHeaderValue","lastRequests","getLastRequests","maxErrors","maxErrorsToSend","failedRequests","slice","errors","errorCount","overflow","OVERFLOW_TRUE","OVERFLOW_FALSE","cacheHits","cacheFailedRequest","error","MAX_CACHED_ERRORS","shift","Error","toString","AuthError","subError","errorCode","UNKNOWN_ERROR","setServerTelemetry","incrementCacheHits","initialValue","getServerTelemetry","clearTelemetryCache","numErrorsFlushed","removeItem","serverTelemEntity","serverTelemetryEntity","i","dataSize","MAX_LAST_HEADER_BYTES","regionUsed","regionSource","regionOutcome","updateRegionDiscoveryMetadata","regionDiscoveryMetadata","region_used","region_source","region_outcome","setCacheOutcome","setNativeBrokerErrorCode","clearNativeBrokerErrorCode"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-common\\src\\telemetry\\server\\ServerTelemetryManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    SERVER_TELEM_CONSTANTS,\n    Separators,\n    CacheOutcome,\n    Constants,\n    RegionDiscoverySources,\n    RegionDiscoveryOutcomes,\n} from \"../../utils/Constants.js\";\nimport { CacheManager } from \"../../cache/CacheManager.js\";\nimport { AuthError } from \"../../error/AuthError.js\";\nimport { ServerTelemetryRequest } from \"./ServerTelemetryRequest.js\";\nimport { ServerTelemetryEntity } from \"../../cache/entities/ServerTelemetryEntity.js\";\nimport { RegionDiscoveryMetadata } from \"../../authority/RegionDiscoveryMetadata.js\";\n\nconst skuGroupSeparator = \",\";\nconst skuValueSeparator = \"|\";\n\ntype SkuParams = {\n    libraryName?: string;\n    libraryVersion?: string;\n    extensionName?: string;\n    extensionVersion?: string;\n    skus?: string;\n};\n\nfunction makeExtraSkuString(params: SkuParams): string {\n    const {\n        skus,\n        libraryName,\n        libraryVersion,\n        extensionName,\n        extensionVersion,\n    } = params;\n    const skuMap: Map<number, (string | undefined)[]> = new Map([\n        [0, [libraryName, libraryVersion]],\n        [2, [extensionName, extensionVersion]],\n    ]);\n    let skuArr: string[] = [];\n\n    if (skus?.length) {\n        skuArr = skus.split(skuGroupSeparator);\n\n        // Ignore invalid input sku param\n        if (skuArr.length < 4) {\n            return skus;\n        }\n    } else {\n        skuArr = Array.from({ length: 4 }, () => skuValueSeparator);\n    }\n\n    skuMap.forEach((value, key) => {\n        if (value.length === 2 && value[0]?.length && value[1]?.length) {\n            setSku({\n                skuArr,\n                index: key,\n                skuName: value[0],\n                skuVersion: value[1],\n            });\n        }\n    });\n\n    return skuArr.join(skuGroupSeparator);\n}\n\nfunction setSku(params: {\n    skuArr: string[];\n    index: number;\n    skuName: string;\n    skuVersion: string;\n}): void {\n    const { skuArr, index, skuName, skuVersion } = params;\n    if (index >= skuArr.length) {\n        return;\n    }\n    skuArr[index] = [skuName, skuVersion].join(skuValueSeparator);\n}\n\n/** @internal */\nexport class ServerTelemetryManager {\n    private cacheManager: CacheManager;\n    private apiId: number;\n    private correlationId: string;\n    private telemetryCacheKey: string;\n    private wrapperSKU: String;\n    private wrapperVer: String;\n    private regionUsed: string | undefined;\n    private regionSource: RegionDiscoverySources | undefined;\n    private regionOutcome: RegionDiscoveryOutcomes | undefined;\n    private cacheOutcome: CacheOutcome = CacheOutcome.NOT_APPLICABLE;\n\n    constructor(\n        telemetryRequest: ServerTelemetryRequest,\n        cacheManager: CacheManager\n    ) {\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n\n        this.telemetryCacheKey =\n            SERVER_TELEM_CONSTANTS.CACHE_KEY +\n            Separators.CACHE_KEY_SEPARATOR +\n            telemetryRequest.clientId;\n    }\n\n    /**\n     * API to add MSER Telemetry to request\n     */\n    generateCurrentRequestHeaderValue(): string {\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n        const platformFieldsArr = [this.wrapperSKU, this.wrapperVer];\n        const nativeBrokerErrorCode = this.getNativeBrokerErrorCode();\n        if (nativeBrokerErrorCode?.length) {\n            platformFieldsArr.push(`broker_error=${nativeBrokerErrorCode}`);\n        }\n        const platformFields = platformFieldsArr.join(\n            SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR\n        );\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\n        const requestWithRegionDiscoveryFields = [\n            request,\n            regionDiscoveryFields,\n        ].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n\n        return [\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            requestWithRegionDiscoveryFields,\n            platformFields,\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to add MSER Telemetry for the last failed request\n     */\n    generateLastRequestHeaderValue(): string {\n        const lastRequests = this.getLastRequests();\n\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests\n            .slice(0, 2 * maxErrors)\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors\n            .slice(0, maxErrors)\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n\n        // Indicate whether this header contains all data or partial data\n        const overflow =\n            maxErrors < errorCount\n                ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE\n                : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [errorCount, overflow].join(\n            SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR\n        );\n\n        return [\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            lastRequests.cacheHits,\n            failedRequests,\n            errors,\n            platformFields,\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to cache token failures for MSER data capture\n     * @param error\n     */\n    cacheFailedRequest(error: unknown): void {\n        const lastRequests = this.getLastRequests();\n        if (\n            lastRequests.errors.length >=\n            SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS\n        ) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n\n        if (error instanceof Error && !!error && error.toString()) {\n            if (error instanceof AuthError) {\n                if (error.subError) {\n                    lastRequests.errors.push(error.subError);\n                } else if (error.errorCode) {\n                    lastRequests.errors.push(error.errorCode);\n                } else {\n                    lastRequests.errors.push(error.toString());\n                }\n            } else {\n                lastRequests.errors.push(error.toString());\n            }\n        } else {\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n\n        this.cacheManager.setServerTelemetry(\n            this.telemetryCacheKey,\n            lastRequests\n        );\n\n        return;\n    }\n\n    /**\n     * Update server telemetry cache entry by incrementing cache hit counter\n     */\n    incrementCacheHits(): number {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n\n        this.cacheManager.setServerTelemetry(\n            this.telemetryCacheKey,\n            lastRequests\n        );\n        return lastRequests.cacheHits;\n    }\n\n    /**\n     * Get the server telemetry entity from cache or initialize a new one\n     */\n    getLastRequests(): ServerTelemetryEntity {\n        const initialValue: ServerTelemetryEntity = {\n            failedRequests: [],\n            errors: [],\n            cacheHits: 0,\n        };\n        const lastRequests = this.cacheManager.getServerTelemetry(\n            this.telemetryCacheKey\n        ) as ServerTelemetryEntity;\n\n        return lastRequests || initialValue;\n    }\n\n    /**\n     * Remove server telemetry cache entry\n     */\n    clearTelemetryCache(): void {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed =\n            ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        } else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity: ServerTelemetryEntity = {\n                failedRequests: lastRequests.failedRequests.slice(\n                    numErrorsFlushed * 2\n                ), // failedRequests contains 2 items for each error\n                errors: lastRequests.errors.slice(numErrorsFlushed),\n                cacheHits: 0,\n            };\n\n            this.cacheManager.setServerTelemetry(\n                this.telemetryCacheKey,\n                serverTelemEntity\n            );\n        }\n    }\n\n    /**\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\n     * @param serverTelemetryEntity\n     */\n    static maxErrorsToSend(\n        serverTelemetryEntity: ServerTelemetryEntity\n    ): number {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for (i = 0; i < errorCount; i++) {\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId =\n                serverTelemetryEntity.failedRequests[2 * i] ||\n                Constants.EMPTY_STRING;\n            const correlationId =\n                serverTelemetryEntity.failedRequests[2 * i + 1] ||\n                Constants.EMPTY_STRING;\n            const errorCode =\n                serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize +=\n                apiId.toString().length +\n                correlationId.toString().length +\n                errorCode.length +\n                3;\n\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            } else {\n                break;\n            }\n        }\n\n        return maxErrors;\n    }\n\n    /**\n     * Get the region discovery fields\n     *\n     * @returns string\n     */\n    getRegionDiscoveryFields(): string {\n        const regionDiscoveryFields: string[] = [];\n\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(\n            this.regionOutcome || Constants.EMPTY_STRING\n        );\n\n        return regionDiscoveryFields.join(\",\");\n    }\n\n    /**\n     * Update the region discovery metadata\n     *\n     * @param regionDiscoveryMetadata\n     * @returns void\n     */\n    updateRegionDiscoveryMetadata(\n        regionDiscoveryMetadata: RegionDiscoveryMetadata\n    ): void {\n        this.regionUsed = regionDiscoveryMetadata.region_used;\n        this.regionSource = regionDiscoveryMetadata.region_source;\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n    }\n\n    /**\n     * Set cache outcome\n     */\n    setCacheOutcome(cacheOutcome: CacheOutcome): void {\n        this.cacheOutcome = cacheOutcome;\n    }\n\n    setNativeBrokerErrorCode(errorCode: string): void {\n        const lastRequests = this.getLastRequests();\n        lastRequests.nativeBrokerErrorCode = errorCode;\n        this.cacheManager.setServerTelemetry(\n            this.telemetryCacheKey,\n            lastRequests\n        );\n    }\n\n    getNativeBrokerErrorCode(): string | undefined {\n        return this.getLastRequests().nativeBrokerErrorCode;\n    }\n\n    clearNativeBrokerErrorCode(): void {\n        const lastRequests = this.getLastRequests();\n        delete lastRequests.nativeBrokerErrorCode;\n        this.cacheManager.setServerTelemetry(\n            this.telemetryCacheKey,\n            lastRequests\n        );\n    }\n\n    static makeExtraSkuString(params: SkuParams): string {\n        return makeExtraSkuString(params);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}