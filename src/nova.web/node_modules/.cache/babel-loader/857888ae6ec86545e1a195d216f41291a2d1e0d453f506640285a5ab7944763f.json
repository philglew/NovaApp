{"ast":null,"code":"/*! @azure/msal-browser v3.28.0 2024-12-12 */\n'use strict';\n\nimport { Logger } from '@azure/msal-common/browser';\nimport { createGuid } from '../utils/BrowserUtils.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass EventHandler {\n  constructor(logger) {\n    this.eventCallbacks = new Map();\n    this.logger = logger || new Logger({});\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback - callback to be invoked when an event is raised\r\n   * @param eventTypes - list of events that this callback will be invoked for, if not provided callback will be invoked for all events\r\n   * @param callbackId - Identifier for the callback, used to locate and remove the callback when no longer required\r\n   */\n  addEventCallback(callback, eventTypes, callbackId) {\n    if (typeof window !== \"undefined\") {\n      const id = callbackId || createGuid();\n      if (this.eventCallbacks.has(id)) {\n        this.logger.error(\"Event callback with id: \".concat(id, \" is already registered. Please provide a unique id or remove the existing callback and try again.\"));\n        return null;\n      }\n      this.eventCallbacks.set(id, [callback, eventTypes || []]);\n      this.logger.verbose(\"Event callback registered with id: \".concat(id));\n      return id;\n    }\n    return null;\n  }\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n  removeEventCallback(callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(\"Event callback \".concat(callbackId, \" removed.\"));\n  }\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n  emitEvent(eventType, interactionType, payload, error) {\n    if (typeof window !== \"undefined\") {\n      const message = {\n        eventType: eventType,\n        interactionType: interactionType || null,\n        payload: payload || null,\n        error: error || null,\n        timestamp: Date.now()\n      };\n      this.eventCallbacks.forEach((_ref, callbackId) => {\n        let [callback, eventTypes] = _ref;\n        if (eventTypes.length === 0 || eventTypes.includes(eventType)) {\n          this.logger.verbose(\"Emitting event to callback \".concat(callbackId, \": \").concat(eventType));\n          callback.apply(null, [message]);\n        }\n      });\n    }\n  }\n}\nexport { EventHandler };","map":{"version":3,"names":["EventHandler","constructor","logger","eventCallbacks","Map","Logger","addEventCallback","callback","eventTypes","callbackId","window","id","createGuid","has","error","concat","set","verbose","removeEventCallback","delete","emitEvent","eventType","interactionType","payload","message","timestamp","Date","now","forEach","_ref","length","includes","apply"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-browser\\src\\event\\EventHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"@azure/msal-common/browser\";\nimport { InteractionType } from \"../utils/BrowserConstants.js\";\nimport {\n    EventCallbackFunction,\n    EventError,\n    EventMessage,\n    EventPayload,\n} from \"./EventMessage.js\";\nimport { EventType } from \"./EventType.js\";\nimport { createGuid } from \"../utils/BrowserUtils.js\";\n\nexport class EventHandler {\n    // Callback for subscribing to events\n    private eventCallbacks: Map<\n        string,\n        [EventCallbackFunction, Array<EventType>]\n    >;\n    private logger: Logger;\n\n    constructor(logger?: Logger) {\n        this.eventCallbacks = new Map();\n        this.logger = logger || new Logger({});\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback - callback to be invoked when an event is raised\n     * @param eventTypes - list of events that this callback will be invoked for, if not provided callback will be invoked for all events\n     * @param callbackId - Identifier for the callback, used to locate and remove the callback when no longer required\n     */\n    addEventCallback(\n        callback: EventCallbackFunction,\n        eventTypes?: Array<EventType>,\n        callbackId?: string\n    ): string | null {\n        if (typeof window !== \"undefined\") {\n            const id = callbackId || createGuid();\n            if (this.eventCallbacks.has(id)) {\n                this.logger.error(\n                    `Event callback with id: ${id} is already registered. Please provide a unique id or remove the existing callback and try again.`\n                );\n                return null;\n            }\n            this.eventCallbacks.set(id, [callback, eventTypes || []]);\n            this.logger.verbose(`Event callback registered with id: ${id}`);\n\n            return id;\n        }\n\n        return null;\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventCallbacks.delete(callbackId);\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\n    }\n\n    /**\n     * Emits events by calling callback with event message\n     * @param eventType\n     * @param interactionType\n     * @param payload\n     * @param error\n     */\n    emitEvent(\n        eventType: EventType,\n        interactionType?: InteractionType,\n        payload?: EventPayload,\n        error?: EventError\n    ): void {\n        if (typeof window !== \"undefined\") {\n            const message: EventMessage = {\n                eventType: eventType,\n                interactionType: interactionType || null,\n                payload: payload || null,\n                error: error || null,\n                timestamp: Date.now(),\n            };\n\n            this.eventCallbacks.forEach(\n                (\n                    [callback, eventTypes]: [\n                        EventCallbackFunction,\n                        Array<EventType>\n                    ],\n                    callbackId: string\n                ) => {\n                    if (\n                        eventTypes.length === 0 ||\n                        eventTypes.includes(eventType)\n                    ) {\n                        this.logger.verbose(\n                            `Emitting event to callback ${callbackId}: ${eventType}`\n                        );\n                        callback.apply(null, [message]);\n                    }\n                }\n            );\n        }\n    }\n}\n"],"mappings":";;;;;;AAAA;;;AAGG;MAaUA,YAAY;EAQrBC,YAAYC,MAAe;IACvB,IAAI,CAACC,cAAc,GAAG,IAAIC,GAAG,EAAE;IAC/B,IAAI,CAACF,MAAM,GAAGA,MAAM,IAAI,IAAIG,MAAM,CAAC,EAAE,CAAC;;EAG1C;;;;;AAKG;EACHC,gBAAgBA,CACZC,QAA+B,EAC/BC,UAA6B,EAC7BC,UAAmB;IAEnB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MAC/B,MAAMC,EAAE,GAAGF,UAAU,IAAIG,UAAU,EAAE;MACrC,IAAI,IAAI,CAACT,cAAc,CAACU,GAAG,CAACF,EAAE,CAAC,EAAE;QAC7B,IAAI,CAACT,MAAM,CAACY,KAAK,4BAAAC,MAAA,CACcJ,EAAE,sGAAmG,CACnI;QACD,OAAO,IAAI;MACd;MACD,IAAI,CAACR,cAAc,CAACa,GAAG,CAACL,EAAE,EAAE,CAACJ,QAAQ,EAAEC,UAAU,IAAI,EAAE,CAAC,CAAC;MACzD,IAAI,CAACN,MAAM,CAACe,OAAO,uCAAAF,MAAA,CAAuCJ,EAAE,CAAE,CAAC;MAE/D,OAAOA,EAAE;IACZ;IAED,OAAO,IAAI;;EAGf;;;AAGG;EACHO,mBAAmBA,CAACT,UAAkB;IAClC,IAAI,CAACN,cAAc,CAACgB,MAAM,CAACV,UAAU,CAAC;IACtC,IAAI,CAACP,MAAM,CAACe,OAAO,mBAAAF,MAAA,CAAmBN,UAAU,cAAW,CAAC;;EAGhE;;;;;;AAMG;EACHW,SAASA,CACLC,SAAoB,EACpBC,eAAiC,EACjCC,OAAsB,EACtBT,KAAkB;IAElB,IAAI,OAAOJ,MAAM,KAAK,WAAW,EAAE;MAC/B,MAAMc,OAAO,GAAiB;QAC1BH,SAAS,EAAEA,SAAS;QACpBC,eAAe,EAAEA,eAAe,IAAI,IAAI;QACxCC,OAAO,EAAEA,OAAO,IAAI,IAAI;QACxBT,KAAK,EAAEA,KAAK,IAAI,IAAI;QACpBW,SAAS,EAAEC,IAAI,CAACC,GAAG;OACtB;MAED,IAAI,CAACxB,cAAc,CAACyB,OAAO,CACvB,CAAAC,IAAA,EAKIpB,UAAkB,KAClB;QAAA,IALA,CAACF,QAAQ,EAAEC,UAAU,CAGpB,GAAAqB,IAAA;QAGD,IACIrB,UAAU,CAACsB,MAAM,KAAK,CAAC,IACvBtB,UAAU,CAACuB,QAAQ,CAACV,SAAS,CAAC,EAChC;UACE,IAAI,CAACnB,MAAM,CAACe,OAAO,+BAAAF,MAAA,CACeN,UAAU,QAAAM,MAAA,CAAKM,SAAS,CAAE,CAC3D;UACDd,QAAQ,CAACyB,KAAK,CAAC,IAAI,EAAE,CAACR,OAAO,CAAC,CAAC;QAClC;MACL,CAAC,CACJ;IACJ;;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}