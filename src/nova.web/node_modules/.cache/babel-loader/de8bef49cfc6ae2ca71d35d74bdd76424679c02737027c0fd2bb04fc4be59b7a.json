{"ast":null,"code":"/*! @azure/msal-browser v3.28.0 2024-12-12 */\n'use strict';\n\nimport _objectSpread from \"C:/temp/NovaApp/src/nova.web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { PerformanceEvents, invokeAsync, Constants, UrlString, AuthorizationCodeClient, ProtocolUtils } from '@azure/msal-common/browser';\nimport { BaseInteractionClient } from './BaseInteractionClient.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { getCurrentUri } from '../utils/BrowserUtils.mjs';\nimport { generatePkceCodes } from '../crypto/PkceGenerator.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\nimport { initializeBaseRequest } from '../request/RequestHelpers.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\nclass StandardInteractionClient extends BaseInteractionClient {\n  /**\r\n   * Generates an auth code request tied to the url request.\r\n   * @param request\r\n   */\n  async initializeAuthorizationCodeRequest(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.correlationId);\n    const generatedPkceParams = await invokeAsync(generatePkceCodes, PerformanceEvents.GeneratePkceCodes, this.logger, this.performanceClient, this.correlationId)(this.performanceClient, this.logger, this.correlationId);\n    const authCodeRequest = _objectSpread(_objectSpread({}, request), {}, {\n      redirectUri: request.redirectUri,\n      code: Constants.EMPTY_STRING,\n      codeVerifier: generatedPkceParams.verifier\n    });\n    request.codeChallenge = generatedPkceParams.challenge;\n    request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n    return authCodeRequest;\n  }\n  /**\r\n   * Initializer for the logout request.\r\n   * @param logoutRequest\r\n   */\n  initializeLogoutRequest(logoutRequest) {\n    this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);\n    const validLogoutRequest = _objectSpread({\n      correlationId: this.correlationId || createNewGuid()\n    }, logoutRequest);\n    /**\r\n     * Set logout_hint to be login_hint from ID Token Claims if present\r\n     * and logoutHint attribute wasn't manually set in logout request\r\n     */\n    if (logoutRequest) {\n      // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n      if (!logoutRequest.logoutHint) {\n        if (logoutRequest.account) {\n          const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n          if (logoutHint) {\n            this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n            validLogoutRequest.logoutHint = logoutHint;\n          }\n        } else {\n          this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n        }\n      } else {\n        this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n      }\n    } else {\n      this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n    }\n    /*\r\n     * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n     * Otherwise, use passed uri, config, or current page.\r\n     */\n    if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n      if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, getCurrentUri());\n      } else if (this.config.auth.postLogoutRedirectUri === null) {\n        this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n      } else if (this.config.auth.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, getCurrentUri());\n      } else {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(getCurrentUri(), getCurrentUri());\n      }\n    } else {\n      this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n    }\n    return validLogoutRequest;\n  }\n  /**\r\n   * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n   * logout_hint in end session request.\r\n   * @param account\r\n   */\n  getLogoutHintFromIdTokenClaims(account) {\n    const idTokenClaims = account.idTokenClaims;\n    if (idTokenClaims) {\n      if (idTokenClaims.login_hint) {\n        return idTokenClaims.login_hint;\n      } else {\n        this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n      }\n    } else {\n      this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n    }\n    return null;\n  }\n  /**\r\n   * Creates an Authorization Code Client with the given authority, or the default authority.\r\n   * @param params {\r\n   *         serverTelemetryManager: ServerTelemetryManager;\r\n   *         authorityUrl?: string;\r\n   *         requestAzureCloudOptions?: AzureCloudOptions;\r\n   *         requestExtraQueryParameters?: StringDict;\r\n   *         account?: AccountInfo;\r\n   *        }\r\n   */\n  async createAuthCodeClient(params) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\n    // Create auth module.\n    const clientConfig = await invokeAsync(this.getClientConfiguration.bind(this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(params);\n    return new AuthorizationCodeClient(clientConfig, this.performanceClient);\n  }\n  /**\r\n   * Creates a Client Configuration object with the given request authority, or the default authority.\r\n   * @param params {\r\n   *         serverTelemetryManager: ServerTelemetryManager;\r\n   *         requestAuthority?: string;\r\n   *         requestAzureCloudOptions?: AzureCloudOptions;\r\n   *         requestExtraQueryParameters?: boolean;\r\n   *         account?: AccountInfo;\r\n   *        }\r\n   */\n  async getClientConfiguration(params) {\n    const {\n      serverTelemetryManager,\n      requestAuthority,\n      requestAzureCloudOptions,\n      requestExtraQueryParameters,\n      account\n    } = params;\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n    const discoveredAuthority = await invokeAsync(this.getDiscoveredAuthority.bind(this), PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, this.correlationId)({\n      requestAuthority,\n      requestAzureCloudOptions,\n      requestExtraQueryParameters,\n      account\n    });\n    const logger = this.config.system.loggerOptions;\n    return {\n      authOptions: {\n        clientId: this.config.auth.clientId,\n        authority: discoveredAuthority,\n        clientCapabilities: this.config.auth.clientCapabilities,\n        redirectUri: this.config.auth.redirectUri\n      },\n      systemOptions: {\n        tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n        preventCorsPreflight: true\n      },\n      loggerOptions: {\n        loggerCallback: logger.loggerCallback,\n        piiLoggingEnabled: logger.piiLoggingEnabled,\n        logLevel: logger.logLevel,\n        correlationId: this.correlationId\n      },\n      cacheOptions: {\n        claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled\n      },\n      cryptoInterface: this.browserCrypto,\n      networkInterface: this.networkClient,\n      storageInterface: this.browserStorage,\n      serverTelemetryManager: serverTelemetryManager,\n      libraryInfo: {\n        sku: BrowserConstants.MSAL_SKU,\n        version: version,\n        cpu: Constants.EMPTY_STRING,\n        os: Constants.EMPTY_STRING\n      },\n      telemetry: this.config.telemetry\n    };\n  }\n  /**\r\n   * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n   * @param request\r\n   * @param interactionType\r\n   */\n  async initializeAuthorizationRequest(request, interactionType) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\n    const redirectUri = this.getRedirectUri(request.redirectUri);\n    const browserState = {\n      interactionType: interactionType\n    };\n    const state = ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || Constants.EMPTY_STRING, browserState);\n    const baseRequest = await invokeAsync(initializeBaseRequest, PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, this.correlationId)(_objectSpread(_objectSpread({}, request), {}, {\n      correlationId: this.correlationId\n    }), this.config, this.performanceClient, this.logger);\n    const validatedRequest = _objectSpread(_objectSpread({}, baseRequest), {}, {\n      redirectUri: redirectUri,\n      state: state,\n      nonce: request.nonce || createNewGuid(),\n      responseMode: this.config.auth.OIDCOptions.serverResponseType\n    });\n    // Skip active account lookup if either login hint or session id is set\n    if (request.loginHint || request.sid) {\n      return validatedRequest;\n    }\n    const account = request.account || this.browserStorage.getActiveAccount();\n    if (account) {\n      this.logger.verbose(\"Setting validated request account\", this.correlationId);\n      this.logger.verbosePii(\"Setting validated request account: \".concat(account.homeAccountId), this.correlationId);\n      validatedRequest.account = account;\n    }\n    // Check for ADAL/MSAL v1 SSO\n    if (!validatedRequest.loginHint && !account) {\n      const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n      if (legacyLoginHint) {\n        validatedRequest.loginHint = legacyLoginHint;\n      }\n    }\n    return validatedRequest;\n  }\n}\nexport { StandardInteractionClient };","map":{"version":3,"names":["StandardInteractionClient","BaseInteractionClient","initializeAuthorizationCodeRequest","request","performanceClient","addQueueMeasurement","PerformanceEvents","StandardInteractionClientInitializeAuthorizationCodeRequest","correlationId","generatedPkceParams","invokeAsync","generatePkceCodes","GeneratePkceCodes","logger","authCodeRequest","_objectSpread","redirectUri","code","Constants","EMPTY_STRING","codeVerifier","verifier","codeChallenge","challenge","codeChallengeMethod","S256_CODE_CHALLENGE_METHOD","initializeLogoutRequest","logoutRequest","verbose","validLogoutRequest","createNewGuid","logoutHint","account","getLogoutHintFromIdTokenClaims","postLogoutRedirectUri","UrlString","getAbsoluteUrl","getCurrentUri","config","auth","idTokenClaims","login_hint","createAuthCodeClient","params","StandardInteractionClientCreateAuthCodeClient","clientConfig","getClientConfiguration","bind","StandardInteractionClientGetClientConfiguration","AuthorizationCodeClient","serverTelemetryManager","requestAuthority","requestAzureCloudOptions","requestExtraQueryParameters","discoveredAuthority","getDiscoveredAuthority","StandardInteractionClientGetDiscoveredAuthority","system","loggerOptions","authOptions","clientId","authority","clientCapabilities","systemOptions","tokenRenewalOffsetSeconds","preventCorsPreflight","loggerCallback","piiLoggingEnabled","logLevel","cacheOptions","claimsBasedCachingEnabled","cache","cryptoInterface","browserCrypto","networkInterface","networkClient","storageInterface","browserStorage","libraryInfo","sku","BrowserConstants","MSAL_SKU","version","cpu","os","telemetry","initializeAuthorizationRequest","interactionType","StandardInteractionClientInitializeAuthorizationRequest","getRedirectUri","browserState","state","ProtocolUtils","setRequestState","baseRequest","initializeBaseRequest","InitializeBaseRequest","validatedRequest","nonce","responseMode","OIDCOptions","serverResponseType","loginHint","sid","getActiveAccount","verbosePii","concat","homeAccountId","legacyLoginHint","getLegacyLoginHint"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\StandardInteractionClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ServerTelemetryManager,\n    CommonAuthorizationCodeRequest,\n    Constants,\n    AuthorizationCodeClient,\n    ClientConfiguration,\n    UrlString,\n    CommonEndSessionRequest,\n    ProtocolUtils,\n    ResponseMode,\n    IdTokenClaims,\n    AccountInfo,\n    AzureCloudOptions,\n    PerformanceEvents,\n    invokeAsync,\n    BaseAuthRequest,\n    StringDict,\n} from \"@azure/msal-common/browser\";\nimport { BaseInteractionClient } from \"./BaseInteractionClient.js\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest.js\";\nimport {\n    BrowserConstants,\n    InteractionType,\n} from \"../utils/BrowserConstants.js\";\nimport { version } from \"../packageMetadata.js\";\nimport { BrowserStateObject } from \"../utils/BrowserProtocolUtils.js\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest.js\";\nimport * as BrowserUtils from \"../utils/BrowserUtils.js\";\nimport { RedirectRequest } from \"../request/RedirectRequest.js\";\nimport { PopupRequest } from \"../request/PopupRequest.js\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest.js\";\nimport { generatePkceCodes } from \"../crypto/PkceGenerator.js\";\nimport { createNewGuid } from \"../crypto/BrowserCrypto.js\";\nimport { initializeBaseRequest } from \"../request/RequestHelpers.js\";\n\n/**\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\n */\nexport abstract class StandardInteractionClient extends BaseInteractionClient {\n    /**\n     * Generates an auth code request tied to the url request.\n     * @param request\n     */\n    protected async initializeAuthorizationCodeRequest(\n        request: AuthorizationUrlRequest\n    ): Promise<CommonAuthorizationCodeRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n            this.correlationId\n        );\n        const generatedPkceParams = await invokeAsync(\n            generatePkceCodes,\n            PerformanceEvents.GeneratePkceCodes,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(this.performanceClient, this.logger, this.correlationId);\n\n        const authCodeRequest: CommonAuthorizationCodeRequest = {\n            ...request,\n            redirectUri: request.redirectUri,\n            code: Constants.EMPTY_STRING,\n            codeVerifier: generatedPkceParams.verifier,\n        };\n\n        request.codeChallenge = generatedPkceParams.challenge;\n        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n\n        return authCodeRequest;\n    }\n\n    /**\n     * Initializer for the logout request.\n     * @param logoutRequest\n     */\n    protected initializeLogoutRequest(\n        logoutRequest?: EndSessionRequest\n    ): CommonEndSessionRequest {\n        this.logger.verbose(\n            \"initializeLogoutRequest called\",\n            logoutRequest?.correlationId\n        );\n\n        const validLogoutRequest: CommonEndSessionRequest = {\n            correlationId: this.correlationId || createNewGuid(),\n            ...logoutRequest,\n        };\n\n        /**\n         * Set logout_hint to be login_hint from ID Token Claims if present\n         * and logoutHint attribute wasn't manually set in logout request\n         */\n        if (logoutRequest) {\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n            if (!logoutRequest.logoutHint) {\n                if (logoutRequest.account) {\n                    const logoutHint = this.getLogoutHintFromIdTokenClaims(\n                        logoutRequest.account\n                    );\n                    if (logoutHint) {\n                        this.logger.verbose(\n                            \"Setting logoutHint to login_hint ID Token Claim value for the account provided\"\n                        );\n                        validLogoutRequest.logoutHint = logoutHint;\n                    }\n                } else {\n                    this.logger.verbose(\n                        \"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\"\n                    );\n                }\n            } else {\n                this.logger.verbose(\n                    \"logoutHint has already been set in logoutRequest\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"logoutHint will not be set since no logout request was configured\"\n            );\n        }\n\n        /*\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\n         * Otherwise, use passed uri, config, or current page.\n         */\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to uri set on logout request\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        logoutRequest.postLogoutRedirectUri,\n                        BrowserUtils.getCurrentUri()\n                    );\n            } else if (this.config.auth.postLogoutRedirectUri === null) {\n                this.logger.verbose(\n                    \"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\",\n                    validLogoutRequest.correlationId\n                );\n            } else if (this.config.auth.postLogoutRedirectUri) {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to configured uri\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        this.config.auth.postLogoutRedirectUri,\n                        BrowserUtils.getCurrentUri()\n                    );\n            } else {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to current page\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        BrowserUtils.getCurrentUri(),\n                        BrowserUtils.getCurrentUri()\n                    );\n            }\n        } else {\n            this.logger.verbose(\n                \"postLogoutRedirectUri passed as null, not setting post logout redirect uri\",\n                validLogoutRequest.correlationId\n            );\n        }\n\n        return validLogoutRequest;\n    }\n\n    /**\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\n     * logout_hint in end session request.\n     * @param account\n     */\n    protected getLogoutHintFromIdTokenClaims(\n        account: AccountInfo\n    ): string | null {\n        const idTokenClaims: IdTokenClaims | undefined = account.idTokenClaims;\n        if (idTokenClaims) {\n            if (idTokenClaims.login_hint) {\n                return idTokenClaims.login_hint;\n            } else {\n                this.logger.verbose(\n                    \"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\"\n            );\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates an Authorization Code Client with the given authority, or the default authority.\n     * @param params {\n     *         serverTelemetryManager: ServerTelemetryManager;\n     *         authorityUrl?: string;\n     *         requestAzureCloudOptions?: AzureCloudOptions;\n     *         requestExtraQueryParameters?: StringDict;\n     *         account?: AccountInfo;\n     *        }\n     */\n    protected async createAuthCodeClient(params: {\n        serverTelemetryManager: ServerTelemetryManager;\n        requestAuthority?: string;\n        requestAzureCloudOptions?: AzureCloudOptions;\n        requestExtraQueryParameters?: StringDict;\n        account?: AccountInfo;\n    }): Promise<AuthorizationCodeClient> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n            this.correlationId\n        );\n        // Create auth module.\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(params);\n\n        return new AuthorizationCodeClient(\n            clientConfig,\n            this.performanceClient\n        );\n    }\n\n    /**\n     * Creates a Client Configuration object with the given request authority, or the default authority.\n     * @param params {\n     *         serverTelemetryManager: ServerTelemetryManager;\n     *         requestAuthority?: string;\n     *         requestAzureCloudOptions?: AzureCloudOptions;\n     *         requestExtraQueryParameters?: boolean;\n     *         account?: AccountInfo;\n     *        }\n     */\n    protected async getClientConfiguration(params: {\n        serverTelemetryManager: ServerTelemetryManager;\n        requestAuthority?: string;\n        requestAzureCloudOptions?: AzureCloudOptions;\n        requestExtraQueryParameters?: StringDict;\n        account?: AccountInfo;\n    }): Promise<ClientConfiguration> {\n        const {\n            serverTelemetryManager,\n            requestAuthority,\n            requestAzureCloudOptions,\n            requestExtraQueryParameters,\n            account,\n        } = params;\n\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.correlationId\n        );\n        const discoveredAuthority = await invokeAsync(\n            this.getDiscoveredAuthority.bind(this),\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )({\n            requestAuthority,\n            requestAzureCloudOptions,\n            requestExtraQueryParameters,\n            account,\n        });\n        const logger = this.config.system.loggerOptions;\n\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities,\n                redirectUri: this.config.auth.redirectUri,\n            },\n            systemOptions: {\n                tokenRenewalOffsetSeconds:\n                    this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true,\n            },\n            loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId,\n            },\n            cacheOptions: {\n                claimsBasedCachingEnabled:\n                    this.config.cache.claimsBasedCachingEnabled,\n            },\n            cryptoInterface: this.browserCrypto,\n            networkInterface: this.networkClient,\n            storageInterface: this.browserStorage,\n            serverTelemetryManager: serverTelemetryManager,\n            libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: Constants.EMPTY_STRING,\n                os: Constants.EMPTY_STRING,\n            },\n            telemetry: this.config.telemetry,\n        };\n    }\n\n    /**\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\n     * @param request\n     * @param interactionType\n     */\n    protected async initializeAuthorizationRequest(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest,\n        interactionType: InteractionType\n    ): Promise<AuthorizationUrlRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.correlationId\n        );\n\n        const redirectUri = this.getRedirectUri(request.redirectUri);\n        const browserState: BrowserStateObject = {\n            interactionType: interactionType,\n        };\n        const state = ProtocolUtils.setRequestState(\n            this.browserCrypto,\n            (request && request.state) || Constants.EMPTY_STRING,\n            browserState\n        );\n\n        const baseRequest: BaseAuthRequest = await invokeAsync(\n            initializeBaseRequest,\n            PerformanceEvents.InitializeBaseRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            { ...request, correlationId: this.correlationId },\n            this.config,\n            this.performanceClient,\n            this.logger\n        );\n\n        const validatedRequest: AuthorizationUrlRequest = {\n            ...baseRequest,\n            redirectUri: redirectUri,\n            state: state,\n            nonce: request.nonce || createNewGuid(),\n            responseMode: this.config.auth.OIDCOptions\n                .serverResponseType as ResponseMode,\n        };\n\n        // Skip active account lookup if either login hint or session id is set\n        if (request.loginHint || request.sid) {\n            return validatedRequest;\n        }\n\n        const account =\n            request.account || this.browserStorage.getActiveAccount();\n        if (account) {\n            this.logger.verbose(\n                \"Setting validated request account\",\n                this.correlationId\n            );\n            this.logger.verbosePii(\n                `Setting validated request account: ${account.homeAccountId}`,\n                this.correlationId\n            );\n            validatedRequest.account = account;\n        }\n\n        // Check for ADAL/MSAL v1 SSO\n        if (!validatedRequest.loginHint && !account) {\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n            if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n            }\n        }\n\n        return validatedRequest;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}