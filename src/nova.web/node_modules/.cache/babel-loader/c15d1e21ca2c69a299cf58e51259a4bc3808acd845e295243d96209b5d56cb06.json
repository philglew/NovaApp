{"ast":null,"code":"/*! @azure/msal-common v14.16.0 2024-11-05 */\n'use strict';\n\nimport _objectSpread from \"C:/temp/NovaApp/src/nova.web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { GrantType, AuthenticationScheme, HeaderNames, Errors } from '../utils/Constants.mjs';\nimport { CLIENT_ID } from '../constants/AADServerParamKeys.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { nowSeconds, isTokenExpired } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { createInteractionRequiredAuthError, InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync, invoke } from '../utils/FunctionWrappers.mjs';\nimport { generateCredentialKey } from '../cache/utils/CacheHelpers.mjs';\nimport { getClientAssertion } from '../utils/ClientAssertionUtils.mjs';\nimport { tokenRequestEmpty, missingSshJwk } from '../error/ClientConfigurationErrorCodes.mjs';\nimport { noAccountInSilentRequest } from '../error/ClientAuthErrorCodes.mjs';\nimport { noTokensFound, refreshTokenExpired, badToken } from '../error/InteractionRequiredAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\n/**\r\n * OAuth2.0 refresh token client\r\n * @internal\r\n */\nclass RefreshTokenClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n  }\n  async acquireToken(request) {\n    var _this$performanceClie, _response$headers;\n    (_this$performanceClie = this.performanceClient) === null || _this$performanceClie === void 0 || _this$performanceClie.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n    const reqTimestamp = nowSeconds();\n    const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.RefreshTokenClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(request, this.authority);\n    // Retrieve requestId from response headers\n    const requestId = (_response$headers = response.headers) === null || _response$headers === void 0 ? void 0 : _response$headers[HeaderNames.X_MS_REQUEST_ID];\n    const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n    responseHandler.validateTokenResponse(response.body);\n    return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);\n  }\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n  async acquireTokenByRefreshToken(request) {\n    var _this$performanceClie2;\n    // Cannot renew token if no request object is given.\n    if (!request) {\n      throw createClientConfigurationError(tokenRequestEmpty);\n    }\n    (_this$performanceClie2 = this.performanceClient) === null || _this$performanceClie2 === void 0 || _this$performanceClie2.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n    // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n    if (!request.account) {\n      throw createClientAuthError(noAccountInSilentRequest);\n    }\n    // try checking if FOCI is enabled for the given application\n    const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\n    // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n    if (isFOCI) {\n      try {\n        return await invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, true);\n      } catch (e) {\n        const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === noTokensFound;\n        const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n        // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n        if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n          return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n          // throw in all other cases\n        } else {\n          throw e;\n        }\n      }\n    }\n    // fall back to application refresh token acquisition\n    return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n  }\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n  async acquireTokenWithCachedRefreshToken(request, foci) {\n    var _this$performanceClie3;\n    (_this$performanceClie3 = this.performanceClient) === null || _this$performanceClie3 === void 0 || _this$performanceClie3.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n    // fetches family RT or application RT based on FOCI value\n    const refreshToken = invoke(this.cacheManager.getRefreshToken.bind(this.cacheManager), PerformanceEvents.CacheManagerGetRefreshToken, this.logger, this.performanceClient, request.correlationId)(request.account, foci, undefined, this.performanceClient, request.correlationId);\n    if (!refreshToken) {\n      throw createInteractionRequiredAuthError(noTokensFound);\n    }\n    if (refreshToken.expiresOn && isTokenExpired(refreshToken.expiresOn, request.refreshTokenExpirationOffsetSeconds || DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS)) {\n      throw createInteractionRequiredAuthError(refreshTokenExpired);\n    }\n    // attach cached RT size to the current measurement\n    const refreshTokenRequest = _objectSpread(_objectSpread({}, request), {}, {\n      refreshToken: refreshToken.secret,\n      authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n      ccsCredential: {\n        credential: request.account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      }\n    });\n    try {\n      return await invokeAsync(this.acquireToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(refreshTokenRequest);\n    } catch (e) {\n      if (e instanceof InteractionRequiredAuthError && e.subError === badToken) {\n        // Remove bad refresh token from cache\n        this.logger.verbose(\"acquireTokenWithRefreshToken: bad refresh token, removing from cache\");\n        const badRefreshTokenKey = generateCredentialKey(refreshToken);\n        this.cacheManager.removeRefreshToken(badRefreshTokenKey);\n      }\n      throw e;\n    }\n  }\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n  async executeTokenRequest(request, authority) {\n    var _this$performanceClie4, _request$tokenBodyPar;\n    (_this$performanceClie4 = this.performanceClient) === null || _this$performanceClie4 === void 0 || _this$performanceClie4.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n    const queryParametersString = this.createTokenQueryParameters(request);\n    const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n    const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n    const headers = this.createTokenRequestHeaders(request.ccsCredential);\n    const thumbprint = {\n      clientId: ((_request$tokenBodyPar = request.tokenBodyParameters) === null || _request$tokenBodyPar === void 0 ? void 0 : _request$tokenBodyPar.clientId) || this.config.authOptions.clientId,\n      authority: authority.canonicalAuthority,\n      scopes: request.scopes,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint);\n  }\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n  async createTokenRequestBody(request) {\n    var _this$performanceClie5, _request$tokenBodyPar2, _this$config$authOpti;\n    (_this$performanceClie5 = this.performanceClient) === null || _this$performanceClie5 === void 0 || _this$performanceClie5.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n    const correlationId = request.correlationId;\n    const parameterBuilder = new RequestParameterBuilder(correlationId, this.performanceClient);\n    parameterBuilder.addClientId(request.embeddedClientId || ((_request$tokenBodyPar2 = request.tokenBodyParameters) === null || _request$tokenBodyPar2 === void 0 ? void 0 : _request$tokenBodyPar2[CLIENT_ID]) || this.config.authOptions.clientId);\n    if (request.redirectUri) {\n      parameterBuilder.addRedirectUri(request.redirectUri);\n    }\n    parameterBuilder.addScopes(request.scopes, true, (_this$config$authOpti = this.config.authOptions.authority.options.OIDCOptions) === null || _this$config$authOpti === void 0 ? void 0 : _this$config$authOpti.defaultScopes);\n    parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    parameterBuilder.addRefreshToken(request.refreshToken);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      const clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (request.authenticationScheme === AuthenticationScheme.POP) {\n      const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n      let reqCnfData;\n      if (!request.popKid) {\n        const generatedReqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n        reqCnfData = generatedReqCnfData.reqCnfString;\n      } else {\n        reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n      }\n      // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n      parameterBuilder.addPopToken(reqCnfData);\n    } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n      if (request.sshJwk) {\n        parameterBuilder.addSshJwk(request.sshJwk);\n      } else {\n        throw createClientConfigurationError(missingSshJwk);\n      }\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n      switch (request.ccsCredential.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n          break;\n      }\n    }\n    if (request.embeddedClientId) {\n      parameterBuilder.addBrokerParameters({\n        brokerClientId: this.config.authOptions.clientId,\n        brokerRedirectUri: this.config.authOptions.redirectUri\n      });\n    }\n    if (request.tokenBodyParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n    }\n    return parameterBuilder.createQueryString();\n  }\n}\nexport { RefreshTokenClient };","map":{"version":3,"names":["DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS","RefreshTokenClient","BaseClient","constructor","configuration","performanceClient","acquireToken","request","_this$performanceClie","_response$headers","addQueueMeasurement","PerformanceEvents","RefreshTokenClientAcquireToken","correlationId","reqTimestamp","nowSeconds","response","invokeAsync","executeTokenRequest","bind","RefreshTokenClientExecuteTokenRequest","logger","authority","requestId","headers","HeaderNames","X_MS_REQUEST_ID","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","HandleServerTokenResponse","undefined","forceCache","acquireTokenByRefreshToken","_this$performanceClie2","createClientConfigurationError","tokenRequestEmpty","RefreshTokenClientAcquireTokenByRefreshToken","account","createClientAuthError","noAccountInSilentRequest","isFOCI","isAppMetadataFOCI","environment","acquireTokenWithCachedRefreshToken","RefreshTokenClientAcquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","InteractionRequiredAuthError","errorCode","noTokensFound","clientMismatchErrorWithFamilyRT","ServerError","Errors","INVALID_GRANT_ERROR","subError","CLIENT_MISMATCH_ERROR","foci","_this$performanceClie3","refreshToken","invoke","getRefreshToken","CacheManagerGetRefreshToken","createInteractionRequiredAuthError","expiresOn","isTokenExpired","refreshTokenExpirationOffsetSeconds","refreshTokenExpired","refreshTokenRequest","_objectSpread","secret","authenticationScheme","AuthenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","CcsCredentialType","HOME_ACCOUNT_ID","badToken","verbose","badRefreshTokenKey","generateCredentialKey","removeRefreshToken","_this$performanceClie4","_request$tokenBodyPar","queryParametersString","createTokenQueryParameters","endpoint","UrlString","appendQueryString","tokenEndpoint","requestBody","createTokenRequestBody","RefreshTokenClientCreateTokenRequestBody","createTokenRequestHeaders","thumbprint","tokenBodyParameters","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","RefreshTokenClientExecutePostToTokenEndpoint","_this$performanceClie5","_request$tokenBodyPar2","_this$config$authOpti","parameterBuilder","RequestParameterBuilder","addClientId","embeddedClientId","CLIENT_ID","redirectUri","addRedirectUri","addScopes","options","OIDCOptions","defaultScopes","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","isOidcProtocolMode","addServerTelemetry","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","getClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerator","reqCnfData","popKid","generatedReqCnfData","generateCnf","PopTokenGenerateCnf","reqCnfString","encodeKid","addPopToken","SSH","sshJwk","addSshJwk","missingSshJwk","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","clientInfo","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","addBrokerParameters","brokerClientId","brokerRedirectUri","addExtraQueryParameters","createQueryString"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-common\\src\\client\\RefreshTokenClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ClientConfiguration,\n    isOidcProtocolMode,\n} from \"../config/ClientConfiguration.js\";\nimport { BaseClient } from \"./BaseClient.js\";\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest.js\";\nimport { Authority } from \"../authority/Authority.js\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse.js\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder.js\";\nimport {\n    GrantType,\n    AuthenticationScheme,\n    Errors,\n    HeaderNames,\n} from \"../utils/Constants.js\";\nimport * as AADServerParamKeys from \"../constants/AADServerParamKeys.js\";\nimport { ResponseHandler } from \"../response/ResponseHandler.js\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator.js\";\nimport { StringUtils } from \"../utils/StringUtils.js\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint.js\";\nimport { NetworkResponse } from \"../network/NetworkResponse.js\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest.js\";\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError.js\";\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../error/ClientAuthError.js\";\nimport { ServerError } from \"../error/ServerError.js\";\nimport * as TimeUtils from \"../utils/TimeUtils.js\";\nimport { UrlString } from \"../url/UrlString.js\";\nimport { CcsCredentialType } from \"../account/CcsCredential.js\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo.js\";\nimport {\n    InteractionRequiredAuthError,\n    InteractionRequiredAuthErrorCodes,\n    createInteractionRequiredAuthError,\n} from \"../error/InteractionRequiredAuthError.js\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent.js\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient.js\";\nimport { invoke, invokeAsync } from \"../utils/FunctionWrappers.js\";\nimport { generateCredentialKey } from \"../cache/utils/CacheHelpers.js\";\nimport { ClientAssertion } from \"../account/ClientCredentials.js\";\nimport { getClientAssertion } from \"../utils/ClientAssertionUtils.js\";\n\nconst DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\n\n/**\n * OAuth2.0 refresh token client\n * @internal\n */\nexport class RefreshTokenClient extends BaseClient {\n    constructor(\n        configuration: ClientConfiguration,\n        performanceClient?: IPerformanceClient\n    ) {\n        super(configuration, performanceClient);\n    }\n    public async acquireToken(\n        request: CommonRefreshTokenRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RefreshTokenClientAcquireToken,\n            request.correlationId\n        );\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await invokeAsync(\n            this.executeTokenRequest.bind(this),\n            PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, this.authority);\n\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n        responseHandler.validateTokenResponse(response.body);\n\n        return invokeAsync(\n            responseHandler.handleServerTokenResponse.bind(responseHandler),\n            PerformanceEvents.HandleServerTokenResponse,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            undefined,\n            undefined,\n            true,\n            request.forceCache,\n            requestId\n        );\n    }\n\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    public async acquireTokenByRefreshToken(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.tokenRequestEmpty\n            );\n        }\n\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n            request.correlationId\n        );\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.noAccountInSilentRequest\n            );\n        }\n\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(\n            request.account.environment\n        );\n\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return await invokeAsync(\n                    this.acquireTokenWithCachedRefreshToken.bind(this),\n                    PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n                    this.logger,\n                    this.performanceClient,\n                    request.correlationId\n                )(request, true);\n            } catch (e) {\n                const noFamilyRTInCache =\n                    e instanceof InteractionRequiredAuthError &&\n                    e.errorCode ===\n                        InteractionRequiredAuthErrorCodes.noTokensFound;\n                const clientMismatchErrorWithFamilyRT =\n                    e instanceof ServerError &&\n                    e.errorCode === Errors.INVALID_GRANT_ERROR &&\n                    e.subError === Errors.CLIENT_MISMATCH_ERROR;\n\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return invokeAsync(\n                        this.acquireTokenWithCachedRefreshToken.bind(this),\n                        PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n                        this.logger,\n                        this.performanceClient,\n                        request.correlationId\n                    )(request, false);\n                    // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n        // fall back to application refresh token acquisition\n        return invokeAsync(\n            this.acquireTokenWithCachedRefreshToken.bind(this),\n            PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, false);\n    }\n\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    private async acquireTokenWithCachedRefreshToken(\n        request: CommonSilentFlowRequest,\n        foci: boolean\n    ) {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n            request.correlationId\n        );\n\n        // fetches family RT or application RT based on FOCI value\n        const refreshToken = invoke(\n            this.cacheManager.getRefreshToken.bind(this.cacheManager),\n            PerformanceEvents.CacheManagerGetRefreshToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(\n            request.account,\n            foci,\n            undefined,\n            this.performanceClient,\n            request.correlationId\n        );\n\n        if (!refreshToken) {\n            throw createInteractionRequiredAuthError(\n                InteractionRequiredAuthErrorCodes.noTokensFound\n            );\n        }\n\n        if (\n            refreshToken.expiresOn &&\n            TimeUtils.isTokenExpired(\n                refreshToken.expiresOn,\n                request.refreshTokenExpirationOffsetSeconds ||\n                    DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS\n            )\n        ) {\n            throw createInteractionRequiredAuthError(\n                InteractionRequiredAuthErrorCodes.refreshTokenExpired\n            );\n        }\n        // attach cached RT size to the current measurement\n\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\n            },\n        };\n\n        try {\n            return await invokeAsync(\n                this.acquireToken.bind(this),\n                PerformanceEvents.RefreshTokenClientAcquireToken,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(refreshTokenRequest);\n        } catch (e) {\n            if (\n                e instanceof InteractionRequiredAuthError &&\n                e.subError === InteractionRequiredAuthErrorCodes.badToken\n            ) {\n                // Remove bad refresh token from cache\n                this.logger.verbose(\n                    \"acquireTokenWithRefreshToken: bad refresh token, removing from cache\"\n                );\n                const badRefreshTokenKey = generateCredentialKey(refreshToken);\n                this.cacheManager.removeRefreshToken(badRefreshTokenKey);\n            }\n\n            throw e;\n        }\n    }\n\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(\n        request: CommonRefreshTokenRequest,\n        authority: Authority\n    ): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\n            request.correlationId\n        );\n\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(\n            authority.tokenEndpoint,\n            queryParametersString\n        );\n\n        const requestBody = await invokeAsync(\n            this.createTokenRequestBody.bind(this),\n            PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders(\n            request.ccsCredential\n        );\n        const thumbprint: RequestThumbprint = {\n            clientId:\n                request.tokenBodyParameters?.clientId ||\n                this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n\n        return invokeAsync(\n            this.executePostToTokenEndpoint.bind(this),\n            PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(\n            endpoint,\n            requestBody,\n            headers,\n            thumbprint,\n            request.correlationId,\n            PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint\n        );\n    }\n\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    private async createTokenRequestBody(\n        request: CommonRefreshTokenRequest\n    ): Promise<string> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\n            request.correlationId\n        );\n\n        const correlationId = request.correlationId;\n        const parameterBuilder = new RequestParameterBuilder(\n            correlationId,\n            this.performanceClient\n        );\n\n        parameterBuilder.addClientId(\n            request.embeddedClientId ||\n                request.tokenBodyParameters?.[AADServerParamKeys.CLIENT_ID] ||\n                this.config.authOptions.clientId\n        );\n\n        if (request.redirectUri) {\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n\n        parameterBuilder.addScopes(\n            request.scopes,\n            true,\n            this.config.authOptions.authority.options.OIDCOptions?.defaultScopes\n        );\n\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(\n            this.config.telemetry.application\n        );\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        parameterBuilder.addRefreshToken(request.refreshToken);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(\n                this.config.clientCredentials.clientSecret\n            );\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion: ClientAssertion =\n                this.config.clientCredentials.clientAssertion;\n\n            parameterBuilder.addClientAssertion(\n                await getClientAssertion(\n                    clientAssertion.assertion,\n                    this.config.authOptions.clientId,\n                    request.resourceRequestUri\n                )\n            );\n            parameterBuilder.addClientAssertionType(\n                clientAssertion.assertionType\n            );\n        }\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(\n                this.cryptoUtils,\n                this.performanceClient\n            );\n\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await invokeAsync(\n                    popTokenGenerator.generateCnf.bind(popTokenGenerator),\n                    PerformanceEvents.PopTokenGenerateCnf,\n                    this.logger,\n                    this.performanceClient,\n                    request.correlationId\n                )(request, this.logger);\n\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n            }\n\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.missingSshJwk\n                );\n            }\n        }\n\n        if (\n            !StringUtils.isEmptyObj(request.claims) ||\n            (this.config.authOptions.clientCapabilities &&\n                this.config.authOptions.clientCapabilities.length > 0)\n        ) {\n            parameterBuilder.addClaims(\n                request.claims,\n                this.config.authOptions.clientCapabilities\n            );\n        }\n\n        if (\n            this.config.systemOptions.preventCorsPreflight &&\n            request.ccsCredential\n        ) {\n            switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(\n                            request.ccsCredential.credential\n                        );\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\n                            \"Could not parse home account ID for CCS Header: \" +\n                                e\n                        );\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(\n                        request.ccsCredential.credential\n                    );\n                    break;\n            }\n        }\n\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri,\n            });\n        }\n\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(\n                request.tokenBodyParameters\n            );\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}