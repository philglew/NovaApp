{"ast":null,"code":"/*! @azure/msal-browser v3.28.0 2024-12-12 */\n'use strict';\n\nimport _objectSpread from \"C:/temp/NovaApp/src/nova.web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common/browser';\nimport { base64Encode, urlEncode, urlEncodeArr } from '../encode/Base64Encode.mjs';\nimport { base64Decode } from '../encode/Base64Decode.mjs';\nimport { validateCryptoAvailable, createNewGuid, generateKeyPair, exportJwk, importJwk, sign, hashString } from './BrowserCrypto.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { AsyncMemoryStorage } from '../cache/AsyncMemoryStorage.mjs';\nimport { cryptoKeyNotFound } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\nclass CryptoOps {\n  constructor(logger, performanceClient) {\n    this.logger = logger;\n    // Browser crypto needs to be validated first before any other classes can be set.\n    validateCryptoAvailable();\n    this.cache = new AsyncMemoryStorage(this.logger);\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n  createNewGuid() {\n    return createNewGuid();\n  }\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n  base64Encode(input) {\n    return base64Encode(input);\n  }\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n  base64Decode(input) {\n    return base64Decode(input);\n  }\n  /**\r\n   * Encodes input string to base64 URL safe string.\r\n   * @param input\r\n   */\n  base64UrlEncode(input) {\n    return urlEncode(input);\n  }\n  /**\r\n   * Stringifies and base64Url encodes input public key\r\n   * @param inputKid\r\n   * @returns Base64Url encoded public key\r\n   */\n  encodeKid(inputKid) {\n    return this.base64UrlEncode(JSON.stringify({\n      kid: inputKid\n    }));\n  }\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n  async getPublicKeyThumbprint(request) {\n    var _this$performanceClie;\n    const publicKeyThumbMeasurement = (_this$performanceClie = this.performanceClient) === null || _this$performanceClie === void 0 ? void 0 : _this$performanceClie.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n    // Generate Keypair\n    const keyPair = await generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n    // Generate Thumbprint for Public Key\n    const publicKeyJwk = await exportJwk(keyPair.publicKey);\n    const pubKeyThumprintObj = {\n      e: publicKeyJwk.e,\n      kty: publicKeyJwk.kty,\n      n: publicKeyJwk.n\n    };\n    const publicJwkString = getSortedObjectString(pubKeyThumprintObj);\n    const publicJwkHash = await this.hashString(publicJwkString);\n    // Generate Thumbprint for Private Key\n    const privateKeyJwk = await exportJwk(keyPair.privateKey);\n    // Re-import private key to make it unextractable\n    const unextractablePrivateKey = await importJwk(privateKeyJwk, false, [\"sign\"]);\n    // Store Keypair data in keystore\n    await this.cache.setItem(publicJwkHash, {\n      privateKey: unextractablePrivateKey,\n      publicKey: keyPair.publicKey,\n      requestMethod: request.resourceRequestMethod,\n      requestUri: request.resourceRequestUri\n    });\n    if (publicKeyThumbMeasurement) {\n      publicKeyThumbMeasurement.end({\n        success: true\n      });\n    }\n    return publicJwkHash;\n  }\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n  async removeTokenBindingKey(kid) {\n    await this.cache.removeItem(kid);\n    const keyFound = await this.cache.containsKey(kid);\n    return !keyFound;\n  }\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n  async clearKeystore() {\n    // Delete in-memory keystores\n    this.cache.clearInMemory();\n    /**\r\n     * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\r\n     * every persistent keystore\r\n     */\n    try {\n      await this.cache.clearPersistent();\n      return true;\n    } catch (e) {\n      if (e instanceof Error) {\n        this.logger.error(\"Clearing keystore failed with error: \".concat(e.message));\n      } else {\n        this.logger.error(\"Clearing keystore failed with unknown error\");\n      }\n      return false;\n    }\n  }\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n  async signJwt(payload, kid, shrOptions, correlationId) {\n    var _this$performanceClie2;\n    const signJwtMeasurement = (_this$performanceClie2 = this.performanceClient) === null || _this$performanceClie2 === void 0 ? void 0 : _this$performanceClie2.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n    const cachedKeyPair = await this.cache.getItem(kid);\n    if (!cachedKeyPair) {\n      throw createBrowserAuthError(cryptoKeyNotFound);\n    }\n    // Get public key as JWK\n    const publicKeyJwk = await exportJwk(cachedKeyPair.publicKey);\n    const publicKeyJwkString = getSortedObjectString(publicKeyJwk);\n    // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\n    const encodedKeyIdThumbprint = urlEncode(JSON.stringify({\n      kid: kid\n    }));\n    // Generate header\n    const shrHeader = JoseHeader.getShrHeaderString(_objectSpread(_objectSpread({}, shrOptions === null || shrOptions === void 0 ? void 0 : shrOptions.header), {}, {\n      alg: publicKeyJwk.alg,\n      kid: encodedKeyIdThumbprint\n    }));\n    const encodedShrHeader = urlEncode(shrHeader);\n    // Generate payload\n    payload.cnf = {\n      jwk: JSON.parse(publicKeyJwkString)\n    };\n    const encodedPayload = urlEncode(JSON.stringify(payload));\n    // Form token string\n    const tokenString = \"\".concat(encodedShrHeader, \".\").concat(encodedPayload);\n    // Sign token\n    const encoder = new TextEncoder();\n    const tokenBuffer = encoder.encode(tokenString);\n    const signatureBuffer = await sign(cachedKeyPair.privateKey, tokenBuffer);\n    const encodedSignature = urlEncodeArr(new Uint8Array(signatureBuffer));\n    const signedJwt = \"\".concat(tokenString, \".\").concat(encodedSignature);\n    if (signJwtMeasurement) {\n      signJwtMeasurement.end({\n        success: true\n      });\n    }\n    return signedJwt;\n  }\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n  async hashString(plainText) {\n    return hashString(plainText);\n  }\n}\nCryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\nCryptoOps.EXTRACTABLE = true;\nfunction getSortedObjectString(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\nexport { CryptoOps };","map":{"version":3,"names":["CryptoOps","constructor","logger","performanceClient","validateCryptoAvailable","cache","AsyncMemoryStorage","createNewGuid","base64Encode","input","base64Decode","base64UrlEncode","urlEncode","encodeKid","inputKid","JSON","stringify","kid","getPublicKeyThumbprint","request","_this$performanceClie","publicKeyThumbMeasurement","startMeasurement","PerformanceEvents","CryptoOptsGetPublicKeyThumbprint","correlationId","keyPair","generateKeyPair","EXTRACTABLE","POP_KEY_USAGES","publicKeyJwk","exportJwk","publicKey","pubKeyThumprintObj","e","kty","n","publicJwkString","getSortedObjectString","publicJwkHash","hashString","privateKeyJwk","privateKey","unextractablePrivateKey","importJwk","setItem","requestMethod","resourceRequestMethod","requestUri","resourceRequestUri","end","success","removeTokenBindingKey","removeItem","keyFound","containsKey","clearKeystore","clearInMemory","clearPersistent","Error","error","concat","message","signJwt","payload","shrOptions","_this$performanceClie2","signJwtMeasurement","CryptoOptsSignJwt","cachedKeyPair","getItem","createBrowserAuthError","cryptoKeyNotFound","publicKeyJwkString","encodedKeyIdThumbprint","shrHeader","JoseHeader","getShrHeaderString","_objectSpread","header","alg","encodedShrHeader","cnf","jwk","parse","encodedPayload","tokenString","encoder","TextEncoder","tokenBuffer","encode","signatureBuffer","sign","encodedSignature","urlEncodeArr","Uint8Array","signedJwt","plainText","obj","Object","keys","sort"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-browser\\src\\crypto\\CryptoOps.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    IPerformanceClient,\n    JoseHeader,\n    Logger,\n    PerformanceEvents,\n    ShrOptions,\n    SignedHttpRequest,\n    SignedHttpRequestParameters,\n} from \"@azure/msal-common/browser\";\nimport {\n    base64Encode,\n    urlEncode,\n    urlEncodeArr,\n} from \"../encode/Base64Encode.js\";\nimport { base64Decode } from \"../encode/Base64Decode.js\";\nimport * as BrowserCrypto from \"./BrowserCrypto.js\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError.js\";\nimport { AsyncMemoryStorage } from \"../cache/AsyncMemoryStorage.js\";\n\nexport type CachedKeyPair = {\n    publicKey: CryptoKey;\n    privateKey: CryptoKey;\n    requestMethod?: string;\n    requestUri?: string;\n};\n\n/**\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n */\nexport class CryptoOps implements ICrypto {\n    private logger: Logger;\n\n    /**\n     * CryptoOps can be used in contexts outside a PCA instance,\n     * meaning there won't be a performance manager available.\n     */\n    private performanceClient: IPerformanceClient | undefined;\n\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\n    private static EXTRACTABLE: boolean = true;\n    private cache: AsyncMemoryStorage<CachedKeyPair>;\n\n    constructor(logger: Logger, performanceClient?: IPerformanceClient) {\n        this.logger = logger;\n        // Browser crypto needs to be validated first before any other classes can be set.\n        BrowserCrypto.validateCryptoAvailable();\n        this.cache = new AsyncMemoryStorage<CachedKeyPair>(this.logger);\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return BrowserCrypto.createNewGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input\n     */\n    base64Encode(input: string): string {\n        return base64Encode(input);\n    }\n\n    /**\n     * Decodes input string from base64.\n     * @param input\n     */\n    base64Decode(input: string): string {\n        return base64Decode(input);\n    }\n\n    /**\n     * Encodes input string to base64 URL safe string.\n     * @param input\n     */\n    base64UrlEncode(input: string): string {\n        return urlEncode(input);\n    }\n\n    /**\n     * Stringifies and base64Url encodes input public key\n     * @param inputKid\n     * @returns Base64Url encoded public key\n     */\n    encodeKid(inputKid: string): string {\n        return this.base64UrlEncode(JSON.stringify({ kid: inputKid }));\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint\n     * @param request\n     */\n    async getPublicKeyThumbprint(\n        request: SignedHttpRequestParameters\n    ): Promise<string> {\n        const publicKeyThumbMeasurement =\n            this.performanceClient?.startMeasurement(\n                PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,\n                request.correlationId\n            );\n\n        // Generate Keypair\n        const keyPair: CryptoKeyPair = await BrowserCrypto.generateKeyPair(\n            CryptoOps.EXTRACTABLE,\n            CryptoOps.POP_KEY_USAGES\n        );\n\n        // Generate Thumbprint for Public Key\n        const publicKeyJwk: JsonWebKey = await BrowserCrypto.exportJwk(\n            keyPair.publicKey\n        );\n\n        const pubKeyThumprintObj: JsonWebKey = {\n            e: publicKeyJwk.e,\n            kty: publicKeyJwk.kty,\n            n: publicKeyJwk.n,\n        };\n\n        const publicJwkString: string =\n            getSortedObjectString(pubKeyThumprintObj);\n        const publicJwkHash = await this.hashString(publicJwkString);\n\n        // Generate Thumbprint for Private Key\n        const privateKeyJwk: JsonWebKey = await BrowserCrypto.exportJwk(\n            keyPair.privateKey\n        );\n        // Re-import private key to make it unextractable\n        const unextractablePrivateKey: CryptoKey =\n            await BrowserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\n\n        // Store Keypair data in keystore\n        await this.cache.setItem(publicJwkHash, {\n            privateKey: unextractablePrivateKey,\n            publicKey: keyPair.publicKey,\n            requestMethod: request.resourceRequestMethod,\n            requestUri: request.resourceRequestUri,\n        });\n\n        if (publicKeyThumbMeasurement) {\n            publicKeyThumbMeasurement.end({\n                success: true,\n            });\n        }\n\n        return publicJwkHash;\n    }\n\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid\n     */\n    async removeTokenBindingKey(kid: string): Promise<boolean> {\n        await this.cache.removeItem(kid);\n        const keyFound = await this.cache.containsKey(kid);\n        return !keyFound;\n    }\n\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    async clearKeystore(): Promise<boolean> {\n        // Delete in-memory keystores\n        this.cache.clearInMemory();\n\n        /**\n         * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\n         * every persistent keystore\n         */\n        try {\n            await this.cache.clearPersistent();\n            return true;\n        } catch (e) {\n            if (e instanceof Error) {\n                this.logger.error(\n                    `Clearing keystore failed with error: ${e.message}`\n                );\n            } else {\n                this.logger.error(\n                    \"Clearing keystore failed with unknown error\"\n                );\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\n     * @param payload\n     * @param kid\n     */\n    async signJwt(\n        payload: SignedHttpRequest,\n        kid: string,\n        shrOptions?: ShrOptions,\n        correlationId?: string\n    ): Promise<string> {\n        const signJwtMeasurement = this.performanceClient?.startMeasurement(\n            PerformanceEvents.CryptoOptsSignJwt,\n            correlationId\n        );\n        const cachedKeyPair = await this.cache.getItem(kid);\n\n        if (!cachedKeyPair) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.cryptoKeyNotFound\n            );\n        }\n\n        // Get public key as JWK\n        const publicKeyJwk = await BrowserCrypto.exportJwk(\n            cachedKeyPair.publicKey\n        );\n        const publicKeyJwkString = getSortedObjectString(publicKeyJwk);\n        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\n        const encodedKeyIdThumbprint = urlEncode(JSON.stringify({ kid: kid }));\n        // Generate header\n        const shrHeader = JoseHeader.getShrHeaderString({\n            ...shrOptions?.header,\n            alg: publicKeyJwk.alg,\n            kid: encodedKeyIdThumbprint,\n        });\n\n        const encodedShrHeader = urlEncode(shrHeader);\n\n        // Generate payload\n        payload.cnf = {\n            jwk: JSON.parse(publicKeyJwkString),\n        };\n        const encodedPayload = urlEncode(JSON.stringify(payload));\n\n        // Form token string\n        const tokenString = `${encodedShrHeader}.${encodedPayload}`;\n\n        // Sign token\n        const encoder = new TextEncoder();\n        const tokenBuffer = encoder.encode(tokenString);\n        const signatureBuffer = await BrowserCrypto.sign(\n            cachedKeyPair.privateKey,\n            tokenBuffer\n        );\n        const encodedSignature = urlEncodeArr(new Uint8Array(signatureBuffer));\n\n        const signedJwt = `${tokenString}.${encodedSignature}`;\n\n        if (signJwtMeasurement) {\n            signJwtMeasurement.end({\n                success: true,\n            });\n        }\n\n        return signedJwt;\n    }\n\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    async hashString(plainText: string): Promise<string> {\n        return BrowserCrypto.hashString(plainText);\n    }\n}\n\nfunction getSortedObjectString(obj: object): string {\n    return JSON.stringify(obj, Object.keys(obj).sort());\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}