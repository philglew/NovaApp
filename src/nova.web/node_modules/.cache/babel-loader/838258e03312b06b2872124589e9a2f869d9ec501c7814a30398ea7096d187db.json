{"ast":null,"code":"import _objectSpread from\"C:/temp/NovaApp/src/nova.web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import{DndContext,closestCenter,KeyboardSensor,PointerSensor,useSensor,useSensors}from'@dnd-kit/core';import{SortableContext,verticalListSortingStrategy}from'@dnd-kit/sortable';import TreeItem from'../components/employees/TreeItem';import Modal from'../components/common/Modal';import AddEmployeeForm from'../components/employees/AddEmployeeForm';// Mock data - replace with API call\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const mockEmployees=[{id:'1',firstName:'John',lastName:'Doe',email:'john.doe@example.com',position:'CEO',department:'Executive',managerId:null},{id:'2',firstName:'Jane',lastName:'Smith',email:'jane.smith@example.com',position:'CTO',department:'Engineering',managerId:'1'},{id:'3',firstName:'Bob',lastName:'Johnson',email:'bob.johnson@example.com',position:'Engineering Manager',department:'Engineering',managerId:'2'}];const buildTree=function(employees){let managerId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return employees.filter(emp=>emp.managerId===managerId).map(emp=>({id:emp.id,children:buildTree(employees,emp.id),data:emp,collapsed:false}));};const flattenTree=items=>{return items.reduce((flat,item)=>{if(item.collapsed){return[...flat,item];}return[...flat,item,...flattenTree(item.children)];},[]);};const Employees=()=>{const[items,setItems]=useState(buildTree(mockEmployees));const[searchQuery,setSearchQuery]=useState('');const[isAddModalOpen,setIsAddModalOpen]=useState(false);const sensors=useSensors(useSensor(PointerSensor),useSensor(KeyboardSensor));// Get unique departments from existing employees\nconst departments=Array.from(new Set(mockEmployees.map(emp=>emp.department)));// Get all employees that can be managers\nconst potentialManagers=mockEmployees;const flattenedItems=flattenTree(items);const filteredItems=searchQuery?flattenedItems.filter(item=>\"\".concat(item.data.firstName,\" \").concat(item.data.lastName,\" \").concat(item.data.position).toLowerCase().includes(searchQuery.toLowerCase())):flattenedItems;const handleDragEnd=event=>{const{active,over}=event;if(!over||active.id===over.id){return;}const activeItem=flattenedItems.find(item=>item.id===active.id);const overItem=flattenedItems.find(item=>item.id===over.id);if(!activeItem||!overItem){return;}// Collect all employees from the tree structure\nconst getAllEmployees=items=>{return items.reduce((acc,item)=>{return[...acc,item.data,...getAllEmployees(item.children)];},[]);};// Update the managerId in your data structure\nconst allEmployees=getAllEmployees(items);const updatedEmployees=allEmployees.map(emp=>{if(emp.id===activeItem.data.id){return _objectSpread(_objectSpread({},emp),{},{managerId:overItem.data.id});}return emp;});setItems(buildTree(updatedEmployees));};const handleCollapse=itemId=>{const updateCollapsed=items=>{return items.map(item=>{if(item.id===itemId){return _objectSpread(_objectSpread({},item),{},{collapsed:!item.collapsed});}return _objectSpread(_objectSpread({},item),{},{children:updateCollapsed(item.children)});});};setItems(updateCollapsed(items));};const handleAddEmployee=employeeData=>{// In a real app, this would be an API call\nconst newEmployee=_objectSpread(_objectSpread({},employeeData),{},{id:\"emp-\".concat(Date.now())// Generate a unique ID (use proper UUID in production)\n});mockEmployees.push(newEmployee);setItems(buildTree(mockEmployees));setIsAddModalOpen(false);};return/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-2xl font-semibold text-gray-900\",children:\"Employee Hierarchy\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex space-x-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"relative\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search employees...\",className:\"w-64 px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500\",value:searchQuery,onChange:e=>setSearchQuery(e.target.value)}),/*#__PURE__*/_jsx(\"svg\",{className:\"absolute right-3 top-2.5 h-5 w-5 text-gray-400\",fill:\"none\",stroke:\"currentColor\",viewBox:\"0 0 24 24\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,d:\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"})})]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsAddModalOpen(true),className:\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\",children:\"Add Employee\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"bg-white shadow rounded-lg p-6\",children:/*#__PURE__*/_jsx(DndContext,{sensors:sensors,collisionDetection:closestCenter,onDragEnd:handleDragEnd,children:/*#__PURE__*/_jsx(SortableContext,{items:filteredItems.map(item=>item.id),strategy:verticalListSortingStrategy,children:filteredItems.map(item=>/*#__PURE__*/_jsx(TreeItem,{item:item,depth:0,onCollapse:handleCollapse},item.id))})})}),/*#__PURE__*/_jsx(Modal,{isOpen:isAddModalOpen,onClose:()=>setIsAddModalOpen(false),title:\"Add New Employee\",children:/*#__PURE__*/_jsx(AddEmployeeForm,{onSubmit:handleAddEmployee,onCancel:()=>setIsAddModalOpen(false),managers:potentialManagers,departments:departments})})]});};export default Employees;","map":{"version":3,"names":["React","useState","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","SortableContext","verticalListSortingStrategy","TreeItem","Modal","AddEmployeeForm","jsx","_jsx","jsxs","_jsxs","mockEmployees","id","firstName","lastName","email","position","department","managerId","buildTree","employees","arguments","length","undefined","filter","emp","map","children","data","collapsed","flattenTree","items","reduce","flat","item","Employees","setItems","searchQuery","setSearchQuery","isAddModalOpen","setIsAddModalOpen","sensors","departments","Array","from","Set","potentialManagers","flattenedItems","filteredItems","concat","toLowerCase","includes","handleDragEnd","event","active","over","activeItem","find","overItem","getAllEmployees","acc","allEmployees","updatedEmployees","_objectSpread","handleCollapse","itemId","updateCollapsed","handleAddEmployee","employeeData","newEmployee","Date","now","push","className","type","placeholder","value","onChange","e","target","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","onClick","collisionDetection","onDragEnd","strategy","depth","onCollapse","isOpen","onClose","title","onSubmit","onCancel","managers"],"sources":["C:/temp/NovaApp/src/nova.web/src/pages/Employees.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragEndEvent,\r\n} from '@dnd-kit/core';\r\nimport {\r\n  SortableContext,\r\n  verticalListSortingStrategy,\r\n} from '@dnd-kit/sortable';\r\nimport TreeItem from '../components/employees/TreeItem';\r\nimport { Employee, TreeItem as TreeItemType } from '../types/employee';\r\nimport Modal from '../components/common/Modal';\r\nimport AddEmployeeForm from '../components/employees/AddEmployeeForm';\r\n\r\n// Mock data - replace with API call\r\nconst mockEmployees: Employee[] = [\r\n  {\r\n    id: '1',\r\n    firstName: 'John',\r\n    lastName: 'Doe',\r\n    email: 'john.doe@example.com',\r\n    position: 'CEO',\r\n    department: 'Executive',\r\n    managerId: null,\r\n  },\r\n  {\r\n    id: '2',\r\n    firstName: 'Jane',\r\n    lastName: 'Smith',\r\n    email: 'jane.smith@example.com',\r\n    position: 'CTO',\r\n    department: 'Engineering',\r\n    managerId: '1',\r\n  },\r\n  {\r\n    id: '3',\r\n    firstName: 'Bob',\r\n    lastName: 'Johnson',\r\n    email: 'bob.johnson@example.com',\r\n    position: 'Engineering Manager',\r\n    department: 'Engineering',\r\n    managerId: '2',\r\n  },\r\n];\r\n\r\nconst buildTree = (\r\n  employees: Employee[],\r\n  managerId: string | null = null\r\n): TreeItemType[] => {\r\n  return employees\r\n    .filter(emp => emp.managerId === managerId)\r\n    .map(emp => ({\r\n      id: emp.id,\r\n      children: buildTree(employees, emp.id),\r\n      data: emp,\r\n      collapsed: false,\r\n    }));\r\n};\r\n\r\nconst flattenTree = (items: TreeItemType[]): TreeItemType[] => {\r\n  return items.reduce<TreeItemType[]>((flat, item) => {\r\n    if (item.collapsed) {\r\n      return [...flat, item];\r\n    }\r\n    return [...flat, item, ...flattenTree(item.children)];\r\n  }, []);\r\n};\r\n\r\nconst Employees: React.FC = () => {\r\n  const [items, setItems] = useState<TreeItemType[]>(buildTree(mockEmployees));\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor)\r\n  );\r\n\r\n  // Get unique departments from existing employees\r\n  const departments = Array.from(new Set(mockEmployees.map(emp => emp.department)));\r\n\r\n  // Get all employees that can be managers\r\n  const potentialManagers = mockEmployees;\r\n\r\n  const flattenedItems = flattenTree(items);\r\n  const filteredItems = searchQuery\r\n    ? flattenedItems.filter(item => \r\n        `${item.data.firstName} ${item.data.lastName} ${item.data.position}`\r\n          .toLowerCase()\r\n          .includes(searchQuery.toLowerCase())\r\n      )\r\n    : flattenedItems;\r\n\r\n  const handleDragEnd = (event: DragEndEvent) => {\r\n    const { active, over } = event;\r\n\r\n    if (!over || active.id === over.id) {\r\n      return;\r\n    }\r\n\r\n    const activeItem = flattenedItems.find(item => item.id === active.id);\r\n    const overItem = flattenedItems.find(item => item.id === over.id);\r\n\r\n    if (!activeItem || !overItem) {\r\n      return;\r\n    }\r\n\r\n    // Collect all employees from the tree structure\r\n    const getAllEmployees = (items: TreeItemType[]): Employee[] => {\r\n      return items.reduce<Employee[]>((acc, item) => {\r\n        return [...acc, item.data, ...getAllEmployees(item.children)];\r\n      }, []);\r\n    };\r\n\r\n    // Update the managerId in your data structure\r\n    const allEmployees = getAllEmployees(items);\r\n    const updatedEmployees = allEmployees.map(emp => {\r\n      if (emp.id === activeItem.data.id) {\r\n        return { ...emp, managerId: overItem.data.id };\r\n      }\r\n      return emp;\r\n    });\r\n\r\n    setItems(buildTree(updatedEmployees));\r\n  };\r\n\r\n  const handleCollapse = (itemId: string) => {\r\n    const updateCollapsed = (items: TreeItemType[]): TreeItemType[] => {\r\n      return items.map(item => {\r\n        if (item.id === itemId) {\r\n          return { ...item, collapsed: !item.collapsed };\r\n        }\r\n        return {\r\n          ...item,\r\n          children: updateCollapsed(item.children),\r\n        };\r\n      });\r\n    };\r\n\r\n    setItems(updateCollapsed(items));\r\n  };\r\n\r\n  const handleAddEmployee = (employeeData: Omit<Employee, 'id'>) => {\r\n    // In a real app, this would be an API call\r\n    const newEmployee: Employee = {\r\n      ...employeeData,\r\n      id: `emp-${Date.now()}`, // Generate a unique ID (use proper UUID in production)\r\n    };\r\n\r\n    mockEmployees.push(newEmployee);\r\n    setItems(buildTree(mockEmployees));\r\n    setIsAddModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-2xl font-semibold text-gray-900\">Employee Hierarchy</h1>\r\n        <div className=\"flex space-x-4\">\r\n          <div className=\"relative\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search employees...\"\r\n              className=\"w-64 px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n            />\r\n            <svg\r\n              className=\"absolute right-3 top-2.5 h-5 w-5 text-gray-400\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          <button \r\n            onClick={() => setIsAddModalOpen(true)}\r\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\r\n          >\r\n            Add Employee\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"bg-white shadow rounded-lg p-6\">\r\n        <DndContext\r\n          sensors={sensors}\r\n          collisionDetection={closestCenter}\r\n          onDragEnd={handleDragEnd}\r\n        >\r\n          <SortableContext\r\n            items={filteredItems.map(item => item.id)}\r\n            strategy={verticalListSortingStrategy}\r\n          >\r\n            {filteredItems.map((item) => (\r\n              <TreeItem\r\n                key={item.id}\r\n                item={item}\r\n                depth={0}\r\n                onCollapse={handleCollapse}\r\n              />\r\n            ))}\r\n          </SortableContext>\r\n        </DndContext>\r\n      </div>\r\n\r\n      <Modal\r\n        isOpen={isAddModalOpen}\r\n        onClose={() => setIsAddModalOpen(false)}\r\n        title=\"Add New Employee\"\r\n      >\r\n        <AddEmployeeForm\r\n          onSubmit={handleAddEmployee}\r\n          onCancel={() => setIsAddModalOpen(false)}\r\n          managers={potentialManagers}\r\n          departments={departments}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Employees;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}