{"ast":null,"code":"/*! @azure/msal-common v14.16.0 2024-11-05 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { ScopeSet } from '../request/ScopeSet.mjs';\nimport { AccountEntity } from '../cache/entities/AccountEntity.mjs';\nimport { isInteractionRequiredError, InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { ProtocolUtils } from '../utils/ProtocolUtils.mjs';\nimport { HttpStatus, Constants, AuthenticationScheme, THE_FAMILY_ID } from '../utils/Constants.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { TokenCacheContext } from '../cache/persistence/TokenCacheContext.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { extractTokenClaims, checkMaxAge } from '../account/AuthToken.mjs';\nimport { getTenantIdFromIdTokenClaims } from '../account/TokenClaims.mjs';\nimport { updateAccountTenantProfileData, buildTenantProfile } from '../account/AccountInfo.mjs';\nimport { createAccessTokenEntity, createRefreshTokenEntity, createIdTokenEntity } from '../cache/utils/CacheHelpers.mjs';\nimport { stateNotFound, invalidState, stateMismatch, nonceMismatch, authTimeNotFound, invalidCacheEnvironment, keyIdMissing } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction parseServerErrorNo(serverResponse) {\n  var _serverResponse$error, _serverResponse$error2;\n  const errorCodePrefix = \"code=\";\n  const errorCodePrefixIndex = (_serverResponse$error = serverResponse.error_uri) === null || _serverResponse$error === void 0 ? void 0 : _serverResponse$error.lastIndexOf(errorCodePrefix);\n  return errorCodePrefixIndex && errorCodePrefixIndex >= 0 ? (_serverResponse$error2 = serverResponse.error_uri) === null || _serverResponse$error2 === void 0 ? void 0 : _serverResponse$error2.substring(errorCodePrefixIndex + errorCodePrefix.length) : undefined;\n}\n/**\r\n * Class that handles response parsing.\r\n * @internal\r\n */\nclass ResponseHandler {\n  constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient) {\n    this.clientId = clientId;\n    this.cacheStorage = cacheStorage;\n    this.cryptoObj = cryptoObj;\n    this.logger = logger;\n    this.serializableCache = serializableCache;\n    this.persistencePlugin = persistencePlugin;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Function which validates server authorization code response.\r\n   * @param serverResponseHash\r\n   * @param requestState\r\n   * @param cryptoObj\r\n   */\n  validateServerAuthorizationCodeResponse(serverResponse, requestState) {\n    if (!serverResponse.state || !requestState) {\n      throw serverResponse.state ? createClientAuthError(stateNotFound, \"Cached State\") : createClientAuthError(stateNotFound, \"Server State\");\n    }\n    let decodedServerResponseState;\n    let decodedRequestState;\n    try {\n      decodedServerResponseState = decodeURIComponent(serverResponse.state);\n    } catch (e) {\n      throw createClientAuthError(invalidState, serverResponse.state);\n    }\n    try {\n      decodedRequestState = decodeURIComponent(requestState);\n    } catch (e) {\n      throw createClientAuthError(invalidState, serverResponse.state);\n    }\n    if (decodedServerResponseState !== decodedRequestState) {\n      throw createClientAuthError(stateMismatch);\n    }\n    // Check for error\n    if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n      const serverErrorNo = parseServerErrorNo(serverResponse);\n      if (isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || \"\", serverResponse.trace_id || \"\", serverResponse.correlation_id || \"\", serverResponse.claims || \"\", serverErrorNo);\n      }\n      throw new ServerError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverErrorNo);\n    }\n  }\n  /**\r\n   * Function which validates server authorization token response.\r\n   * @param serverResponse\r\n   * @param refreshAccessToken\r\n   */\n  validateTokenResponse(serverResponse, refreshAccessToken) {\n    // Check for error\n    if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n      var _serverResponse$error3;\n      const errString = \"Error(s): \".concat(serverResponse.error_codes || Constants.NOT_AVAILABLE, \" - Timestamp: \").concat(serverResponse.timestamp || Constants.NOT_AVAILABLE, \" - Description: \").concat(serverResponse.error_description || Constants.NOT_AVAILABLE, \" - Correlation ID: \").concat(serverResponse.correlation_id || Constants.NOT_AVAILABLE, \" - Trace ID: \").concat(serverResponse.trace_id || Constants.NOT_AVAILABLE);\n      const serverErrorNo = (_serverResponse$error3 = serverResponse.error_codes) !== null && _serverResponse$error3 !== void 0 && _serverResponse$error3.length ? serverResponse.error_codes[0] : undefined;\n      const serverError = new ServerError(serverResponse.error, errString, serverResponse.suberror, serverErrorNo, serverResponse.status);\n      // check if 500 error\n      if (refreshAccessToken && serverResponse.status && serverResponse.status >= HttpStatus.SERVER_ERROR_RANGE_START && serverResponse.status <= HttpStatus.SERVER_ERROR_RANGE_END) {\n        this.logger.warning(\"executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n\".concat(serverError));\n        // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n        return;\n        // check if 400 error\n      } else if (refreshAccessToken && serverResponse.status && serverResponse.status >= HttpStatus.CLIENT_ERROR_RANGE_START && serverResponse.status <= HttpStatus.CLIENT_ERROR_RANGE_END) {\n        this.logger.warning(\"executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n\".concat(serverError));\n        // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n        return;\n      }\n      if (isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || Constants.EMPTY_STRING, serverResponse.trace_id || Constants.EMPTY_STRING, serverResponse.correlation_id || Constants.EMPTY_STRING, serverResponse.claims || Constants.EMPTY_STRING, serverErrorNo);\n      }\n      throw serverError;\n    }\n  }\n  /**\r\n   * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n   * @param serverTokenResponse\r\n   * @param authority\r\n   */\n  async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\n    var _this$performanceClie;\n    (_this$performanceClie = this.performanceClient) === null || _this$performanceClie === void 0 || _this$performanceClie.addQueueMeasurement(PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);\n    // create an idToken object (not entity)\n    let idTokenClaims;\n    if (serverTokenResponse.id_token) {\n      idTokenClaims = extractTokenClaims(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj.base64Decode);\n      // token nonce check (TODO: Add a warning if no nonce is given?)\n      if (authCodePayload && authCodePayload.nonce) {\n        if (idTokenClaims.nonce !== authCodePayload.nonce) {\n          throw createClientAuthError(nonceMismatch);\n        }\n      }\n      // token max_age check\n      if (request.maxAge || request.maxAge === 0) {\n        const authTime = idTokenClaims.auth_time;\n        if (!authTime) {\n          throw createClientAuthError(authTimeNotFound);\n        }\n        checkMaxAge(authTime, request.maxAge);\n      }\n    }\n    // generate homeAccountId\n    this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n    // save the response tokens\n    let requestStateObj;\n    if (!!authCodePayload && !!authCodePayload.state) {\n      requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n    }\n    // Add keyId from request to serverTokenResponse if defined\n    serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n    const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload);\n    let cacheContext;\n    try {\n      if (this.persistencePlugin && this.serializableCache) {\n        this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n        cacheContext = new TokenCacheContext(this.serializableCache, true);\n        await this.persistencePlugin.beforeCacheAccess(cacheContext);\n      }\n      /*\r\n       * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n       * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n       * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\r\n       * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\r\n       */\n      if (handlingRefreshTokenResponse && !forceCacheRefreshTokenResponse && cacheRecord.account) {\n        const key = cacheRecord.account.generateAccountKey();\n        const account = this.cacheStorage.getAccount(key, this.logger);\n        if (!account) {\n          this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n          return await ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, undefined, serverRequestId);\n        }\n      }\n      await this.cacheStorage.saveCacheRecord(cacheRecord, request.storeInCache, request.correlationId);\n    } finally {\n      if (this.persistencePlugin && this.serializableCache && cacheContext) {\n        this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n        await this.persistencePlugin.afterCacheAccess(cacheContext);\n      }\n    }\n    return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, serverTokenResponse, serverRequestId);\n  }\n  /**\r\n   * Generates CacheRecord\r\n   * @param serverTokenResponse\r\n   * @param idTokenObj\r\n   * @param authority\r\n   */\n  generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload) {\n    const env = authority.getPreferredCache();\n    if (!env) {\n      throw createClientAuthError(invalidCacheEnvironment);\n    }\n    const claimsTenantId = getTenantIdFromIdTokenClaims(idTokenClaims);\n    // IdToken: non AAD scenarios can have empty realm\n    let cachedIdToken;\n    let cachedAccount;\n    if (serverTokenResponse.id_token && !!idTokenClaims) {\n      cachedIdToken = createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, claimsTenantId || \"\");\n      cachedAccount = buildAccountToCache(this.cacheStorage, authority, this.homeAccountIdentifier, this.cryptoObj.base64Decode, idTokenClaims, serverTokenResponse.client_info, env, claimsTenantId, authCodePayload, undefined,\n      // nativeAccountId\n      this.logger);\n    }\n    // AccessToken\n    let cachedAccessToken = null;\n    if (serverTokenResponse.access_token) {\n      // If scopes not returned in server response, use request scopes\n      const responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(request.scopes || []);\n      /*\r\n       * Use timestamp calculated before request\r\n       * Server may return timestamps as strings, parse to numbers if so.\r\n       */\n      const expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n      const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n      const refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n      const tokenExpirationSeconds = reqTimestamp + expiresIn;\n      const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n      const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n      // non AAD scenarios can have empty realm\n      cachedAccessToken = createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, claimsTenantId || authority.tenant || \"\", responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj.base64Decode, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\n    }\n    // refreshToken\n    let cachedRefreshToken = null;\n    if (serverTokenResponse.refresh_token) {\n      let rtExpiresOn;\n      if (serverTokenResponse.refresh_token_expires_in) {\n        const rtExpiresIn = typeof serverTokenResponse.refresh_token_expires_in === \"string\" ? parseInt(serverTokenResponse.refresh_token_expires_in, 10) : serverTokenResponse.refresh_token_expires_in;\n        rtExpiresOn = reqTimestamp + rtExpiresIn;\n      }\n      cachedRefreshToken = createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, userAssertionHash, rtExpiresOn);\n    }\n    // appMetadata\n    let cachedAppMetadata = null;\n    if (serverTokenResponse.foci) {\n      cachedAppMetadata = {\n        clientId: this.clientId,\n        environment: env,\n        familyId: serverTokenResponse.foci\n      };\n    }\n    return {\n      account: cachedAccount,\n      idToken: cachedIdToken,\n      accessToken: cachedAccessToken,\n      refreshToken: cachedRefreshToken,\n      appMetadata: cachedAppMetadata\n    };\n  }\n  /**\r\n   * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n   *\r\n   * Optionally takes a state string that is set as-is in the response.\r\n   *\r\n   * @param cacheRecord\r\n   * @param idTokenObj\r\n   * @param fromTokenCache\r\n   * @param stateString\r\n   */\n  static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenClaims, requestState, serverTokenResponse, requestId) {\n    var _cacheRecord$idToken, _cacheRecord$idToken2, _cacheRecord$accessTo, _cacheRecord$account, _cacheRecord$account2;\n    let accessToken = Constants.EMPTY_STRING;\n    let responseScopes = [];\n    let expiresOn = null;\n    let extExpiresOn;\n    let refreshOn;\n    let familyId = Constants.EMPTY_STRING;\n    if (cacheRecord.accessToken) {\n      /*\r\n       * if the request object has `popKid` property, `signPopToken` will be set to false and\r\n       * the token will be returned unsigned\r\n       */\n      if (cacheRecord.accessToken.tokenType === AuthenticationScheme.POP && !request.popKid) {\n        const popTokenGenerator = new PopTokenGenerator(cryptoObj);\n        const {\n          secret,\n          keyId\n        } = cacheRecord.accessToken;\n        if (!keyId) {\n          throw createClientAuthError(keyIdMissing);\n        }\n        accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\n      } else {\n        accessToken = cacheRecord.accessToken.secret;\n      }\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n      if (cacheRecord.accessToken.refreshOn) {\n        refreshOn = new Date(Number(cacheRecord.accessToken.refreshOn) * 1000);\n      }\n    }\n    if (cacheRecord.appMetadata) {\n      familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : \"\";\n    }\n    const uid = (idTokenClaims === null || idTokenClaims === void 0 ? void 0 : idTokenClaims.oid) || (idTokenClaims === null || idTokenClaims === void 0 ? void 0 : idTokenClaims.sub) || \"\";\n    const tid = (idTokenClaims === null || idTokenClaims === void 0 ? void 0 : idTokenClaims.tid) || \"\";\n    // for hybrid + native bridge enablement, send back the native account Id\n    if (serverTokenResponse !== null && serverTokenResponse !== void 0 && serverTokenResponse.spa_accountid && !!cacheRecord.account) {\n      cacheRecord.account.nativeAccountId = serverTokenResponse === null || serverTokenResponse === void 0 ? void 0 : serverTokenResponse.spa_accountid;\n    }\n    const accountInfo = cacheRecord.account ? updateAccountTenantProfileData(cacheRecord.account.getAccountInfo(), undefined,\n    // tenantProfile optional\n    idTokenClaims, (_cacheRecord$idToken = cacheRecord.idToken) === null || _cacheRecord$idToken === void 0 ? void 0 : _cacheRecord$idToken.secret) : null;\n    return {\n      authority: authority.canonicalAuthority,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: accountInfo,\n      idToken: (cacheRecord === null || cacheRecord === void 0 || (_cacheRecord$idToken2 = cacheRecord.idToken) === null || _cacheRecord$idToken2 === void 0 ? void 0 : _cacheRecord$idToken2.secret) || \"\",\n      idTokenClaims: idTokenClaims || {},\n      accessToken: accessToken,\n      fromCache: fromTokenCache,\n      expiresOn: expiresOn,\n      extExpiresOn: extExpiresOn,\n      refreshOn: refreshOn,\n      correlationId: request.correlationId,\n      requestId: requestId || Constants.EMPTY_STRING,\n      familyId: familyId,\n      tokenType: ((_cacheRecord$accessTo = cacheRecord.accessToken) === null || _cacheRecord$accessTo === void 0 ? void 0 : _cacheRecord$accessTo.tokenType) || Constants.EMPTY_STRING,\n      state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n      cloudGraphHostName: ((_cacheRecord$account = cacheRecord.account) === null || _cacheRecord$account === void 0 ? void 0 : _cacheRecord$account.cloudGraphHostName) || Constants.EMPTY_STRING,\n      msGraphHost: ((_cacheRecord$account2 = cacheRecord.account) === null || _cacheRecord$account2 === void 0 ? void 0 : _cacheRecord$account2.msGraphHost) || Constants.EMPTY_STRING,\n      code: serverTokenResponse === null || serverTokenResponse === void 0 ? void 0 : serverTokenResponse.spa_code,\n      fromNativeBroker: false\n    };\n  }\n}\nfunction buildAccountToCache(cacheStorage, authority, homeAccountId, base64Decode, idTokenClaims, clientInfo, environment, claimsTenantId, authCodePayload, nativeAccountId, logger) {\n  logger === null || logger === void 0 || logger.verbose(\"setCachedAccount called\");\n  // Check if base account is already cached\n  const accountKeys = cacheStorage.getAccountKeys();\n  const baseAccountKey = accountKeys.find(accountKey => {\n    return accountKey.startsWith(homeAccountId);\n  });\n  let cachedAccount = null;\n  if (baseAccountKey) {\n    cachedAccount = cacheStorage.getAccount(baseAccountKey, logger);\n  }\n  const baseAccount = cachedAccount || AccountEntity.createAccount({\n    homeAccountId,\n    idTokenClaims,\n    clientInfo,\n    environment,\n    cloudGraphHostName: authCodePayload === null || authCodePayload === void 0 ? void 0 : authCodePayload.cloud_graph_host_name,\n    msGraphHost: authCodePayload === null || authCodePayload === void 0 ? void 0 : authCodePayload.msgraph_host,\n    nativeAccountId: nativeAccountId\n  }, authority, base64Decode);\n  const tenantProfiles = baseAccount.tenantProfiles || [];\n  const tenantId = claimsTenantId || baseAccount.realm;\n  if (tenantId && !tenantProfiles.find(tenantProfile => {\n    return tenantProfile.tenantId === tenantId;\n  })) {\n    const newTenantProfile = buildTenantProfile(homeAccountId, baseAccount.localAccountId, tenantId, idTokenClaims);\n    tenantProfiles.push(newTenantProfile);\n  }\n  baseAccount.tenantProfiles = tenantProfiles;\n  return baseAccount;\n}\nexport { ResponseHandler, buildAccountToCache };","map":{"version":3,"names":["parseServerErrorNo","serverResponse","_serverResponse$error","_serverResponse$error2","errorCodePrefix","errorCodePrefixIndex","error_uri","lastIndexOf","substring","length","undefined","ResponseHandler","constructor","clientId","cacheStorage","cryptoObj","logger","serializableCache","persistencePlugin","performanceClient","validateServerAuthorizationCodeResponse","requestState","state","createClientAuthError","stateNotFound","decodedServerResponseState","decodedRequestState","decodeURIComponent","e","invalidState","stateMismatch","error","error_description","suberror","serverErrorNo","isInteractionRequiredError","InteractionRequiredAuthError","timestamp","trace_id","correlation_id","claims","ServerError","validateTokenResponse","refreshAccessToken","_serverResponse$error3","errString","concat","error_codes","Constants","NOT_AVAILABLE","serverError","status","HttpStatus","SERVER_ERROR_RANGE_START","SERVER_ERROR_RANGE_END","warning","CLIENT_ERROR_RANGE_START","CLIENT_ERROR_RANGE_END","EMPTY_STRING","handleServerTokenResponse","serverTokenResponse","authority","reqTimestamp","request","authCodePayload","userAssertionHash","handlingRefreshTokenResponse","forceCacheRefreshTokenResponse","serverRequestId","_this$performanceClie","addQueueMeasurement","PerformanceEvents","HandleServerTokenResponse","idTokenClaims","id_token","extractTokenClaims","base64Decode","nonce","nonceMismatch","maxAge","authTime","auth_time","authTimeNotFound","checkMaxAge","homeAccountIdentifier","AccountEntity","generateHomeAccountId","client_info","authorityType","requestStateObj","ProtocolUtils","parseRequestState","key_id","sshKid","cacheRecord","generateCacheRecord","cacheContext","verbose","TokenCacheContext","beforeCacheAccess","account","key","generateAccountKey","getAccount","generateAuthenticationResult","saveCacheRecord","storeInCache","correlationId","afterCacheAccess","env","getPreferredCache","invalidCacheEnvironment","claimsTenantId","getTenantIdFromIdTokenClaims","cachedIdToken","cachedAccount","createIdTokenEntity","buildAccountToCache","cachedAccessToken","access_token","responseScopes","scope","ScopeSet","fromString","scopes","expiresIn","expires_in","parseInt","extExpiresIn","ext_expires_in","refreshIn","refresh_in","tokenExpirationSeconds","extendedTokenExpirationSeconds","refreshOnSeconds","createAccessTokenEntity","tenant","printScopes","token_type","requestedClaimsHash","cachedRefreshToken","refresh_token","rtExpiresOn","refresh_token_expires_in","rtExpiresIn","createRefreshTokenEntity","foci","cachedAppMetadata","environment","familyId","idToken","accessToken","refreshToken","appMetadata","fromTokenCache","requestId","_cacheRecord$idToken","_cacheRecord$idToken2","_cacheRecord$accessTo","_cacheRecord$account","_cacheRecord$account2","expiresOn","extExpiresOn","refreshOn","tokenType","AuthenticationScheme","POP","popKid","popTokenGenerator","PopTokenGenerator","secret","keyId","keyIdMissing","signPopToken","target","asArray","Date","Number","extendedExpiresOn","THE_FAMILY_ID","uid","oid","sub","tid","spa_accountid","nativeAccountId","accountInfo","updateAccountTenantProfileData","getAccountInfo","canonicalAuthority","uniqueId","tenantId","fromCache","userRequestState","cloudGraphHostName","msGraphHost","code","spa_code","fromNativeBroker","homeAccountId","clientInfo","accountKeys","getAccountKeys","baseAccountKey","find","accountKey","startsWith","baseAccount","createAccount","cloud_graph_host_name","msgraph_host","tenantProfiles","realm","tenantProfile","newTenantProfile","buildTenantProfile","localAccountId","push"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-common\\src\\response\\ResponseHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationTokenResponse } from \"./ServerAuthorizationTokenResponse.js\";\nimport { ICrypto } from \"../crypto/ICrypto.js\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError.js\";\nimport { ServerAuthorizationCodeResponse } from \"./ServerAuthorizationCodeResponse.js\";\nimport { Logger } from \"../logger/Logger.js\";\nimport { ServerError } from \"../error/ServerError.js\";\nimport { ScopeSet } from \"../request/ScopeSet.js\";\nimport { AuthenticationResult } from \"./AuthenticationResult.js\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity.js\";\nimport { Authority } from \"../authority/Authority.js\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity.js\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity.js\";\nimport { RefreshTokenEntity } from \"../cache/entities/RefreshTokenEntity.js\";\nimport {\n    InteractionRequiredAuthError,\n    isInteractionRequiredError,\n} from \"../error/InteractionRequiredAuthError.js\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord.js\";\nimport { CacheManager } from \"../cache/CacheManager.js\";\nimport { ProtocolUtils, RequestStateObject } from \"../utils/ProtocolUtils.js\";\nimport {\n    AuthenticationScheme,\n    Constants,\n    THE_FAMILY_ID,\n    HttpStatus,\n} from \"../utils/Constants.js\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator.js\";\nimport { AppMetadataEntity } from \"../cache/entities/AppMetadataEntity.js\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin.js\";\nimport { TokenCacheContext } from \"../cache/persistence/TokenCacheContext.js\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache.js\";\nimport { AuthorizationCodePayload } from \"./AuthorizationCodePayload.js\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest.js\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient.js\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent.js\";\nimport { checkMaxAge, extractTokenClaims } from \"../account/AuthToken.js\";\nimport {\n    TokenClaims,\n    getTenantIdFromIdTokenClaims,\n} from \"../account/TokenClaims.js\";\nimport {\n    AccountInfo,\n    buildTenantProfile,\n    updateAccountTenantProfileData,\n} from \"../account/AccountInfo.js\";\nimport * as CacheHelpers from \"../cache/utils/CacheHelpers.js\";\n\nfunction parseServerErrorNo(\n    serverResponse: ServerAuthorizationCodeResponse\n): string | undefined {\n    const errorCodePrefix = \"code=\";\n    const errorCodePrefixIndex =\n        serverResponse.error_uri?.lastIndexOf(errorCodePrefix);\n    return errorCodePrefixIndex && errorCodePrefixIndex >= 0\n        ? serverResponse.error_uri?.substring(\n              errorCodePrefixIndex + errorCodePrefix.length\n          )\n        : undefined;\n}\n\n/**\n * Class that handles response parsing.\n * @internal\n */\nexport class ResponseHandler {\n    private clientId: string;\n    private cacheStorage: CacheManager;\n    private cryptoObj: ICrypto;\n    private logger: Logger;\n    private homeAccountIdentifier: string;\n    private serializableCache: ISerializableTokenCache | null;\n    private persistencePlugin: ICachePlugin | null;\n    private performanceClient?: IPerformanceClient;\n\n    constructor(\n        clientId: string,\n        cacheStorage: CacheManager,\n        cryptoObj: ICrypto,\n        logger: Logger,\n        serializableCache: ISerializableTokenCache | null,\n        persistencePlugin: ICachePlugin | null,\n        performanceClient?: IPerformanceClient\n    ) {\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Function which validates server authorization code response.\n     * @param serverResponseHash\n     * @param requestState\n     * @param cryptoObj\n     */\n    validateServerAuthorizationCodeResponse(\n        serverResponse: ServerAuthorizationCodeResponse,\n        requestState: string\n    ): void {\n        if (!serverResponse.state || !requestState) {\n            throw serverResponse.state\n                ? createClientAuthError(\n                      ClientAuthErrorCodes.stateNotFound,\n                      \"Cached State\"\n                  )\n                : createClientAuthError(\n                      ClientAuthErrorCodes.stateNotFound,\n                      \"Server State\"\n                  );\n        }\n\n        let decodedServerResponseState: string;\n        let decodedRequestState: string;\n\n        try {\n            decodedServerResponseState = decodeURIComponent(\n                serverResponse.state\n            );\n        } catch (e) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.invalidState,\n                serverResponse.state\n            );\n        }\n\n        try {\n            decodedRequestState = decodeURIComponent(requestState);\n        } catch (e) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.invalidState,\n                serverResponse.state\n            );\n        }\n\n        if (decodedServerResponseState !== decodedRequestState) {\n            throw createClientAuthError(ClientAuthErrorCodes.stateMismatch);\n        }\n\n        // Check for error\n        if (\n            serverResponse.error ||\n            serverResponse.error_description ||\n            serverResponse.suberror\n        ) {\n            const serverErrorNo = parseServerErrorNo(serverResponse);\n            if (\n                isInteractionRequiredError(\n                    serverResponse.error,\n                    serverResponse.error_description,\n                    serverResponse.suberror\n                )\n            ) {\n                throw new InteractionRequiredAuthError(\n                    serverResponse.error || \"\",\n                    serverResponse.error_description,\n                    serverResponse.suberror,\n                    serverResponse.timestamp || \"\",\n                    serverResponse.trace_id || \"\",\n                    serverResponse.correlation_id || \"\",\n                    serverResponse.claims || \"\",\n                    serverErrorNo\n                );\n            }\n\n            throw new ServerError(\n                serverResponse.error || \"\",\n                serverResponse.error_description,\n                serverResponse.suberror,\n                serverErrorNo\n            );\n        }\n    }\n\n    /**\n     * Function which validates server authorization token response.\n     * @param serverResponse\n     * @param refreshAccessToken\n     */\n    validateTokenResponse(\n        serverResponse: ServerAuthorizationTokenResponse,\n        refreshAccessToken?: boolean\n    ): void {\n        // Check for error\n        if (\n            serverResponse.error ||\n            serverResponse.error_description ||\n            serverResponse.suberror\n        ) {\n            const errString = `Error(s): ${\n                serverResponse.error_codes || Constants.NOT_AVAILABLE\n            } - Timestamp: ${\n                serverResponse.timestamp || Constants.NOT_AVAILABLE\n            } - Description: ${\n                serverResponse.error_description || Constants.NOT_AVAILABLE\n            } - Correlation ID: ${\n                serverResponse.correlation_id || Constants.NOT_AVAILABLE\n            } - Trace ID: ${\n                serverResponse.trace_id || Constants.NOT_AVAILABLE\n            }`;\n            const serverErrorNo = serverResponse.error_codes?.length\n                ? serverResponse.error_codes[0]\n                : undefined;\n            const serverError = new ServerError(\n                serverResponse.error,\n                errString,\n                serverResponse.suberror,\n                serverErrorNo,\n                serverResponse.status\n            );\n\n            // check if 500 error\n            if (\n                refreshAccessToken &&\n                serverResponse.status &&\n                serverResponse.status >= HttpStatus.SERVER_ERROR_RANGE_START &&\n                serverResponse.status <= HttpStatus.SERVER_ERROR_RANGE_END\n            ) {\n                this.logger.warning(\n                    `executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`\n                );\n\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n                // check if 400 error\n            } else if (\n                refreshAccessToken &&\n                serverResponse.status &&\n                serverResponse.status >= HttpStatus.CLIENT_ERROR_RANGE_START &&\n                serverResponse.status <= HttpStatus.CLIENT_ERROR_RANGE_END\n            ) {\n                this.logger.warning(\n                    `executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`\n                );\n\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n            }\n\n            if (\n                isInteractionRequiredError(\n                    serverResponse.error,\n                    serverResponse.error_description,\n                    serverResponse.suberror\n                )\n            ) {\n                throw new InteractionRequiredAuthError(\n                    serverResponse.error,\n                    serverResponse.error_description,\n                    serverResponse.suberror,\n                    serverResponse.timestamp || Constants.EMPTY_STRING,\n                    serverResponse.trace_id || Constants.EMPTY_STRING,\n                    serverResponse.correlation_id || Constants.EMPTY_STRING,\n                    serverResponse.claims || Constants.EMPTY_STRING,\n                    serverErrorNo\n                );\n            }\n\n            throw serverError;\n        }\n    }\n\n    /**\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\n     * @param serverTokenResponse\n     * @param authority\n     */\n    async handleServerTokenResponse(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        authCodePayload?: AuthorizationCodePayload,\n        userAssertionHash?: string,\n        handlingRefreshTokenResponse?: boolean,\n        forceCacheRefreshTokenResponse?: boolean,\n        serverRequestId?: string\n    ): Promise<AuthenticationResult> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.HandleServerTokenResponse,\n            serverTokenResponse.correlation_id\n        );\n\n        // create an idToken object (not entity)\n        let idTokenClaims: TokenClaims | undefined;\n        if (serverTokenResponse.id_token) {\n            idTokenClaims = extractTokenClaims(\n                serverTokenResponse.id_token || Constants.EMPTY_STRING,\n                this.cryptoObj.base64Decode\n            );\n\n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && authCodePayload.nonce) {\n                if (idTokenClaims.nonce !== authCodePayload.nonce) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.nonceMismatch\n                    );\n                }\n            }\n\n            // token max_age check\n            if (request.maxAge || request.maxAge === 0) {\n                const authTime = idTokenClaims.auth_time;\n                if (!authTime) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.authTimeNotFound\n                    );\n                }\n\n                checkMaxAge(authTime, request.maxAge);\n            }\n        }\n\n        // generate homeAccountId\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(\n            serverTokenResponse.client_info || Constants.EMPTY_STRING,\n            authority.authorityType,\n            this.logger,\n            this.cryptoObj,\n            idTokenClaims\n        );\n\n        // save the response tokens\n        let requestStateObj: RequestStateObject | undefined;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = ProtocolUtils.parseRequestState(\n                this.cryptoObj,\n                authCodePayload.state\n            );\n        }\n\n        // Add keyId from request to serverTokenResponse if defined\n        serverTokenResponse.key_id =\n            serverTokenResponse.key_id || request.sshKid || undefined;\n\n        const cacheRecord = this.generateCacheRecord(\n            serverTokenResponse,\n            authority,\n            reqTimestamp,\n            request,\n            idTokenClaims,\n            userAssertionHash,\n            authCodePayload\n        );\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\n                    \"Persistence enabled, calling beforeCacheAccess\"\n                );\n                cacheContext = new TokenCacheContext(\n                    this.serializableCache,\n                    true\n                );\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\n             */\n            if (\n                handlingRefreshTokenResponse &&\n                !forceCacheRefreshTokenResponse &&\n                cacheRecord.account\n            ) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key, this.logger);\n                if (!account) {\n                    this.logger.warning(\n                        \"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\"\n                    );\n                    return await ResponseHandler.generateAuthenticationResult(\n                        this.cryptoObj,\n                        authority,\n                        cacheRecord,\n                        false,\n                        request,\n                        idTokenClaims,\n                        requestStateObj,\n                        undefined,\n                        serverRequestId\n                    );\n                }\n            }\n            await this.cacheStorage.saveCacheRecord(\n                cacheRecord,\n                request.storeInCache,\n                request.correlationId\n            );\n        } finally {\n            if (\n                this.persistencePlugin &&\n                this.serializableCache &&\n                cacheContext\n            ) {\n                this.logger.verbose(\n                    \"Persistence enabled, calling afterCacheAccess\"\n                );\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n\n        return ResponseHandler.generateAuthenticationResult(\n            this.cryptoObj,\n            authority,\n            cacheRecord,\n            false,\n            request,\n            idTokenClaims,\n            requestStateObj,\n            serverTokenResponse,\n            serverRequestId\n        );\n    }\n\n    /**\n     * Generates CacheRecord\n     * @param serverTokenResponse\n     * @param idTokenObj\n     * @param authority\n     */\n    private generateCacheRecord(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        idTokenClaims?: TokenClaims,\n        userAssertionHash?: string,\n        authCodePayload?: AuthorizationCodePayload\n    ): CacheRecord {\n        const env = authority.getPreferredCache();\n        if (!env) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.invalidCacheEnvironment\n            );\n        }\n\n        const claimsTenantId = getTenantIdFromIdTokenClaims(idTokenClaims);\n\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken: IdTokenEntity | undefined;\n        let cachedAccount: AccountEntity | undefined;\n        if (serverTokenResponse.id_token && !!idTokenClaims) {\n            cachedIdToken = CacheHelpers.createIdTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.id_token,\n                this.clientId,\n                claimsTenantId || \"\"\n            );\n\n            cachedAccount = buildAccountToCache(\n                this.cacheStorage,\n                authority,\n                this.homeAccountIdentifier,\n                this.cryptoObj.base64Decode,\n                idTokenClaims,\n                serverTokenResponse.client_info,\n                env,\n                claimsTenantId,\n                authCodePayload,\n                undefined, // nativeAccountId\n                this.logger\n            );\n        }\n\n        // AccessToken\n        let cachedAccessToken: AccessTokenEntity | null = null;\n        if (serverTokenResponse.access_token) {\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope\n                ? ScopeSet.fromString(serverTokenResponse.scope)\n                : new ScopeSet(request.scopes || []);\n\n            /*\n             * Use timestamp calculated before request\n             * Server may return timestamps as strings, parse to numbers if so.\n             */\n            const expiresIn: number =\n                (typeof serverTokenResponse.expires_in === \"string\"\n                    ? parseInt(serverTokenResponse.expires_in, 10)\n                    : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn: number =\n                (typeof serverTokenResponse.ext_expires_in === \"string\"\n                    ? parseInt(serverTokenResponse.ext_expires_in, 10)\n                    : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn: number | undefined =\n                (typeof serverTokenResponse.refresh_in === \"string\"\n                    ? parseInt(serverTokenResponse.refresh_in, 10)\n                    : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds =\n                tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds =\n                refreshIn && refreshIn > 0\n                    ? reqTimestamp + refreshIn\n                    : undefined;\n\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = CacheHelpers.createAccessTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.access_token,\n                this.clientId,\n                claimsTenantId || authority.tenant || \"\",\n                responseScopes.printScopes(),\n                tokenExpirationSeconds,\n                extendedTokenExpirationSeconds,\n                this.cryptoObj.base64Decode,\n                refreshOnSeconds,\n                serverTokenResponse.token_type,\n                userAssertionHash,\n                serverTokenResponse.key_id,\n                request.claims,\n                request.requestedClaimsHash\n            );\n        }\n\n        // refreshToken\n        let cachedRefreshToken: RefreshTokenEntity | null = null;\n        if (serverTokenResponse.refresh_token) {\n            let rtExpiresOn: number | undefined;\n            if (serverTokenResponse.refresh_token_expires_in) {\n                const rtExpiresIn: number =\n                    typeof serverTokenResponse.refresh_token_expires_in ===\n                    \"string\"\n                        ? parseInt(\n                              serverTokenResponse.refresh_token_expires_in,\n                              10\n                          )\n                        : serverTokenResponse.refresh_token_expires_in;\n                rtExpiresOn = reqTimestamp + rtExpiresIn;\n            }\n            cachedRefreshToken = CacheHelpers.createRefreshTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.refresh_token,\n                this.clientId,\n                serverTokenResponse.foci,\n                userAssertionHash,\n                rtExpiresOn\n            );\n        }\n\n        // appMetadata\n        let cachedAppMetadata: AppMetadataEntity | null = null;\n        if (serverTokenResponse.foci) {\n            cachedAppMetadata = {\n                clientId: this.clientId,\n                environment: env,\n                familyId: serverTokenResponse.foci,\n            };\n        }\n\n        return {\n            account: cachedAccount,\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n            refreshToken: cachedRefreshToken,\n            appMetadata: cachedAppMetadata,\n        };\n    }\n\n    /**\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\n     *\n     * Optionally takes a state string that is set as-is in the response.\n     *\n     * @param cacheRecord\n     * @param idTokenObj\n     * @param fromTokenCache\n     * @param stateString\n     */\n    static async generateAuthenticationResult(\n        cryptoObj: ICrypto,\n        authority: Authority,\n        cacheRecord: CacheRecord,\n        fromTokenCache: boolean,\n        request: BaseAuthRequest,\n        idTokenClaims?: TokenClaims,\n        requestState?: RequestStateObject,\n        serverTokenResponse?: ServerAuthorizationTokenResponse,\n        requestId?: string\n    ): Promise<AuthenticationResult> {\n        let accessToken: string = Constants.EMPTY_STRING;\n        let responseScopes: Array<string> = [];\n        let expiresOn: Date | null = null;\n        let extExpiresOn: Date | undefined;\n        let refreshOn: Date | undefined;\n        let familyId: string = Constants.EMPTY_STRING;\n\n        if (cacheRecord.accessToken) {\n            /*\n             * if the request object has `popKid` property, `signPopToken` will be set to false and\n             * the token will be returned unsigned\n             */\n            if (\n                cacheRecord.accessToken.tokenType ===\n                    AuthenticationScheme.POP &&\n                !request.popKid\n            ) {\n                const popTokenGenerator: PopTokenGenerator =\n                    new PopTokenGenerator(cryptoObj);\n                const { secret, keyId } = cacheRecord.accessToken;\n\n                if (!keyId) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.keyIdMissing\n                    );\n                }\n\n                accessToken = await popTokenGenerator.signPopToken(\n                    secret,\n                    keyId,\n                    request\n                );\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = ScopeSet.fromString(\n                cacheRecord.accessToken.target\n            ).asArray();\n            expiresOn = new Date(\n                Number(cacheRecord.accessToken.expiresOn) * 1000\n            );\n            extExpiresOn = new Date(\n                Number(cacheRecord.accessToken.extendedExpiresOn) * 1000\n            );\n            if (cacheRecord.accessToken.refreshOn) {\n                refreshOn = new Date(\n                    Number(cacheRecord.accessToken.refreshOn) * 1000\n                );\n            }\n        }\n\n        if (cacheRecord.appMetadata) {\n            familyId =\n                cacheRecord.appMetadata.familyId === THE_FAMILY_ID\n                    ? THE_FAMILY_ID\n                    : \"\";\n        }\n        const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\n        const tid = idTokenClaims?.tid || \"\";\n\n        // for hybrid + native bridge enablement, send back the native account Id\n        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\n            cacheRecord.account.nativeAccountId =\n                serverTokenResponse?.spa_accountid;\n        }\n\n        const accountInfo: AccountInfo | null = cacheRecord.account\n            ? updateAccountTenantProfileData(\n                  cacheRecord.account.getAccountInfo(),\n                  undefined, // tenantProfile optional\n                  idTokenClaims,\n                  cacheRecord.idToken?.secret\n              )\n            : null;\n\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: accountInfo,\n            idToken: cacheRecord?.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            extExpiresOn: extExpiresOn,\n            refreshOn: refreshOn,\n            correlationId: request.correlationId,\n            requestId: requestId || Constants.EMPTY_STRING,\n            familyId: familyId,\n            tokenType:\n                cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: requestState\n                ? requestState.userRequestState\n                : Constants.EMPTY_STRING,\n            cloudGraphHostName:\n                cacheRecord.account?.cloudGraphHostName ||\n                Constants.EMPTY_STRING,\n            msGraphHost:\n                cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\n            code: serverTokenResponse?.spa_code,\n            fromNativeBroker: false,\n        };\n    }\n}\n\nexport function buildAccountToCache(\n    cacheStorage: CacheManager,\n    authority: Authority,\n    homeAccountId: string,\n    base64Decode: (input: string) => string,\n    idTokenClaims?: TokenClaims,\n    clientInfo?: string,\n    environment?: string,\n    claimsTenantId?: string | null,\n    authCodePayload?: AuthorizationCodePayload,\n    nativeAccountId?: string,\n    logger?: Logger\n): AccountEntity {\n    logger?.verbose(\"setCachedAccount called\");\n\n    // Check if base account is already cached\n    const accountKeys = cacheStorage.getAccountKeys();\n    const baseAccountKey = accountKeys.find((accountKey: string) => {\n        return accountKey.startsWith(homeAccountId);\n    });\n\n    let cachedAccount: AccountEntity | null = null;\n    if (baseAccountKey) {\n        cachedAccount = cacheStorage.getAccount(baseAccountKey, logger);\n    }\n\n    const baseAccount =\n        cachedAccount ||\n        AccountEntity.createAccount(\n            {\n                homeAccountId,\n                idTokenClaims,\n                clientInfo,\n                environment,\n                cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\n                msGraphHost: authCodePayload?.msgraph_host,\n                nativeAccountId: nativeAccountId,\n            },\n            authority,\n            base64Decode\n        );\n\n    const tenantProfiles = baseAccount.tenantProfiles || [];\n    const tenantId = claimsTenantId || baseAccount.realm;\n    if (\n        tenantId &&\n        !tenantProfiles.find((tenantProfile) => {\n            return tenantProfile.tenantId === tenantId;\n        })\n    ) {\n        const newTenantProfile = buildTenantProfile(\n            homeAccountId,\n            baseAccount.localAccountId,\n            tenantId,\n            idTokenClaims\n        );\n        tenantProfiles.push(newTenantProfile);\n    }\n    baseAccount.tenantProfiles = tenantProfiles;\n\n    return baseAccount;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}