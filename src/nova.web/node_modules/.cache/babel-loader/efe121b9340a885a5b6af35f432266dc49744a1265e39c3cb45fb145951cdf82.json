{"ast":null,"code":"/*! @azure/msal-common v14.16.0 2024-11-05 */\n'use strict';\n\nimport { UrlString } from '../url/UrlString.mjs';\nimport { AuthorityMetadataSource } from '../utils/Constants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst rawMetdataJSON = {\n  endpointMetadata: {\n    \"login.microsoftonline.com\": {\n      token_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\n      jwks_uri: \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\n      issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\n      authorization_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\n      end_session_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\"\n    },\n    \"login.chinacloudapi.cn\": {\n      token_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\n      jwks_uri: \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\n      issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\n      authorization_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\n      end_session_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\"\n    },\n    \"login.microsoftonline.us\": {\n      token_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\n      jwks_uri: \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\n      issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\n      authorization_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\n      end_session_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\"\n    }\n  },\n  instanceDiscoveryMetadata: {\n    tenant_discovery_endpoint: \"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration\",\n    metadata: [{\n      preferred_network: \"login.microsoftonline.com\",\n      preferred_cache: \"login.windows.net\",\n      aliases: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"]\n    }, {\n      preferred_network: \"login.partner.microsoftonline.cn\",\n      preferred_cache: \"login.partner.microsoftonline.cn\",\n      aliases: [\"login.partner.microsoftonline.cn\", \"login.chinacloudapi.cn\"]\n    }, {\n      preferred_network: \"login.microsoftonline.de\",\n      preferred_cache: \"login.microsoftonline.de\",\n      aliases: [\"login.microsoftonline.de\"]\n    }, {\n      preferred_network: \"login.microsoftonline.us\",\n      preferred_cache: \"login.microsoftonline.us\",\n      aliases: [\"login.microsoftonline.us\", \"login.usgovcloudapi.net\"]\n    }, {\n      preferred_network: \"login-us.microsoftonline.com\",\n      preferred_cache: \"login-us.microsoftonline.com\",\n      aliases: [\"login-us.microsoftonline.com\"]\n    }]\n  }\n};\nconst EndpointMetadata = rawMetdataJSON.endpointMetadata;\nconst InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;\nconst InstanceDiscoveryMetadataAliases = new Set();\nInstanceDiscoveryMetadata.metadata.forEach(metadataEntry => {\n  metadataEntry.aliases.forEach(alias => {\n    InstanceDiscoveryMetadataAliases.add(alias);\n  });\n});\n/**\r\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\r\n * @param staticAuthorityOptions\r\n * @param logger\r\n * @returns\r\n */\nfunction getAliasesFromStaticSources(staticAuthorityOptions, logger) {\n  let staticAliases;\n  const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\n  if (canonicalAuthority) {\n    var _staticAuthorityOptio;\n    const authorityHost = new UrlString(canonicalAuthority).getUrlComponents().HostNameAndPort;\n    staticAliases = getAliasesFromMetadata(authorityHost, (_staticAuthorityOptio = staticAuthorityOptions.cloudDiscoveryMetadata) === null || _staticAuthorityOptio === void 0 ? void 0 : _staticAuthorityOptio.metadata, AuthorityMetadataSource.CONFIG, logger) || getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, AuthorityMetadataSource.HARDCODED_VALUES, logger) || staticAuthorityOptions.knownAuthorities;\n  }\n  return staticAliases || [];\n}\n/**\r\n * Returns aliases for from the raw cloud discovery metadata passed in\r\n * @param authorityHost\r\n * @param rawCloudDiscoveryMetadata\r\n * @returns\r\n */\nfunction getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {\n  logger === null || logger === void 0 || logger.trace(\"getAliasesFromMetadata called with source: \".concat(source));\n  if (authorityHost && cloudDiscoveryMetadata) {\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);\n    if (metadata) {\n      logger === null || logger === void 0 || logger.trace(\"getAliasesFromMetadata: found cloud discovery metadata in \".concat(source, \", returning aliases\"));\n      return metadata.aliases;\n    } else {\n      logger === null || logger === void 0 || logger.trace(\"getAliasesFromMetadata: did not find cloud discovery metadata in \".concat(source));\n    }\n  }\n  return null;\n}\n/**\r\n * Get cloud discovery metadata for common authorities\r\n */\nfunction getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {\n  const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);\n  return metadata;\n}\n/**\r\n * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n * @param response\r\n * @param authority\r\n */\nfunction getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {\n  for (let i = 0; i < response.length; i++) {\n    const metadata = response[i];\n    if (metadata.aliases.includes(authorityHost)) {\n      return metadata;\n    }\n  }\n  return null;\n}\nexport { EndpointMetadata, InstanceDiscoveryMetadata, InstanceDiscoveryMetadataAliases, getAliasesFromMetadata, getAliasesFromStaticSources, getCloudDiscoveryMetadataFromHardcodedValues, getCloudDiscoveryMetadataFromNetworkResponse, rawMetdataJSON };","map":{"version":3,"names":["rawMetdataJSON","endpointMetadata","token_endpoint","jwks_uri","issuer","authorization_endpoint","end_session_endpoint","instanceDiscoveryMetadata","tenant_discovery_endpoint","metadata","preferred_network","preferred_cache","aliases","EndpointMetadata","InstanceDiscoveryMetadata","InstanceDiscoveryMetadataAliases","Set","forEach","metadataEntry","alias","add","getAliasesFromStaticSources","staticAuthorityOptions","logger","staticAliases","canonicalAuthority","_staticAuthorityOptio","authorityHost","UrlString","getUrlComponents","HostNameAndPort","getAliasesFromMetadata","cloudDiscoveryMetadata","AuthorityMetadataSource","CONFIG","HARDCODED_VALUES","knownAuthorities","source","trace","concat","getCloudDiscoveryMetadataFromNetworkResponse","getCloudDiscoveryMetadataFromHardcodedValues","response","i","length","includes"],"sources":["C:\\temp\\NovaApp\\src\\nova.web\\node_modules\\@azure\\msal-common\\src\\authority\\AuthorityMetadata.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"../logger/Logger.js\";\nimport { UrlString } from \"../url/UrlString.js\";\nimport { AuthorityMetadataSource } from \"../utils/Constants.js\";\nimport { StaticAuthorityOptions } from \"./AuthorityOptions.js\";\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata.js\";\nimport { CloudInstanceDiscoveryResponse } from \"./CloudInstanceDiscoveryResponse.js\";\nimport { OpenIdConfigResponse } from \"./OpenIdConfigResponse.js\";\n\ntype RawMetadata = {\n    endpointMetadata: { [key: string]: OpenIdConfigResponse };\n    instanceDiscoveryMetadata: CloudInstanceDiscoveryResponse;\n};\n\nexport const rawMetdataJSON: RawMetadata = {\n    endpointMetadata: {\n        \"login.microsoftonline.com\": {\n            token_endpoint:\n                \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri:\n                \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\n            authorization_endpoint:\n                \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint:\n                \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\",\n        },\n        \"login.chinacloudapi.cn\": {\n            token_endpoint:\n                \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri:\n                \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\n            authorization_endpoint:\n                \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint:\n                \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\",\n        },\n        \"login.microsoftonline.us\": {\n            token_endpoint:\n                \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri:\n                \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\n            authorization_endpoint:\n                \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint:\n                \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\",\n        },\n    },\n    instanceDiscoveryMetadata: {\n        tenant_discovery_endpoint:\n            \"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration\",\n        metadata: [\n            {\n                preferred_network: \"login.microsoftonline.com\",\n                preferred_cache: \"login.windows.net\",\n                aliases: [\n                    \"login.microsoftonline.com\",\n                    \"login.windows.net\",\n                    \"login.microsoft.com\",\n                    \"sts.windows.net\",\n                ],\n            },\n            {\n                preferred_network: \"login.partner.microsoftonline.cn\",\n                preferred_cache: \"login.partner.microsoftonline.cn\",\n                aliases: [\n                    \"login.partner.microsoftonline.cn\",\n                    \"login.chinacloudapi.cn\",\n                ],\n            },\n            {\n                preferred_network: \"login.microsoftonline.de\",\n                preferred_cache: \"login.microsoftonline.de\",\n                aliases: [\"login.microsoftonline.de\"],\n            },\n            {\n                preferred_network: \"login.microsoftonline.us\",\n                preferred_cache: \"login.microsoftonline.us\",\n                aliases: [\n                    \"login.microsoftonline.us\",\n                    \"login.usgovcloudapi.net\",\n                ],\n            },\n            {\n                preferred_network: \"login-us.microsoftonline.com\",\n                preferred_cache: \"login-us.microsoftonline.com\",\n                aliases: [\"login-us.microsoftonline.com\"],\n            },\n        ],\n    },\n};\n\nexport const EndpointMetadata = rawMetdataJSON.endpointMetadata;\nexport const InstanceDiscoveryMetadata =\n    rawMetdataJSON.instanceDiscoveryMetadata;\n\nexport const InstanceDiscoveryMetadataAliases: Set<String> = new Set();\nInstanceDiscoveryMetadata.metadata.forEach(\n    (metadataEntry: CloudDiscoveryMetadata) => {\n        metadataEntry.aliases.forEach((alias: string) => {\n            InstanceDiscoveryMetadataAliases.add(alias);\n        });\n    }\n);\n\n/**\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\n * @param staticAuthorityOptions\n * @param logger\n * @returns\n */\nexport function getAliasesFromStaticSources(\n    staticAuthorityOptions: StaticAuthorityOptions,\n    logger?: Logger\n): string[] {\n    let staticAliases: string[] | undefined;\n    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\n    if (canonicalAuthority) {\n        const authorityHost = new UrlString(\n            canonicalAuthority\n        ).getUrlComponents().HostNameAndPort;\n        staticAliases =\n            getAliasesFromMetadata(\n                authorityHost,\n                staticAuthorityOptions.cloudDiscoveryMetadata?.metadata,\n                AuthorityMetadataSource.CONFIG,\n                logger\n            ) ||\n            getAliasesFromMetadata(\n                authorityHost,\n                InstanceDiscoveryMetadata.metadata,\n                AuthorityMetadataSource.HARDCODED_VALUES,\n                logger\n            ) ||\n            staticAuthorityOptions.knownAuthorities;\n    }\n\n    return staticAliases || [];\n}\n\n/**\n * Returns aliases for from the raw cloud discovery metadata passed in\n * @param authorityHost\n * @param rawCloudDiscoveryMetadata\n * @returns\n */\nexport function getAliasesFromMetadata(\n    authorityHost?: string,\n    cloudDiscoveryMetadata?: CloudDiscoveryMetadata[],\n    source?: AuthorityMetadataSource,\n    logger?: Logger\n): string[] | null {\n    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\n    if (authorityHost && cloudDiscoveryMetadata) {\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(\n            cloudDiscoveryMetadata,\n            authorityHost\n        );\n\n        if (metadata) {\n            logger?.trace(\n                `getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`\n            );\n            return metadata.aliases;\n        } else {\n            logger?.trace(\n                `getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`\n            );\n        }\n    }\n\n    return null;\n}\n\n/**\n * Get cloud discovery metadata for common authorities\n */\nexport function getCloudDiscoveryMetadataFromHardcodedValues(\n    authorityHost: string\n): CloudDiscoveryMetadata | null {\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(\n        InstanceDiscoveryMetadata.metadata,\n        authorityHost\n    );\n    return metadata;\n}\n\n/**\n * Searches instance discovery network response for the entry that contains the host in the aliases list\n * @param response\n * @param authority\n */\nexport function getCloudDiscoveryMetadataFromNetworkResponse(\n    response: CloudDiscoveryMetadata[],\n    authorityHost: string\n): CloudDiscoveryMetadata | null {\n    for (let i = 0; i < response.length; i++) {\n        const metadata = response[i];\n        if (metadata.aliases.includes(authorityHost)) {\n            return metadata;\n        }\n    }\n\n    return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}